<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Hale-Core</name>
    </assembly>
    <members>
        <member name="T:Hale.Core.Config.ConfigurationExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Hale.Core.Config.ConfigurationExtensions.Agent(System.Configuration.Configuration)">
            <summary>
            
            </summary>
            <param name="config"></param>
            <returns></returns>
        </member>
        <member name="M:Hale.Core.Config.ConfigurationExtensions.Api(System.Configuration.Configuration)">
            <summary>
            
            </summary>
            <param name="config"></param>
            <returns></returns>
        </member>
        <member name="M:Hale.Core.Config.ConfigurationExtensions.Database(System.Configuration.Configuration)">
            <summary>
            
            </summary>
            <param name="config"></param>
            <returns></returns>
        </member>
        <member name="T:Hale.Core.Config.AgentSection">
            <summary>
            
            </summary>
        </member>
        <member name="P:Hale.Core.Config.AgentSection.SendPort">
            <summary>
            
            </summary>
        </member>
        <member name="P:Hale.Core.Config.AgentSection.ReceivePort">
            <summary>
            
            </summary>
        </member>
        <member name="P:Hale.Core.Config.AgentSection.Hostname">
            <summary>
            
            </summary>
        </member>
        <member name="P:Hale.Core.Config.AgentSection.Ip">
            <summary>
            
            </summary>
        </member>
        <member name="P:Hale.Core.Config.AgentSection._rawIp">
            <summary>
            
            </summary>
        </member>
        <member name="M:Hale.Core.Config.AgentSection.ValidateSection(System.Configuration.Configuration)">
            <summary>
            
            </summary>
            <param name="_config"></param>
        </member>
        <member name="T:Hale.Core.Config.ApiSection">
            <summary>
            
            </summary>
        </member>
        <member name="P:Hale.Core.Config.ApiSection.Host">
            <summary>
            
            </summary>
        </member>
        <member name="P:Hale.Core.Config.ApiSection.Port">
            <summary>
            
            </summary>
        </member>
        <member name="P:Hale.Core.Config.ApiSection.Scheme">
            <summary>
            
            </summary>
        </member>
        <member name="M:Hale.Core.Config.ApiSection.ValidateSection(System.Configuration.Configuration)">
            <summary>
            
            </summary>
            <param name="_config"></param>
        </member>
        <member name="T:Hale.Core.Config.AppConfig">
            <summary>
            
            </summary>
        </member>
        <member name="M:Hale.Core.Config.AppConfig.Change(System.String)">
            <summary>
            Changes the app config path to param path.
            </summary>
            <param name="path">The new AppConfig Path.</param>
            <returns>The new path.</returns>
        </member>
        <member name="M:Hale.Core.Config.AppConfig.Dispose">
            <summary>
            TODO: Add a usage description.
            </summary>
        </member>
        <member name="T:Hale.Core.Config.DatabaseSection">
            <summary>
            
            </summary>
        </member>
        <member name="P:Hale.Core.Config.DatabaseSection.Type">
            <summary>
            
            </summary>
        </member>
        <member name="P:Hale.Core.Config.DatabaseSection.Host">
            <summary>
            
            </summary>
        </member>
        <member name="P:Hale.Core.Config.DatabaseSection.Port">
            <summary>
            
            </summary>
        </member>
        <member name="P:Hale.Core.Config.DatabaseSection.Database">
            <summary>
            
            </summary>
        </member>
        <member name="P:Hale.Core.Config.DatabaseSection.User">
            <summary>
            
            </summary>
        </member>
        <member name="P:Hale.Core.Config.DatabaseSection.Password">
            <summary>
            
            </summary>
        </member>
        <member name="P:Hale.Core.Config.DatabaseSection.UseIntegratedSecurity">
            <summary>
            
            </summary>
        </member>
        <member name="M:Hale.Core.Config.DatabaseSection.ValidateSection(System.Configuration.Configuration)">
            <summary>
            
            </summary>
            <param name="_config"></param>
        </member>
        <member name="T:Hale.Core.API.MetadataController">
            <summary>
            Handles metadata templates for core entities.
            </summary>
        </member>
        <member name="M:Hale.Core.API.MetadataController.List(System.String)">
            <summary>
                Returns the template used for the requested types metadata.
            </summary>
            <param name="type">A type of domain model, for example user, host etc.</param>
            <returns>A metadata template</returns>
        </member>
        <member name="M:Hale.Core.API.MetadataController.Get(System.String,System.Int32)">
            <summary>
                Returns a single metadata attribute.
            </summary>
            <param name="type">A type of domain model, for example user, host etc.</param>
            <param name="id">The ID of a single metadata attribute.</param>
            <returns></returns>
        </member>
        <member name="M:Hale.Core.API.MetadataController.Put(System.String,Hale.Core.Entities.Shared.Metadata)">
            <summary>
            Creates metadata attribute for a specific entity type
            </summary>
            <param name="metadata"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Hale.Core.API.MetadataController.Patch(System.String,System.Int32,Hale.Core.Entities.Shared.Metadata)">
            <summary>
            Creates metadata attribute for a specific entity type
            </summary>
            <param name="metadata"></param>
            <param name="type"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:Hale.Core.API.AuthenticationController">
            <summary>
            API for handling logins, logouts and status checks.
            </summary>
        </member>
        <member name="M:Hale.Core.API.AuthenticationController.DevLogin(System.String,System.String,System.Boolean)">
            <summary>
            Creates claim and session if the authentication succeeds. (Debug only)
            </summary>
            <param name="username">Username for the login attempt</param>
            <param name="password">Password for the login attempt</param>
            <param name="persistent">Whether or not the session should persist on exit.</param>
            <returns>A custom LoginResponse that will be stored in the local storage for the Hale-GUI ember application.</returns>
        </member>
        <member name="M:Hale.Core.API.AuthenticationController.Login(Hale.Core.Entities.Security.Authentication)">
            <summary>
            Creates claim and session if the authentication succeeds. 
            </summary>
            <param name="auth">A JSON Serialized authentication attempt.</param>
            <returns>A custom LoginResponse that will be stored in the local storage for the Hale-GUI ember application.</returns>
        </member>
        <member name="M:Hale.Core.API.AuthenticationController.Status">
            <summary>
            Check whether the current session is authenticated or not.
            </summary>
            <returns>A statuscode and an error message, in case there happens to be one.</returns>
        </member>
        <member name="M:Hale.Core.API.AuthenticationController.Logout">
            <summary>
            Deletes claim and session if there is any. 
            </summary>
            <returns>200</returns>
        </member>
        <member name="M:Hale.Core.API.AuthenticationController.DevLogout">
            <summary>
            Deletes claim and session if there is any. (Debug only)
            </summary>
            <returns></returns>
        </member>
        <member name="T:Hale.Core.API.HostController">
            <summary>
            API for handling Host entries and related data.
            </summary>
        </member>
        <member name="M:Hale.Core.API.HostController.List">
            <summary>
            List host entities. (Auth)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hale.Core.API.HostController.Get(System.Int32)">
            <summary>
            Get information on a specific host. (Auth)
            </summary>
            <param name="id">Host ID of the host in question.</param>
            <returns></returns>
        </member>
        <member name="T:Hale.Core.API.UserController">
            <summary>
            API for passing user data.
            </summary>
        </member>
        <member name="M:Hale.Core.API.UserController.Add(Hale.Core.Entities.Security.User)">
            <summary>
            Create a new user. (Auth)
            </summary>
            <param name="user">A user model instance.</param>
            <returns></returns>
        </member>
        <member name="M:Hale.Core.API.UserController.Update(System.Int32,Hale.Core.Entities.Security.User)">
            <summary>
            Update user attributes except for password. (Auth)
            </summary>
            <param name="id">The User Id to update.</param>
            <param name="user">An instance of the user model containing the new values.</param>
            <returns></returns>
        </member>
        <member name="M:Hale.Core.API.UserController.AddDetail(System.Int32,System.String,Hale.Core.Entities.Security.UserDetail)">
            <summary>
            Add a user detail to the open schema table. (Auth)
            </summary>
            <param name="id">The user ID for the detail.</param>
            <param name="key">The key to store the detail in.</param>
            <param name="detail">The full userdetail object.</param>
            <returns></returns>
        </member>
        <member name="M:Hale.Core.API.UserController.List">
            <summary>
            List user records from the database. (Auth)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hale.Core.API.UserController.Details(System.Int32)">
            <summary>
            List user details for a specific user. (Auth)
            </summary>
            <param name="id">The user id to retreive the details for.</param>
            <returns></returns>
        </member>
        <member name="M:Hale.Core.API.UserController.Detail(System.Int32,System.Int32)">
            <summary>
            Get a specific user detail for a specified user id. (Auth)
            </summary>
            <param name="userid">The user id to retreive the detail for.</param>
            <param name="detailid">The detail id to fetch.</param>
            <returns></returns>
        </member>
        <member name="M:Hale.Core.API.UserController.Get(System.Int32)">
            <summary>
            Fetch a specific user record. (Auth)
            </summary>
            <param name="id">The user id to fetch.</param>
            <returns></returns>
        </member>
        <member name="T:Hale.Core.Entities.Modules.Module">
            <summary>
            
            </summary>
        </member>
        <member name="P:Hale.Core.Entities.Modules.Module.Id">
            <summary>
            
            </summary>
        </member>
        <member name="P:Hale.Core.Entities.Modules.Module.Identifier">
            <summary>
            
            </summary>
        </member>
        <member name="P:Hale.Core.Entities.Modules.Module.Version">
            <summary>
            
            </summary>
        </member>
        <member name="P:Hale.Core.Entities.Modules.Module.Major">
            <summary>
            
            </summary>
        </member>
        <member name="P:Hale.Core.Entities.Modules.Module.Minor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Hale.Core.Entities.Modules.Module.Revision">
            <summary>
            
            </summary>
        </member>
        <member name="F:Hale.Core.Entities.Modules.Module._major">
            <summary>
            
            </summary>
        </member>
        <member name="F:Hale.Core.Entities.Modules.Module._minor">
            <summary>
            
            </summary>
        </member>
        <member name="F:Hale.Core.Entities.Modules.Module._revision">
            <summary>
            
            </summary>
        </member>
        <member name="M:Hale.Core.Entities.Modules.Module.updateVersion(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            
            </summary>
            <param name="major"></param>
            <param name="minor"></param>
            <param name="revision"></param>
        </member>
        <member name="M:Hale.Core.Entities.Modules.Module.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Hale.Core.Entities.Modules.Module.#ctor(Hale.Lib.Modules.VersionedIdentifier)">
            <summary>
            
            </summary>
            <param name="vi"></param>
        </member>
        <member name="T:Hale.Core.Entities.Modules.Function">
            <summary>
            
            </summary>
        </member>
        <member name="P:Hale.Core.Entities.Modules.Function.Id">
            <summary>
            
            </summary>
        </member>
        <member name="P:Hale.Core.Entities.Modules.Function.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:Hale.Core.Entities.Modules.Function.Type">
            <summary>
            
            </summary>
        </member>
        <member name="P:Hale.Core.Entities.Modules.Function.ModuleId">
            <summary>
            
            </summary>
        </member>
        <member name="T:Hale.Core.Entities.Modules.FunctionType">
            <summary>
            
            </summary>
        </member>
        <member name="P:Hale.Core.Entities.Modules.FunctionType.Id">
            <summary>
            
            </summary>
        </member>
        <member name="P:Hale.Core.Entities.Modules.FunctionType.Type">
            <summary>
            
            </summary>
        </member>
        <member name="F:Hale.Core.Entities.Modules.FunctionType.Action">
            <summary>
            
            </summary>
        </member>
        <member name="F:Hale.Core.Entities.Modules.FunctionType.Check">
            <summary>
            
            </summary>
        </member>
        <member name="F:Hale.Core.Entities.Modules.FunctionType.Info">
            <summary>
            
            </summary>
        </member>
        <member name="T:Hale.Core.Entities.Shared.LoginResponse">
            <summary>
            Message for returning login responses to the GUI.
            </summary>
        </member>
        <member name="P:Hale.Core.Entities.Shared.LoginResponse.UserId">
            <summary>
            Returns the user id for the authenticated user.
            </summary>
        </member>
        <member name="P:Hale.Core.Entities.Shared.LoginResponse.Error">
            <summary>
            Returns any errors during the authentication process.
            </summary>
        </member>
        <member name="T:Hale.Core.Entities.Shared.Metadata">
            <summary>
            Corresponds to the database table Shared.Metadata
            </summary>
        </member>
        <member name="P:Hale.Core.Entities.Shared.Metadata.Id">
            <summary>
            Corresponds to the table column Metadata.Id
            </summary>
        </member>
        <member name="P:Hale.Core.Entities.Shared.Metadata.Type">
            <summary>
            Corresponds to the table column Metadata.Type
            </summary>
        </member>
        <member name="P:Hale.Core.Entities.Shared.Metadata.Attribute">
            <summary>
            Corresponds to the table column Metadata.Attribute
            </summary>
        </member>
        <member name="P:Hale.Core.Entities.Shared.Metadata.Label">
            <summary>
            Corresponds to the table column Metadata.Label
            </summary>
        </member>
        <member name="P:Hale.Core.Entities.Shared.Metadata.Description">
            <summary>
            Corresponds to the table column Metadata.Description
            </summary>
        </member>
        <member name="P:Hale.Core.Entities.Shared.Metadata.Required">
            <summary>
            Corresponds to the table column Metadata.Required
            </summary>
        </member>
        <member name="P:Hale.Core.Entities.Shared.Metadata.Protected">
            <summary>
            Corresponds to the table column Metadata.Protected
            </summary>
        </member>
        <member name="T:Hale.Core.Entities.Checks.Check">
            <summary>
            Corresponds to the database table Checks.Check
            </summary>
        </member>
        <member name="P:Hale.Core.Entities.Checks.Check.Id">
            <summary>
            Corresponds to the table column Checks.Check.Id
            </summary>
        </member>
        <member name="P:Hale.Core.Entities.Checks.Check.Identifier">
            <summary>
            Corresponds to the table column Checks.Check.Identifier
            </summary>
        </member>
        <member name="T:Hale.Core.Entities.Checks.CheckDetail">
            <summary>
            Corresponds to the database table Checks.CheckDetails
            </summary>
        </member>
        <member name="P:Hale.Core.Entities.Checks.CheckDetail.Id">
            <summary>
            Corresponds to the table column Checks.CheckDetails.Id
            </summary>
        </member>
        <member name="P:Hale.Core.Entities.Checks.CheckDetail.CheckId">
            <summary>
            Corresponds to the table column Checks.CheckDetails.CheckId (FK: Checks.Check.Id)
            </summary>
        </member>
        <member name="P:Hale.Core.Entities.Checks.CheckDetail.Version">
            <summary>
            Corresponds to the table column Checks.CheckDetails.Version
            </summary>
        </member>
        <member name="P:Hale.Core.Entities.Checks.CheckDetail.Name">
            <summary>
            Corresponds to the table column Checks.CheckDetails.Name
            </summary>
        </member>
        <member name="P:Hale.Core.Entities.Checks.CheckDetail.Description">
            <summary>
            Corresponds to the table column Checks.CheckDetails.Description
            </summary>
        </member>
        <member name="P:Hale.Core.Entities.Checks.CheckDetail.Activated">
            <summary>
            Corresponds to the table column Checks.CheckDetails.Activated
            </summary>
        </member>
        <member name="T:Hale.Core.Entities.Checks.Metric">
            <summary>
            Corresponds to the database table Checks.Metrics
            </summary>
        </member>
        <member name="P:Hale.Core.Entities.Checks.Metric.Id">
            <summary>
            Corresponds to the table column Checks.Metrics.Id
            </summary>
        </member>
        <member name="P:Hale.Core.Entities.Checks.Metric.ResultId">
            <summary>
            Corresponds to the table column Checks.Metrics.ResultId
            </summary>
        </member>
        <member name="P:Hale.Core.Entities.Checks.Metric.Target">
            <summary>
            Corresponds to the table column Checks.Metrics.Target
            </summary>
        </member>
        <member name="P:Hale.Core.Entities.Checks.Metric.RawValue">
            <summary>
            Corresponds to the table column Checks.Metrics.RawValue
            </summary>
        </member>
        <member name="P:Hale.Core.Entities.Checks.Metric.Weight">
            <summary>
            Corresponds to the table column Checks.Metrics.Weight
            </summary>
        </member>
        <member name="T:Hale.Core.Entities.Checks.Result_">
            <summary>
            Corresponds to the database table Checks.Results
            </summary>
        </member>
        <member name="P:Hale.Core.Entities.Checks.Result_.Id">
            <summary>
            Corresponds to the table column Checks.Results.Id
            </summary>
        </member>
        <member name="P:Hale.Core.Entities.Checks.Result_.CheckId">
            <summary>
            Corresponds to the table column Checks.Results.CheckId (FK: Checks.Checks.Id)
            </summary>
        </member>
        <member name="P:Hale.Core.Entities.Checks.Result_.CheckDetailId">
            <summary>
            Corresponds to the table column Checks.Results.CheckDetailId (FK: Checks.CheckDetails.Id)
            </summary>
        </member>
        <member name="P:Hale.Core.Entities.Checks.Result_.HostId">
            <summary>
            Corresponds to the table column Checks.Results.HostId (FK: Nodes.Hosts.Id)
            </summary>
        </member>
        <member name="P:Hale.Core.Entities.Checks.Result_.ResultType">
            <summary>
            Corresponds to the table column Checks.Results.ResultType
            </summary>
        </member>
        <member name="P:Hale.Core.Entities.Checks.Result_.ExecutionTime">
            <summary>
            Corresponds to the table column Checks.Results.ExecutionTime
            </summary>
        </member>
        <member name="P:Hale.Core.Entities.Checks.Result_.Message">
            <summary>
            Corresponds to the table column Checks.Results.Message
            </summary>
        </member>
        <member name="P:Hale.Core.Entities.Checks.Result_.Exception">
            <summary>
            Corresponds to the table column Checks.Results.Exception
            </summary>
        </member>
        <member name="P:Hale.Core.Entities.Checks.Result_.Target">
            <summary>
            Corresponds to the table column Checks.Results.Target
            </summary>
        </member>
        <member name="T:Hale.Core.Entities.Nodes.Host">
            <summary>
            Corresponds to the database table Nodes.Hosts
            </summary>
        </member>
        <member name="P:Hale.Core.Entities.Nodes.Host.Id">
            <summary>
            Corresponds to the table column Hosts.Id
            </summary>
        </member>
        <member name="P:Hale.Core.Entities.Nodes.Host.Name">
            <summary>
            Corresponds to the table column Hosts.Name
            </summary>
        </member>
        <member name="P:Hale.Core.Entities.Nodes.Host.HostName">
            <summary>
            Corresponds to the table column Hosts.HostName
            </summary>
        </member>
        <member name="P:Hale.Core.Entities.Nodes.Host.Ip">
            <summary>
            Corresponds to the table column Hosts.Ip
            </summary>
        </member>
        <member name="P:Hale.Core.Entities.Nodes.Host.Status">
            <summary>
            Corresponds to the table column Hosts.Status
            </summary>
        </member>
        <member name="P:Hale.Core.Entities.Nodes.Host.LastSeen">
            <summary>
             Corresponds to the table column Hosts.LastSeen
            </summary>
        </member>
        <member name="P:Hale.Core.Entities.Nodes.Host.Updated">
            <summary>
            Corresponds to the table column Hosts.Updated
            </summary>
        </member>
        <member name="P:Hale.Core.Entities.Nodes.Host.Added">
            <summary>
            Corresponds to the table column Hosts.Added
            </summary>
        </member>
        <member name="P:Hale.Core.Entities.Nodes.Host.Guid">
            <summary>
            Corresponds to the table column Hosts.Guid
            </summary>
        </member>
        <member name="P:Hale.Core.Entities.Nodes.Host.RsaKey">
            <summary>
            Corresponds to the table column Hosts.RsaKey.
            Is not serialized by the JsonApiAdapter.
            </summary>
        </member>
        <member name="P:Hale.Core.Entities.Nodes.Host.HostDetails">
            <summary>
            Wrapper containing data in a one-to-many relationship to Nodes.HostDetails.
            </summary>
        </member>
        <member name="T:Hale.Core.Entities.Nodes.HostDetail">
            <summary>
            Corresponds to the database table Nodes.HostDetails
            </summary>
        </member>
        <member name="P:Hale.Core.Entities.Nodes.HostDetail.Id">
            <summary>
            Corresponds to the table column HostDetails.Id
            </summary>
        </member>
        <member name="P:Hale.Core.Entities.Nodes.HostDetail.HostId">
            <summary>
            Corresponds to the table column HostDetails.HostId (FK: Nodes.Hosts.Id)
            </summary>
        </member>
        <member name="P:Hale.Core.Entities.Nodes.HostDetail.Key">
            <summary>
            Corresponds to the table column HostDetails.Key
            </summary>
        </member>
        <member name="P:Hale.Core.Entities.Nodes.HostDetail.Value">
            <summary>
            Corresponds to the table column HostDetails.Value
            </summary>
        </member>
        <member name="T:Hale.Core.Entities.Nodes.HostResponseWrapper">
            <summary>
            JsonApiAdapter wrapper not represented in the database domain.
            Host [1..*] HostDetail
            </summary>
        </member>
        <member name="P:Hale.Core.Entities.Nodes.HostResponseWrapper.Host">
            <summary>
            TODO: Add a usage description.
            </summary>
        </member>
        <member name="P:Hale.Core.Entities.Nodes.HostResponseWrapper.Details">
            <summary>
            TODO: Add a usage description.
            </summary>
        </member>
        <member name="T:Hale.Core.Entities.Nodes.Status">
            <summary>
            Represents the possible values for the table column Nodes.Hosts.Status
            </summary>
        </member>
        <member name="T:Hale.Core.Entities.Security.Authentication">
            <summary>
            TODO: Add a usage description.
            </summary>
        </member>
        <member name="P:Hale.Core.Entities.Security.Authentication.Username">
            <summary>
            TODO: Add a usage description.
            </summary>
        </member>
        <member name="P:Hale.Core.Entities.Security.Authentication.Password">
            <summary>
            TODO: Add a usage description.
            </summary>
        </member>
        <member name="T:Hale.Core.Entities.Security.User">
            <summary>
            Corresponds to the database table Security.User
            </summary>
        </member>
        <member name="P:Hale.Core.Entities.Security.User.Id">
            <summary>
            Corresponds to the table column User.Id
            </summary>
        </member>
        <member name="P:Hale.Core.Entities.Security.User.UserName">
            <summary>
            Corresponds to the table column User.UserName
            </summary>
        </member>
        <member name="P:Hale.Core.Entities.Security.User.Email">
            <summary>
            Corresponds to the table column User.Email
            </summary>
        </member>
        <member name="P:Hale.Core.Entities.Security.User.Password">
            <summary>
            Corresponds to the table column User.Password.
            Only used to hold a hashed and salted representation of the password.
            </summary>
        </member>
        <member name="P:Hale.Core.Entities.Security.User.Salt">
            <summary>
            Corresponds to the table column User.Salt
            </summary>
        </member>
        <member name="P:Hale.Core.Entities.Security.User.Created">
            <summary>
            Corresponds to the table column User.Created
            </summary>
        </member>
        <member name="P:Hale.Core.Entities.Security.User.CreatedBy">
            <summary>
            Corresponds to the table column User.CreatedBy (FK Security.Users.Id)
            </summary>
        </member>
        <member name="P:Hale.Core.Entities.Security.User.Changed">
            <summary>
            Corresponds to the table column User.Changed
            </summary>
        </member>
        <member name="P:Hale.Core.Entities.Security.User.ChangedBy">
            <summary>
            Corresponds to the table column User.ChangedBy (FK Security.Users.Id)
            </summary>
        </member>
        <member name="P:Hale.Core.Entities.Security.User.UserDetails">
            <summary>
            Aggregation of available records in the Security.UserDetails table.
            Users [1..*] UserDetails
            </summary>
        </member>
        <member name="T:Hale.Core.Entities.Security.UserDetail">
            <summary>
            Corresponds to the database table Security.UserDetails
            </summary>
        </member>
        <member name="P:Hale.Core.Entities.Security.UserDetail.Id">
            <summary>
            Corresponds to the table column UserDetails.Id
            </summary>
        </member>
        <member name="P:Hale.Core.Entities.Security.UserDetail.UserId">
            <summary>
            Corresponds to the table column UserDetails.UserId (FK: Security.Users.Id)
            </summary>
        </member>
        <member name="P:Hale.Core.Entities.Security.UserDetail.Key">
            <summary>
            Corresponds to the table column UserDetails.Key
            </summary>
        </member>
        <member name="P:Hale.Core.Entities.Security.UserDetail.Value">
            <summary>
            Corresponds to the table column UserDetails.Value
            </summary>
        </member>
        <member name="F:Hale.Core.Handlers.ModuleInfo.Module">
            <summary>
             The version specified inside the manifest, or if missing, the module dll version
            </summary>
        </member>
        <member name="F:Hale.Core.Handlers.ModuleInfo.Runtime">
            <summary>
             The version of the module dll
            </summary>
        </member>
        <member name="T:Hale.Core.Formatting.JsonAPI.JsonApiHeader">
            <summary>
            JSON API Header. Contains the version number as a string.
            </summary>
        </member>
        <member name="P:Hale.Core.Formatting.JsonAPI.JsonApiHeader.Version">
            <summary>
            The version number of the JSON API.
            </summary>
        </member>
        <member name="T:Hale.Core.Formatting.JsonAPI.JsonApiBase">
            <summary>
            Base class. Holds an instance of JsonApiHeader.
            </summary>
        </member>
        <member name="P:Hale.Core.Formatting.JsonAPI.JsonApiBase.Jsonapi">
            <summary>
            TODO: Add a usage description.
            </summary>
        </member>
        <member name="T:Hale.Core.Formatting.JsonAPI.JsonApiResourceBase">
            <summary>
            A derived class, based on JsonApiBase. Includes resources and links.
            </summary>
        </member>
        <member name="P:Hale.Core.Formatting.JsonAPI.JsonApiResourceBase.Included">
            <summary>
            TODO: Add a usage description.
            </summary>
        </member>
        <member name="P:Hale.Core.Formatting.JsonAPI.JsonApiResourceBase.Links">
            <summary>
            TODO: Add a usage description.
            </summary>
        </member>
        <member name="T:Hale.Core.Formatting.JsonAPI.SingleResourceBase">
            <summary>
            Used for holding single data resources.
            </summary>
        </member>
        <member name="P:Hale.Core.Formatting.JsonAPI.SingleResourceBase.Data">
            <summary>
            TODO: Add a usage description.
            </summary>
        </member>
        <member name="T:Hale.Core.Formatting.JsonAPI.MultiResourceBase">
            <summary>
            Used for holding multiple data resources.
            </summary>
        </member>
        <member name="P:Hale.Core.Formatting.JsonAPI.MultiResourceBase.Data">
            <summary>
            TODO: Add a usage description.
            </summary>
        </member>
        <member name="T:Hale.Core.Formatting.JsonAPI.ResourceIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="P:Hale.Core.Formatting.JsonAPI.ResourceIdentifier.Id">
            <summary>
            TODO: Add a usage description.
            </summary>
        </member>
        <member name="P:Hale.Core.Formatting.JsonAPI.ResourceIdentifier.Type">
            <summary>
            TODO: Add a usage description.
            </summary>
        </member>
        <member name="T:Hale.Core.Formatting.JsonAPI.Resource">
            <summary>
            Resource instance containing attributes and links.
            </summary>
        </member>
        <member name="P:Hale.Core.Formatting.JsonAPI.Resource.Attributes">
            <summary>
            TODO: Add a usage description.
            </summary>
        </member>
        <member name="P:Hale.Core.Formatting.JsonAPI.Resource.Links">
            <summary>
            TODO: Add a usage description.
            </summary>
        </member>
        <member name="T:Hale.Core.Formatting.JsonAPI.DataResource">
            <summary>
            Resource instance derived from Resource. Contains Relationships.
            </summary>
        </member>
        <member name="P:Hale.Core.Formatting.JsonAPI.DataResource.Relationships">
            <summary>
            TODO: Add a usage description.
            </summary>
        </member>
        <member name="T:Hale.Core.Formatting.JsonAPI.Relationship">
            <summary>
            TODO: Add a usage description.
            </summary>
        </member>
        <member name="P:Hale.Core.Formatting.JsonAPI.Relationship.Links">
            <summary>
            TODO: Add a usage description.
            </summary>
        </member>
        <member name="P:Hale.Core.Formatting.JsonAPI.Relationship.Data">
            <summary>
            TODO: Add a usage description.
            </summary>
        </member>
        <member name="P:Hale.Core.Formatting.JsonAPI.Relationship.Meta">
            <summary>
            TODO: Add a usage description.
            </summary>
        </member>
        <member name="T:Hale.Core.Formatting.JsonAPI.ErrorRoot">
            <summary>
            Contains a list of error objects.
            </summary>
        </member>
        <member name="P:Hale.Core.Formatting.JsonAPI.ErrorRoot.Errors">
            <summary>
            TODO: Add a usage description.
            </summary>
        </member>
        <member name="T:Hale.Core.Formatting.JsonAPI.Error">
            <summary>
            Single error objects.
            </summary>
        </member>
        <member name="P:Hale.Core.Formatting.JsonAPI.Error.Status">
            <summary>
            TODO: Add a usage description.
            </summary>
        </member>
        <member name="P:Hale.Core.Formatting.JsonAPI.Error.Source">
            <summary>
            TODO: Add a usage description.
            </summary>
        </member>
        <member name="P:Hale.Core.Formatting.JsonAPI.Error.Title">
            <summary>
            TODO: Add a usage description.
            </summary>
        </member>
        <member name="P:Hale.Core.Formatting.JsonAPI.Error.Detail">
            <summary>
            TODO: Add a usage description.
            </summary>
        </member>
        <member name="P:Hale.Core.Formatting.JsonAPI.Error.Meta">
            <summary>
            TODO: Add a usage description.
            </summary>
        </member>
        <member name="P:Hale.Core.Formatting.JsonAPI.Error.Id">
            <summary>
            TODO: Add a usage description.
            </summary>
        </member>
        <member name="P:Hale.Core.Formatting.JsonAPI.Error.Links">
            <summary>
            TODO: Add a usage description.
            </summary>
        </member>
        <member name="T:Hale.Core.Formatting.JsonAPI.Source">
            <summary>
            Contains a pointer and a parameter.
            </summary>
        </member>
        <member name="P:Hale.Core.Formatting.JsonAPI.Source.Pointer">
            <summary>
            TODO: Add a usage description.
            </summary>
        </member>
        <member name="P:Hale.Core.Formatting.JsonAPI.Source.Parameter">
            <summary>
            TODO: Add a usage description.
            </summary>
        </member>
        <member name="T:Hale.Core.Formatting.JsonAPI.Utilities">
            <summary>
            Utility classes for the JSON API.
            </summary>
        </member>
        <member name="M:Hale.Core.Formatting.JsonAPI.Utilities.FormatException(System.Exception)">
            <summary>
            Custom exception type, generated from a generic exception.
            </summary>
            <param name="x">The original exception</param>
            <returns>A dictionary containing the format exception.</returns>
        </member>
        <member name="M:Hale.Core.Formatting.JsonAPI.Utilities.FormatException(System.Web.Http.HttpError)">
            <summary>
            Custom exception type, generated from a http error.
            </summary>
            <param name="e">The original exception</param>
            <returns>A dictionary containing the http error exception.</returns>
        </member>
        <member name="T:Hale.Core.Formatting.JsonAPIContractResolver">
            <summary>
            TODO: Add a usage description.
            </summary>
        </member>
        <member name="M:Hale.Core.Formatting.JsonAPIContractResolver.ResolvePropertyName(System.String)">
            <summary>
            TODO: Add a usage description.
            </summary>
        </member>
        <member name="M:Hale.Core.Formatting.JsonAPIContractResolver.FormatName(System.String)">
            <summary>
            TODO: Add a usage description.
            </summary>
        </member>
        <member name="T:Hale.Core.Formatting.JsonApiMediaTypeFormatter">
            <summary>
            TODO: Add a usage description.
            </summary>
        </member>
        <member name="M:Hale.Core.Formatting.JsonApiMediaTypeFormatter.#ctor(System.String)">
            <summary>
            TODO: Add a usage description.
            </summary>
        </member>
        <member name="M:Hale.Core.Formatting.JsonApiMediaTypeFormatter.ReadFromStreamAsync(System.Type,System.IO.Stream,System.Net.Http.HttpContent,System.Net.Http.Formatting.IFormatterLogger)">
            <summary>
            TODO: Add a usage description.
            </summary>
        </member>
        <member name="M:Hale.Core.Formatting.JsonApiMediaTypeFormatter.WriteToStreamAsync(System.Type,System.Object,System.IO.Stream,System.Net.Http.HttpContent,System.Net.TransportContext)">
            <summary>
            TODO: Add a usage description.
            </summary>
        </member>
        <member name="M:Hale.Core.Formatting.JsonApiMediaTypeFormatter.CanReadType(System.Type)">
            <summary>
            TODO: Add a usage description.
            </summary>
        </member>
        <member name="M:Hale.Core.Formatting.JsonApiMediaTypeFormatter.CanWriteType(System.Type)">
            <summary>
            TODO: Add a usage description.
            </summary>
        </member>
        <member name="M:Hale.Core.Formatting.JsonApiMediaTypeFormatter.FormatType(System.Type)">
            <summary>
            TODO: Add a usage description.
            </summary>
        </member>
        <member name="M:Hale.Core.Formatting.JsonApiMediaTypeFormatter.BuildLink(System.Type,System.Object)">
            <summary>
            TODO: Add a usage description.
            </summary>
        </member>
        <member name="M:Hale.Core.Formatting.JsonApiMediaTypeFormatter.BuildLink(System.Type,System.Object,System.Type,System.Object)">
            <summary>
            TODO: Add a usage description.
            </summary>
        </member>
        <member name="T:Hale.Core.Utils.StringResult">
            <summary>
            Simple way to return a general error string (eg. file not found), title,
            an optional descriptive error(file "XX" not found), detail
            using a corresponding http result code
            Made to comply with the JSON API specification errors
            </summary>
        </member>
        <member name="M:Hale.Core.Utils.StringResult.#ctor(System.Net.HttpStatusCode,System.String,System.Net.Http.HttpRequestMessage)">
            <summary>
            TODO: Add a usage description.
            </summary>
        </member>
        <member name="M:Hale.Core.Utils.StringResult.#ctor(System.Net.HttpStatusCode,System.String,System.String,System.Net.Http.HttpRequestMessage)">
            <summary>
            TODO: Add a usage description.
            </summary>
        </member>
        <member name="M:Hale.Core.Utils.StringResult.ExecuteAsync(System.Threading.CancellationToken)">
            <summary>
            TODO: Add a usage description.
            </summary>
        </member>
        <member name="T:Hale.Core.Utils.TraceLogger">
            <summary>
            
            </summary>
        </member>
        <member name="M:Hale.Core.Utils.TraceLogger.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Hale.Core.Utils.TraceLogger.Trace(System.String)">
            <summary>
            
            </summary>
            <param name="label"></param>
        </member>
        <member name="M:Hale.Core.Utils.TraceLogger.Reset">
            <summary>
            </summary>
        </member>
        <member name="T:Hale.Core.HaleCoreService">
            <summary>
            The main entry point for starting the Hale-Core service.
            </summary>
        </member>
        <member name="M:Hale.Core.HaleCoreService.#ctor">
            <summary>
            Default constructor for the Hale-Core service
            </summary>
        </member>
        <member name="M:Hale.Core.HaleCoreService.OnStart(System.String[])">
            <summary>
            Method used for executing a threaded start of the core.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Hale.Core.HaleCoreService.OnStop">
            <summary>
            TODO: Add a usage description.
            </summary>
        </member>
        <member name="M:Hale.Core.HaleCoreService.DebugStart">
            <summary>
            Start in debugger mode, which enables us to start Hale-Core as a terminal app instead of a windows service, which is the default behaviour.
            </summary>
        </member>
        <member name="F:Hale.Core.HaleCoreService.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Hale.Core.HaleCoreService.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Hale.Core.HaleCoreService.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Hale.Core.Program.Main">
            <summary>
            The main entry point for the application.
            </summary>
        </member>
        <member name="T:WindowsInstaller.MsiAdvertiseProductFlag">
            <summary>
            Internal class containing constants for the <c>script</c> parameter of <see cref="M:WindowsInstaller.MsiInterop.MsiAdvertiseProduct(System.String,System.String,System.String,System.UInt16)"/> or <see cref="M:WindowsInstaller.MsiInterop.MsiAdvertiseProductEx(System.String,System.String,System.String,System.UInt16,WindowsInstaller.PlatformArchitecture,WindowsInstaller.MsiAdvertismentOptions)"/>.
            This class cannot be inherited.
            This class cannot be instantiated directly.
            </summary>
        </member>
        <member name="F:WindowsInstaller.MsiAdvertiseProductFlag.MachineAssign">
            <summary>Set to advertise a per-machine installation of the product available to all users.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiAdvertiseProductFlag.UserAssign">
            <summary>Set to advertise a per-user installation of the product available to a particular user.</summary>
        </member>
        <member name="T:WindowsInstaller.MsiDatabaseTable">
            <summary>
            Internal class containing constants for an MSI database.
            This class cannot be inherited.
            This class cannot be instantiated directly.
            </summary>
        </member>
        <member name="F:WindowsInstaller.MsiDatabaseTable._Columns">
            <summary>The _Columns table is a read-only system table that contains the column catalog. It lists the columns for all the tables. You can query this table to find out if a given column exists.</summary>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="F:WindowsInstaller.MsiDatabaseTable._Storages">
            <summary>The _Storages table lists embedded OLE data storages. This is a temporary table, created only when referenced by a SQL statement.</summary>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="F:WindowsInstaller.MsiDatabaseTable._Streams">
            <summary>The _Streams table lists embedded OLE data streams. This is a temporary table, created only when referenced by a SQL statement.</summary>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="F:WindowsInstaller.MsiDatabaseTable._Tables">
            <summary>The _Tables table is a read-only system table that lists all the tables in the database. Query this table to find out if a table exists.</summary>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="F:WindowsInstaller.MsiDatabaseTable._TransformView">
            <summary>This is a read-only temporary table used to view transforms with the transform view mode. This table is never persisted by the installer.</summary>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="F:WindowsInstaller.MsiDatabaseTable._Validation">
            <summary>The _Validation table is a system table that contains the column names and the column values for all of the tables in the database. It is used during the database validation process to ensure that all columns are accounted for and have the correct values. This table is not shipped with the installer database.</summary>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="F:WindowsInstaller.MsiDatabaseTable.ActionText">
            <summary>The ActionText table contains text to be displayed in a progress dialog box and written to the log for actions that take a long time to execute. The text displayed consists of the action description and optionally formatted data from the action.</summary>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="F:WindowsInstaller.MsiDatabaseTable.AdminExecuteSequence">
            <summary>The AdminExecuteSequence table lists actions that the installer calls in sequence when the top-level ADMIN action is executed.</summary>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="F:WindowsInstaller.MsiDatabaseTable.AdminUISequence">
            <summary>The AdminUISequence table lists actions that the installer calls in sequence when the top-level ADMIN action is executed and the internal user interface level is set to full UI or reduced UI. The installer skips the actions in this table if the user interface level is set to basic UI or no UI.</summary>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="F:WindowsInstaller.MsiDatabaseTable.AdvtExecuteSequence">
            <summary>The AdvtExecuteSequence table lists actions the installer calls when the top-level ADVERTISE action is executed.</summary>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="F:WindowsInstaller.MsiDatabaseTable.AdvtUISequence">
            <summary>The installer does not use this table. The AdvtUISequence table should not exist in the installation database or it should be left empty.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiDatabaseTable.AppId">
            <summary>The AppId table or the <see cref="F:WindowsInstaller.MsiDatabaseTable.Registry"/> table specifies that the installer configure and register DCOM servers to do one of the following during an installation.</summary>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="F:WindowsInstaller.MsiDatabaseTable.AppSearch">
            <summary>The AppSearch table contains properties needed to search for a file having a particular file signature. The AppSearch table can also be used to set a property to the existing value of a registry or .ini file entry.</summary>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="F:WindowsInstaller.MsiDatabaseTable.BBControl">
            <summary>The BBControl table lists the controls to be displayed on each billboard.</summary>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="F:WindowsInstaller.MsiDatabaseTable.Billboard">
            <summary>The Billboard table lists the Billboard controls displayed in the full user interface.</summary>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="F:WindowsInstaller.MsiDatabaseTable.Binary">
            <summary>The Binary table holds the binary data for items such as bitmaps, animations, and icons. The binary table is also used to store data for custom actions.</summary>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="F:WindowsInstaller.MsiDatabaseTable.BindImage">
            <summary>The BindImage table contains information about each executable or DLL that needs to be bound to the DLLs imported by it.</summary>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="F:WindowsInstaller.MsiDatabaseTable.CCPSearch">
            <summary>The CCPSearch table contains the list of file signatures used for the Compliance Checking Program (CCP). At least one of these files needs to be present on a user's computer for the user to be in compliance with the program.</summary>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="F:WindowsInstaller.MsiDatabaseTable.CheckBox">
            <summary>The CheckBox table lists the values for the check boxes.</summary>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="F:WindowsInstaller.MsiDatabaseTable.Class">
            <summary>The Class table contains COM server-related information that must be generated as a part of the product advertisement. Each row may generate a set of registry keys and values. The associated ProgId information is included in this table.</summary>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="F:WindowsInstaller.MsiDatabaseTable.ComboBox">
            <summary>The lines of a combo box are not treated as individual controls; they are part of a single combo box that functions as a control. This table lists the values for each combo box.</summary>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="F:WindowsInstaller.MsiDatabaseTable.CompLocator">
            <summary>The CompLocator table holds the information needed to find a file or a directory using the installer configuration data.</summary>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="F:WindowsInstaller.MsiDatabaseTable.Complus">
            <summary>The Complus table contains information needed to install COM+ applications.</summary>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="F:WindowsInstaller.MsiDatabaseTable.Component">
            <summary>The Component table lists components.</summary>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="F:WindowsInstaller.MsiDatabaseTable.Condition">
            <summary>The Condition table can be used to modify the selection state of any entry in the <see cref="F:WindowsInstaller.MsiDatabaseTable.Feature"/> table based on a conditional expression.</summary>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="F:WindowsInstaller.MsiDatabaseTable.Control">
            <summary>The Control table defines the controls that appear on each dialog box.</summary>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="F:WindowsInstaller.MsiDatabaseTable.ControlCondition">
            <summary>The ControlCondition table enables an author to specify special actions to be applied to controls based on the result of a conditional statement. For example, using this table the author could choose to hide a control based on the VersionNT property.</summary>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="F:WindowsInstaller.MsiDatabaseTable.ControlEvent">
            <summary>The ControlEvent table allows the author to specify the Control Events started when a user interacts with a PushButton Control, CheckBox Control, or SelectionTree Control. These are the only controls users can use to initiate control events. Each control can publish multiple control events.</summary>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="F:WindowsInstaller.MsiDatabaseTable.CreateFolder">
            <summary>The CreateFolder table contains references to folders that need to be created explicitly for a particular component.</summary>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="F:WindowsInstaller.MsiDatabaseTable.CustomAction">
            <summary>The CustomAction table provides the means of integrating custom code and data into the installation. The source of the code that is executed can be a stream contained within the database, a recently installed file, or an existing executable file.</summary>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="F:WindowsInstaller.MsiDatabaseTable.Dialog">
            <summary>The Dialog table contains all the dialogs that appear in the user interface in both the full and reduced modes.</summary>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="F:WindowsInstaller.MsiDatabaseTable.Directory">
            <summary>The Directory table specifies the directory layout for the product. Each row of the table indicates a directory both at the source and the target.</summary>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="F:WindowsInstaller.MsiDatabaseTable.DrLocator">
            <summary>The DrLocator table holds the information needed to find a file or directory by searching the directory tree.</summary>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="F:WindowsInstaller.MsiDatabaseTable.DuplicateFile">
            <summary>The DuplicateFile table contains a list of files that are to be duplicated, either to a different directory than the original file or to the same directory but with a different name. The original file must be a file installed by the InstallFiles action.</summary>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="F:WindowsInstaller.MsiDatabaseTable.Environment">
            <summary>The Environment table is used to set the values of environment variables.</summary>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="F:WindowsInstaller.MsiDatabaseTable.Error">
            <summary>The Error table is used to look up error message formatting templates when processing errors with an error code set but without a formatting template set (this is the normal situation).</summary>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="F:WindowsInstaller.MsiDatabaseTable.EventMapping">
            <summary>The EventMapping table lists the controls that subscribe to some control event and lists the attribute to be changed when the event is published by another control or the installer.</summary>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="F:WindowsInstaller.MsiDatabaseTable.Extension">
            <summary>The Extension table contains information about file name extension servers that must be generated as a part of product advertisement. Each row generates a set of registry keys and values.</summary>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="F:WindowsInstaller.MsiDatabaseTable.Feature">
            <summary>The Feature table defines the logical tree structure of features.</summary>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="F:WindowsInstaller.MsiDatabaseTable.FeatureComponents">
            <summary>The FeatureComponents table defines the relationship between features and components. For each feature, this table lists all the components that make up that feature.</summary>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="F:WindowsInstaller.MsiDatabaseTable.File">
            <summary>The File table contains a complete list of source files with their various attributes, ordered by a unique, non-localized, identifier. Files can be stored on the source media as individual files or compressed within a cabinet file.</summary>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="F:WindowsInstaller.MsiDatabaseTable.FileSFPCatalog">
            <summary>The FileSFPCatalog table associates specified files with the catalog files used by Windows Millennium Edition for Windows File Protection.</summary>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="F:WindowsInstaller.MsiDatabaseTable.Font">
            <summary>The Font table contains the information for registering font files with the system.</summary>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="F:WindowsInstaller.MsiDatabaseTable.Icon">
            <summary>This table contains the icon files. Each icon from the table is copied to a file as a part of product advertisement to be used for advertised shortcuts and OLE servers.</summary>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="F:WindowsInstaller.MsiDatabaseTable.IniFile">
            <summary>The IniFile table contains the .ini information that the application needs to set in an .ini file.</summary>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="F:WindowsInstaller.MsiDatabaseTable.IniLocator">
            <summary>The IniLocator table holds the information needed to search for a file or directory using an .ini file or to search for a particular .ini entry itself. The .ini file must be present in the default Microsoft Windows directory.</summary>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="F:WindowsInstaller.MsiDatabaseTable.InstallExecuteSequence">
            <summary>The InstallExecuteSequence table lists actions that are executed when the top-level INSTALL action is executed.</summary>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="F:WindowsInstaller.MsiDatabaseTable.InstallUISequence">
            <summary>The InstallUISequence table lists actions that are executed when the top-level INSTALL action is executed and the internal user interface level is set to full UI or reduced UI. The installer skips the actions in this table if the user interface level is set to basic UI or no UI.</summary>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="F:WindowsInstaller.MsiDatabaseTable.IsolatedComponent">
            <summary>Each record of the IsolatedComponent table associates the component specified in the Component_Application column (commonly an .exe) with the component specified in the Component_Shared column (commonly a shared DLL). The IsolateComponents action installs a copy of Component_Shared into a private location for use by Component_Application. This isolates the Component_Application from other copies of Component_Shared that may be installed to a shared location on the computer.</summary>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="F:WindowsInstaller.MsiDatabaseTable.LaunchCondition">
            <summary>The LaunchCondition table is used by the LaunchConditions action. It contains a list of conditions that all must be satisfied for the installation to begin.</summary>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="F:WindowsInstaller.MsiDatabaseTable.ListBox">
            <summary>The lines of a list box are not treated as individual controls, but they are part of a list box that functions as a control. The ListBox table defines the values for all list boxes.</summary>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="F:WindowsInstaller.MsiDatabaseTable.ListView">
            <summary>The lines of a listview are not treated as individual controls, but they are part of a listview that functions as a control. The ListView table defines the values for all listviews.</summary>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="F:WindowsInstaller.MsiDatabaseTable.LockPermissions">
            <summary>The LockPermissions table is used to secure individual portions of your application in a locked-down environment. It can be used with the installation of files, registry keys, and created folders.</summary>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="F:WindowsInstaller.MsiDatabaseTable.Media">
            <summary>The Media table describes the set of disks that make up the source media for the installation.</summary>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="F:WindowsInstaller.MsiDatabaseTable.MIME">
            <summary>The MIME table associates a MIME content type with a file extension or a CLSID to generate the extension or COM server information required for advertisement of the MIME (Multipurpose Internet Mail Extensions) content.</summary>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="F:WindowsInstaller.MsiDatabaseTable.ModuleAdminUISequence">
            <summary>For merge modules, a merge tool evaluates the ModuleAdminUISequence table and then inserts the calculated actions into the <see cref="F:WindowsInstaller.MsiDatabaseTable.AdminUISequence"/> table with a correct sequence number.</summary>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="F:WindowsInstaller.MsiDatabaseTable.ModuleAdminExecuteSequence">
            <summary>For merge modules, a merge tool evaluates the ModuleAdminExecuteSequence table and then inserts the calculated actions into the <see cref="F:WindowsInstaller.MsiDatabaseTable.AdminExecuteSequence"/> table with a correct sequence number.</summary>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="F:WindowsInstaller.MsiDatabaseTable.ModuleAdvtExecuteSequence">
            <summary>For merge modules, a merge tool evaluates the ModuleAdvtExecuteSequence table and then inserts the calculated actions into the <see cref="F:WindowsInstaller.MsiDatabaseTable.AdvtExecuteSequence"/> table with a correct sequence number.</summary>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="F:WindowsInstaller.MsiDatabaseTable.ModuleComponents">
            <summary>For merge modules, the ModuleComponents table contains a list of the components found in the merge module.</summary>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="F:WindowsInstaller.MsiDatabaseTable.ModuleConfiguration">
            <summary>For merge modules, the ModuleConfiguration table identifies the configurable attributes of the module. This table is not merged into the database.</summary>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="F:WindowsInstaller.MsiDatabaseTable.ModuleDependency">
            <summary>For merge modules, the ModuleDependency table keeps a list of other merge modules that are required for this merge module to operate properly. This table enables a merge or verification tool to ensure that the necessary merge modules are in fact included in the user's installer database. The tool checks by cross referencing this table with the <see cref="F:WindowsInstaller.MsiDatabaseTable.ModuleSignature"/> table in the installer database.</summary>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="F:WindowsInstaller.MsiDatabaseTable.ModuleExclusion">
            <summary>For merge modules, the ModuleExclusion table keeps a list of other merge modules that are incompatible in the same installer database. This table enables a merge or verification tool to check that conflicting merge modules are not merged in the user's installer database. The tool checks by cross-referencing this table with the <see cref="F:WindowsInstaller.MsiDatabaseTable.ModuleSignature"/> table in the installer database.</summary>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="F:WindowsInstaller.MsiDatabaseTable.ModeleIgnore">
            <summary>For merge modules, if a table in the merge module is listed in the ModuleIgnoreTable table, it is not merged into the .msi file. If the table already exists in the .msi file, it is not modified by the merge. The tables in the ModuleIgnoreTable can therefore contain data that is unneeded after the merge.</summary>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="F:WindowsInstaller.MsiDatabaseTable.ModuleInstallExecuteSequence">
            <summary>For merge modules, a merge tool evaluates the ModuleInstallExecuteSequence table and then inserts the calculated actions into the <see cref="F:WindowsInstaller.MsiDatabaseTable.InstallExecuteSequence"/> table with a correct sequence number.</summary>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="F:WindowsInstaller.MsiDatabaseTable.ModuleInstallUISequence">
            <summary>For merge modules, a merge tool evaluates the ModuleInstallUISequence table and then inserts the calculated actions into the <see cref="F:WindowsInstaller.MsiDatabaseTable.InstallUISequence"/> table with a correct sequence number.</summary>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="F:WindowsInstaller.MsiDatabaseTable.ModuleSignature">
            <summary>For merge modules, the ModuleSignature Table is a required table. It contains all the information necessary to identify a merge module. The merge tool adds this table to the .msi file if one does not already exist. The ModuleSignature table in a merge module has only one row containing the ModuleID, Language, and Version. However, the ModuleSignature table in an .msi file has a row containing this information for each .msm file that has been merged into it.</summary>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="F:WindowsInstaller.MsiDatabaseTable.ModuleSubstitution">
            <summary>For merge modules, the ModuleSubstitution table specifies the configurable fields of a module database and provides a template for the configuration of each field. The user or merge tool may query this table to determine what configuration operations are to take place. This table is not merged into the target database.</summary>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="F:WindowsInstaller.MsiDatabaseTable.MoveFile">
            <summary>This table contains a list of files to be moved or copied from a specified source directory to a specified destination directory.</summary>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="F:WindowsInstaller.MsiDatabaseTable.MsiAssembly">
            <summary>The MsiAssembly table specifies Windows Installer settings for Microsoft .NET Framework assemblies and Win32 assemblies.</summary>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="F:WindowsInstaller.MsiDatabaseTable.MsiAssemblyName">
            <summary>The MsiAssembly table and MsiAssemblyName table specify Windows Installer settings for common language runtime assemblies and Win32 assemblies.</summary>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="F:WindowsInstaller.MsiDatabaseTable.MsiDigitalCertificate">
            <summary>The MsiDigitalCertificate table stores certificates in binary stream format and associates each certificate with a primary key. The primary key is used to share certificates among multiple digitally signed objects. A digital certificate is a credential that provides a means to verify identity.</summary>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="F:WindowsInstaller.MsiDatabaseTable.MsiDigitalSignature">
            <summary>The MsiDigitalSignature table contains the signature information for every digitally signed object in the installation database.</summary>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="F:WindowsInstaller.MsiDatabaseTable.MsiFileHash">
            <summary>The MsiFileHash table is used to store a 128-bit hash of a source file provided by the Windows Installer package. The hash is split into four 32-bit values and stored in separate columns of the table.</summary>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="F:WindowsInstaller.MsiDatabaseTable.MsiPatchHeaders">
            <summary>The MsiPatchHeaders table holds the binary patch header streams used for patch validation. A patch containing a populated MsiPatchHeaders table can only be applied using Windows Installer version 2.0 or later.</summary>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="F:WindowsInstaller.MsiDatabaseTable.ODBCAttribute">
            <summary>The ODBCAttribute table contains information about the attributes of ODBC drivers and translators.</summary>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="F:WindowsInstaller.MsiDatabaseTable.ODBCDataSource">
            <summary>The ODBCDataSource table lists the data sources belonging to the installation.</summary>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="F:WindowsInstaller.MsiDatabaseTable.ODBCDriver">
            <summary>The ODBCDriver table lists the ODBC drivers belonging to the installation.</summary>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="F:WindowsInstaller.MsiDatabaseTable.ODBCSourceAttribute">
            <summary>The ODBCSourceAttribute table contains information about the attributes of data sources.</summary>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="F:WindowsInstaller.MsiDatabaseTable.ODBCTranslator">
            <summary>The ODBCTranslator table lists the ODBC translators belonging to the installation.</summary>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="F:WindowsInstaller.MsiDatabaseTable.Patch">
            <summary>The Patch table specifies the file that is to receive a particular patch and the physical location of the patch files on the media images.</summary>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="F:WindowsInstaller.MsiDatabaseTable.PatchPackage">
            <summary>The PatchPackage table describes all patch packages that have been applied to this product. For each patch package, the unique identifier for the patch is provided along with information about the media image the on which the patch is located.</summary>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="F:WindowsInstaller.MsiDatabaseTable.ProgId">
            <summary>The ProgId table contains information for program IDs and version independent program IDs that must be generated as a part of the product advertisement.</summary>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="F:WindowsInstaller.MsiDatabaseTable.Property">
            <summary>The Property table contains the property names and values for all defined properties in the installation. Properties with Null values are not present in the table.</summary>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="F:WindowsInstaller.MsiDatabaseTable.PublishComponent">
            <summary>The PublishComponent table associates components listed in the <see cref="F:WindowsInstaller.MsiDatabaseTable.Component"/> table with a qualifier text-string and a category ID GUID. Components with parallel functionality that have been grouped together in this way are referred to as qualified components.</summary>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="F:WindowsInstaller.MsiDatabaseTable.RadioButton">
            <summary>Radio buttons are not treated as individual controls, but they are part of a radio button group that functions as a RadioButtonGroup control. The RadioButton table lists the buttons for all the groups.</summary>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="F:WindowsInstaller.MsiDatabaseTable.Registry">
            <summary>The Registry table holds the registry information that the application needs to set in the system registry.</summary>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="F:WindowsInstaller.MsiDatabaseTable.RegLocator">
            <summary>The RegLocator table holds the information needed to search for a file or directory using the registry, or to search for a particular registry entry itself.</summary>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="F:WindowsInstaller.MsiDatabaseTable.RemoveFile">
            <summary>The RemoveFile table contains a list of files to be removed by the RemoveFiles action. Setting the FileName column of this table to Null supports the removal of empty folders.</summary>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="F:WindowsInstaller.MsiDatabaseTable.RemoveIniFile">
            <summary>The RemoveIniFile table contains the information an application needs to delete from a .ini file.</summary>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="F:WindowsInstaller.MsiDatabaseTable.RemoveRegistry">
            <summary>The RemoveRegistry table contains the registry information the application needs to delete from the system registry.</summary>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="F:WindowsInstaller.MsiDatabaseTable.ReserveCost">
            <summary>The ReserveCost table is an optional table that allows the author to reserve an amount of disk space in any directory that depends on the installation state of a component.</summary>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="F:WindowsInstaller.MsiDatabaseTable.SelfReg">
            <summary>The SelfReg table contains information about modules that need to be self registered. The installer calls the DllRegisterServer function during installation of the module; it calls DllUnregisterServer during uninstallation of the module. The installer does not self register EXE files.</summary>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="F:WindowsInstaller.MsiDatabaseTable.ServiceControl">
            <summary>The ServiceControl table is used to control installed or uninstalled services.</summary>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="F:WindowsInstaller.MsiDatabaseTable.ServiceInstall">
            <summary>The ServiceInstall table is used to install a service.</summary>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="F:WindowsInstaller.MsiDatabaseTable.SFPCatalog">
            <summary>The SFPCatalog table contains the catalogs used by Windows Millennium Edition for Windows File Protection on Windows Millennium Edition.</summary>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="F:WindowsInstaller.MsiDatabaseTable.Shortcut">
            <summary>The Shortcut table holds the information the application needs to create shortcuts on the user's computer.</summary>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="F:WindowsInstaller.MsiDatabaseTable.Signature">
            <summary>The Signature table holds the information that uniquely identifies a file signature.</summary>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="F:WindowsInstaller.MsiDatabaseTable.TextStyle">
            <summary>The TextStyle table lists different font styles used in controls having text.</summary>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="F:WindowsInstaller.MsiDatabaseTable.TypeLib">
            <summary>The TypeLib table contains the information that needs to be placed in the registry registration of type libraries.</summary>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="F:WindowsInstaller.MsiDatabaseTable.UIText">
            <summary>The UIText table contains the localized versions of some of the strings used in the user interface. These strings are not part of any other table. The UIText table is for strings that have no logical place in any other table.</summary>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="F:WindowsInstaller.MsiDatabaseTable.Upgrade">
            <summary>The Upgrade table contains information required during major upgrades. To fully enable the installer's upgrade capabilities, every package should have an UpgradeCode property and an Upgrade table. Each record in the Upgrade table gives a characteristic combination of upgrade code, product version, and language information used to identify a set of products affected by the upgrade.</summary>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="F:WindowsInstaller.MsiDatabaseTable.Verb">
            <summary>The Verb table contains command-verb information associated with file extensions that must be generated as a part of product advertisement. Each row generates a set of registry keys and values.</summary>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="T:WindowsInstaller.MsiInstallerProperty">
            <summary>
            Internal class containing constants for MSI installer properties.
            This class cannot be inherited.
            This class cannot be instantiated directly.
            </summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.OriginalDatabase">
            <summary>The installer sets the OriginalDatabase property to the launched-from database, the database on the source, or the cached database.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.SourceDir">
            <summary>Root directory containing the source files.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.TARGETDIR">
            <summary>Specifies the root destination directory for the installation. During an administrative installation this property is the location to copy the installation package.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.ACTION">
            <summary>Initial action called after the installer is initialized.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.ALLUSERS">
            <summary>Determines where configuration information will be stored.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.ARPAUTHORIZEDCDFPREFIX">
            <summary>URL of the update channel for the application.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.ARPCOMMENTS">
            <summary>Provides Comments for the Add or Remove Programs on Control Panel.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.ARPCONTACT">
            <summary>Provides Contact for the Add or Remove Programs on Control Panel.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.ARPINSTALLLOCATION">
            <summary>Fully qualified path to the application's primary folder.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.ARPNOMODIFY">
            <summary>Disables functionality that would modify the product.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.ARPNOREMOVE">
            <summary>Disables functionality that would remove the product.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.ARPNOREPAIR">
            <summary>Disables the Repair button in the Programs wizard.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.ARPPRODUCTICON">
            <summary>Specifies the primary icon for the installation package.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.ARPREADME">
            <summary>Provides a ReadMe for the Add or Remove Programs on Control Panel.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.ARPSIZE">
            <summary>Estimated size of the application in kilobytes.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.ARPSYSTEMCOMPONENT">
            <summary>Prevents display of application in the Add or Remove Programs list.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.ARPURLINFOABOUT">
            <summary>URL for an application's home page.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.ARPURLUPDATEINFO">
            <summary>URL for application-update information.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.AVAILABLEFREEREG">
            <summary>Registry space in xilobytes required by the application. Used by AllocateRegistrySpace action.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.CCP_DRIVE">
            <summary>The root path for any of the qualifying products for CCP.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.DefaultUIFont">
            <summary>Default font style used for controls.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.DISABLEADVTSHORTCUTS">
            <summary>Set to disable the generation certain shortcuts supporting installation-on-demand.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.DISABLEMEDIA">
            <summary>Prevents the installer from registering media sources, such as a CD-ROMs, as valid sources for the product.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.DISABLEROLLBACK">
            <summary>Disables rollback for the current configuration.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.EXECUTEACTION">
            <summary>Top-level action initiated by the ExecuteAction action.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.EXECUTEMODE">
            <summary>Mode of execution performed by the installer.  (None, Script [default])</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.FASTOEM">
            <summary>Improves installation performance under specific OEM scenarios.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.INSTALLLEVEL">
            <summary>Initial "level" at which features will be installed.  (1 - 32767)</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.LIMITUI">
            <summary>UI level capped as Basic.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.LOGACTION">
            <summary>List of action names that will be logged (separated only by semicolons and with no spaces.)</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.MEDIAPACKAGEPATH">
            <summary>This property must be set to the relative path if the installation package is not located at the root of the CD-ROM.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.MSINODISABLEMEDIA">
            <summary>Set to prevent the installer from setting the DISABLEMEDIA property. Available with Windows Installer version 1.0.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.PRIMARYFOLDER">
            <summary>Allows the author to designate a "primary" folder for the installation. Used to determine the values for the PrimaryVolumePath, PrimaryVolumeSpaceAvailable, PrimaryVolumeSpaceRequired, and PrimaryVolumeSpaceRemaining properties.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.Privileged">
            <summary>Runs an installation with elevated privileges.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.PROMPTROLLBACKCOST">
            <summary>Action if there is insufficient disk space for the installation.  (P - prompt, D - disable, F - fail)</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.REBOOT">
            <summary>Forces or suppresses restarting.  (Force, Suppress, ReallySuppress)</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.REBOOTPROMPT">
            <summary>Suppresses the display of prompts for restarts to the user. Any restarts that are needed happen automatically.  (S or Suppress)</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.ROOTDRIVE">
            <summary>Default drive for the installation.  (Must end in '\')</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.SEQUENCE">
            <summary>A table having the sequence table schema.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.SHORTFILENAMES">
            <summary>Causes short file names to be used.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.Transforms">
            <summary>List of transforms to be applied to the database.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.TRANSFORMSATSOURCE">
            <summary>Informs the installer that the transforms for the product reside at the source.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.TRANSFORMSSECURE">
            <summary>Setting the TRANSFORMSECURE property to 1 informs the installer that transforms are to be cached locally on the user's computer in a location where the user does not have write access.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.Date">
            <summary>The current date.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.Time">
            <summary>The current time.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.ADDDEFAULT">
            <summary>List of features (delimited by commas) to be installed in their default configuration.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.ADDLOCAL">
            <summary>List of features (delimited by commas) to be installed locally.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.ADDSOURCE">
            <summary>List of features (delimited by commas) to be run from source.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.ADVERTISE">
            <summary>List of features (delimited by commas) to be advertised.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.COMPADDLOCAL">
            <summary>List of component IDs (delimited by commas) to be installed locally.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.COMPADDSOURCE">
            <summary>List of component IDs (delimited by commas) to run from source media.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.FILEADDDEFAULT">
            <summary>List of file keys of files (delimited by commas) that are to be installed in their default configuration.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.FILEADDLOCAL">
            <summary>List of file keys of the files (delimited by commas) to be run locally.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.FILEADDSOURCE">
            <summary>List of file keys (delimited by commas)to be run from the source media.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.PATCH">
            <summary>Setting this property applies a patch.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.REINSTALL">
            <summary>List of features (delimited by commas) to be reinstalled.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.REINSTALLMODE">
            <summary>A string containing letters that specify the type of reinstall to perform.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.REMOVE">
            <summary>List of features (delimited by commas) to be removed.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.Alpha">
            <summary>Numeric processor level if running on an Alpha processor. </summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.BorderSide">
            <summary>The width, in pixels, of the window borders.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.BorderTop">
            <summary>The height, in pixels, of the window borders.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.CaptionHeight">
            <summary>Height, in pixels, of normal caption area.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.ColorBits">
            <summary>Number of adjacent color bits for each pixel.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.Intel">
            <summary>Numeric processor level if running on an Intel processor.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.Intel64">
            <summary>Numeric processor level if running on an Itanium processor.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.PhysicalMemory">
            <summary>Size of the installed RAM in megabytes.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.ScreenX">
            <summary>Width, in pixels, of the screen.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.ScreenY">
            <summary>Height, in pixels, of the screen.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.TextHeight">
            <summary>The height of characters in logical units.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.VirtualMemory">
            <summary>Amount of available page file space in megabytes.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.AFTERREBOOT">
            <summary>Indicates current installation follows a reboot invoked by the ForceReboot action.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.CostingComplete">
            <summary>Indicates whether disk space costing has completed.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.Installed">
            <summary>Indicates that a product is already installed.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.MSICHECKCRCS">
            <summary>The installer does a CRC on files only if the MSICHECKCRCS property is set.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.NOCOMPANYNAME">
            <summary>Suppresses the automatic setting of the COMPANYNAME property.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.NOUSERNAME">
            <summary>Suppresses the automatic setting of the USERNAME property.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.OutOfDiskSpace">
            <summary>Insufficient disk space to accommodate the installation.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.OutOfNoRbDiskSpace">
            <summary>Insufficient disk space with rollback turned off.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.Preselected">
            <summary>Features are already selected.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.PrimaryVolumePath">
            <summary>The Installer sets the value of this property to the path of the volume designated by the PRIMARYFOLDER property.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.PrimaryVolumeSpaceAvailable">
            <summary>The Installer sets the value of this property to a string representing the total number of bytes available on the volume referenced by the PrimaryVolumePath property.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.PrimaryVolumeSpaceRemaining">
            <summary>The Installer sets the value of this property to a string representing the total number of bytes remaining on the volume referenced by the PrimaryVolumePath property if all the currently selected features were installed.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.PrimaryVolumeSpaceRequired">
            <summary>The Installer sets the value of this property to a string representing the total number of bytes required by all currently selected features on the volume referenced by the PrimaryVolumePath property.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.ProductLanguage">
            <summary>Numeric language identifier (LANGID) for the database. (REQUIRED)</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.ReplacedInUseFiles">
            <summary>Set if the installer installs over a file that is being held in use.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.RESUME">
            <summary>Resumed installation.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.RollbackDisabled">
            <summary>The installer sets this property whenever rollback is disabled.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.UILevel">
            <summary>Indicates the user interface level.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.UpdateStarted">
            <summary>Set when changes to the system have begun for this installation.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.UPGRADINGPRODUCTCODE">
            <summary>Set by the installer when an upgrade removes an application. Available with Windows Installer version 1.1 or later.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.VersionMsi">
            <summary>The installer sets this property to the version of Windows Installer run during the installation.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.AdminUser">
            <summary>Set on Microsoft Windows NT/Windows 2000 if the user has administrator privileges.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.ComputerName">
            <summary>Computer name of the current system.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.MsiNTProductType">
            <summary>Indicates the Windows product type. Only available with Windows Installer version 2.0 and later versions.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.MsiNTSuiteBackOffice">
            <summary>On Windows 2000 and later operating systems, the installer sets this property to 1 only if Microsoft BackOffice components are installed. Only available with Windows Installer version 2.0 and later versions.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.MsiNTSuiteDataCenter">
            <summary>On Windows 2000 and later operating systems, the installer sets this property to 1 only if Windows 2000 DataCenter Server is installed. Only available with Windows Installer version 2.0 and later versions.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.MsiNTSuiteEnterprise">
            <summary>On Windows 2000 and later operating systems, the installer sets this property to 1 only if Windows 2000 Advanced Server is installed. Only available with Windows Installer version 2.0 and later versions.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.MsiNTSuiteSmallBusiness">
            <summary>On Windows 2000 and later operating systems, the installer sets this property to 1 only if Microsoft Small Business Server is installed. Only available with Windows Installer version 2.0 and later versions.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.MsiNTSuiteSmallBusinessRestricted">
            <summary>On Windows 2000 and later operating systems, the installer sets this property to 1 only if Microsoft Small Business Server is installed with the restrictive client license. Only available with Windows Installer version 2.0 and later.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.MsiNTSuiteWebServer">
            <summary>On Windows 2000 and later operating systems, the installer sets the MsiNTSuiteWebServer property to 1 if the web edition of the Windows  2003 Server family is installed. Only available with the Windows Server 2003 family release of the Windows Installer.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.MsiNTSuitePersonal">
            <summary>On Windows 2000 and later operating systems, the installer sets this property to 1 only if the operating system is Workstation Personal (not Professional). Only available with Windows Installer version 2.0 and later versions.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.MsiNetAssemblySupport">
            <summary>On systems that support common language runtime assemblies, the installer sets the value of this property to the file version of fusion.dll. The installer does not set this property if the operating system does not support common language runtime assemblies. Only available with Windows Installer version 2.0 and later.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.MsiWin32AssemblySupport">
            <summary>On systems that support Win32 assemblies, the installer sets the value of this property to the file version of sxs.dll. The installer does not set this property if the operating system does not support Win32 assemblies. Only available with Windows Installer version 2.0 and later.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.OLEAdvtSupport">
            <summary>Set if OLE supports the Windows Installer.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.RedirectedDLLSupport">
            <summary>The installer sets the RedirectedDLLSupport property if the system performing the installation supports Isolated Components.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.RemoteAdminTS">
            <summary>The installer sets the RemoteAdminTS property when the system is a remote administration server using Terminal Services.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.ServicePackLevel">
            <summary>The version number of the operating system service pack.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.ServicePackLevelMinor">
            <summary>The minor version number of the operating system service pack.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.SharedWindows">
            <summary>Set when the system is operating as Shared Windows.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.ShellAdvtSupport">
            <summary>Set if the shell supports feature advertising.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.SystemLanguageID">
            <summary>Default language identifier for the system.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.TerminalServer">
            <summary>Set when the system is a server with Windows Terminal Server.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.TTCSupport">
            <summary>Indicates if the operating system supports using .TTC (true type font collections) files.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.Version9X">
            <summary>Version number for the Windows operating system.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.VersionDatabase">
            <summary>Numeric database version of the current installation.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.VersionNT">
            <summary>Version number for the Windows NT/Windows 2000 operating system.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.VersionNT64">
            <summary>Version number for the Windows NT/Windows 2000 operating system if the system is running on a 64-bit computer.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.WindowsBuild">
            <summary>Build number of the operating system.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.ARPHELPLINK">
            <summary>Internet address, or URL, for technical support.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.ARPHELPTELEPHONE">
            <summary>Technical support phone numbers.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.DiskPrompt">
            <summary>String displayed by a message box prompting for a disk.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.HelpLink">
            <summary>HelpLink</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.HelpTelephone">
            <summary>HelpTelephone</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.InstallDate">
            <summary>InstallDate</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.InstallLocation">
            <summary>InstallLocation</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.InstallSource">
            <summary>InstallSource</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.InstalledProductName">
            <summary>InstalledProductName</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.InstanceType">
            <summary>InstanceType</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.IsAdminPackage">
            <summary>Set to 1 if the current installation is running from a package created through an administrative installation.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.Language">
            <summary>Language</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.LocalPackage">
            <summary>LocalPackage</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.LeftUnit">
            <summary>Places units to the left of the number.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.Manufacturer">
            <summary>Name of the application's manufacturer. (Required.)</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.MediaSourceDir">
            <summary>The installer sets this property to 1 when the installation uses a media source, such as a CD-ROM.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.MSIINSTANCEGUID">
            <summary>The presence of this property indicates that a product code changing transform is registered to the product.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.MSINEWINSTANCE">
            <summary>This property indicates the installation of a new instance of a product with instance transforms.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.PIDTemplate">
            <summary>String used as a template for the PIDKEY property.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.ProductCode">
            <summary>A unique identifier for the particular product release. (Required.)</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.ProductIcon">
            <summary>ProductIcon</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.ProductName">
            <summary>Human-readable name of the application. (Required.)</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.ProductState">
            <summary>Set to the installed state of a product.  (-1 unknown, 1 advertised, 2 absent, 5 default)</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.ProductVersion">
            <summary>String format of the product version as a numeric value. (Required.)</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.Publisher">
            <summary>Publisher</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.UpgradeCode">
            <summary>A GUID representing a related set of products.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.URLInfoAbout">
            <summary>URLInfoAbout</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.URLUpdateInfo">
            <summary>URLUpdateInfo</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.Version">
            <summary>Version</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.VersionString">
            <summary>VersionString</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.VersionMajor">
            <summary>VersionMajor</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.VersionMinor">
            <summary>VersionMinor</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.PATCHNEWPACKAGECODE">
            <summary>The value of this property is written to the Revision Number Summary Property.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.PATCHNEWSUMMARYCOMMENTS">
            <summary>The value of this property is written to the Comments Summary Property.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.PATCHNEWSUMMARYSUBJECT">
            <summary>The value of this property is written to the Subject Summary Property.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.AdminToolsFolder">
            <summary>Full path to the directory containing administrative tools for an individual user.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.AppDataFolder">
            <summary>Full path to the Application Data folder for the current user.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.CommonAppDataFolder">
            <summary>Full path to application data for all users.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.CommonFiles64Folder">
            <summary>Full path to the predefined 64-bit Common Files folder.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.CommonFilesFolder">
            <summary>Full path to the Common Files folder for the current user.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.DesktopFolder">
            <summary>Full path to the Desktop folder.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.FavoritesFolder">
            <summary>Full path to the Favorites folder.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.FontsFolder">
            <summary>Full path to the Fonts folder.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.LocalAppDataFolder">
            <summary>Full path to directory that serves as a data repository for local (nonroaming) applications.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.MyPicturesFolder">
            <summary>Full path to the My Pictures folder.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.PersonalFolder">
            <summary>Full path to the Personal folder for the current user.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.ProgramFiles64Folder">
            <summary>Full path of the predefined 64-bit Program Files folder.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.ProgramFilesFolder">
            <summary>Full path of the predefined 32-bit Program Files folder.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.ProgramMenuFolder">
            <summary>Full path to the Program Menu folder.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.SendToFolder">
            <summary>Full path to the SendTo folder for the current user.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.StartMenuFolder">
            <summary>Full path to the Start Menu folder.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.StartupFolder">
            <summary>Full path to the Startup folder.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.System16Folder">
            <summary>Full path to folder for 16-bit system DLLs.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.System64Folder">
            <summary>Full path to folder for 64-bit system DLLs.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.SystemFolder">
            <summary>Full path to folder for 32-bit system DLLs.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.TempFolder">
            <summary>Full path to the Temp folder.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.TemplateFolder">
            <summary>Full path to the Template folder for the current user.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.WindowsFolder">
            <summary>Full path to the Windows folder.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.WindowsVolume">
            <summary>The volume of the Windows folder.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.AdminProperties">
            <summary>List of properties (separated by semicolons) set during an administration installation.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.COMPANYNAME">
            <summary>Organization of user performing the installation.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.LogonUser">
            <summary>User name for the user currently logged on.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.MsiHiddenProperties">
            <summary>List of properties (separated by semicolonsthat are prevented from being written into the log.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.PIDKEY">
            <summary>Part of the Product ID entered by user.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.ProductID">
            <summary>Full Product ID after a successful validation.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.UserLanguageID">
            <summary>Default language identifier of the current user.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.USERNAME">
            <summary>User performing the installation.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.UserSID">
            <summary>Set by the installer to the user's security identifier (SID).</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.AssignmentType">
            <summary>AssignmentType</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallerProperty.PackageCode">
            <summary>PackageCode</summary>
        </member>
        <member name="T:WindowsInstaller.MsiAdvertismentOptions">
            <summary>Bit-flags of extra advertisment options.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiAdvertismentOptions.None">
            <summary>No options.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiAdvertismentOptions.Instance">
            <summary>Multiple instances through product code changing transform support flag.  (Windows Server 2003 family and later and Windows XP Service Pack 1 and later.)</summary>
        </member>
        <member name="T:WindowsInstaller.MsiAssemblyInfo">
            <summary>Enumeration of MSI assembly types.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiAssemblyInfo.NetAssembly">
            <summary>.Net assemblies</summary>
        </member>
        <member name="F:WindowsInstaller.MsiAssemblyInfo.Win32Assembly">
            <summary>Win32 assemblies</summary>
        </member>
        <member name="T:WindowsInstaller.MsiDbPersistMode">
            <summary>Enumeration of database persistence modes.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiDbPersistMode.ReadOnly">
            <summary>database open read-only, no persistent changes</summary>
        </member>
        <member name="F:WindowsInstaller.MsiDbPersistMode.Transact">
            <summary>database read/write in transaction mode</summary>
        </member>
        <member name="F:WindowsInstaller.MsiDbPersistMode.Direct">
            <summary>database direct read/write without transaction</summary>
        </member>
        <member name="F:WindowsInstaller.MsiDbPersistMode.Create">
            <summary>create new database, transact mode read/write</summary>
        </member>
        <member name="F:WindowsInstaller.MsiDbPersistMode.CreateDirect">
            <summary>create new database, direct mode read/write</summary>
        </member>
        <member name="F:WindowsInstaller.MsiDbPersistMode.PatchFile">
            <summary>database open read-only, no persistent changes</summary>
        </member>
        <member name="T:WindowsInstaller.MsiColInfoType">
            <summary>Enumeration of view column types to return from <see cref="M:WindowsInstaller.MsiInterop.MsiViewGetColumnInfo(System.Int32,WindowsInstaller.MsiColInfoType,System.Int32@)"/>.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiColInfoType.Names">
            <summary>Column names are returned.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiColInfoType.Types">
            <summary>Definitions are returned.</summary>
        </member>
        <member name="T:WindowsInstaller.MsiCondition">
            <summary>Enumeration of MSI conditions.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiCondition.False">
            <summary>expression evaluates to False</summary>
        </member>
        <member name="F:WindowsInstaller.MsiCondition.True">
            <summary>expression evaluates to True</summary>
        </member>
        <member name="F:WindowsInstaller.MsiCondition.None">
            <summary>no expression present</summary>
        </member>
        <member name="F:WindowsInstaller.MsiCondition.Error">
            <summary>syntax error in expression</summary>
        </member>
        <member name="T:WindowsInstaller.MsiControlAttribute">
            <summary>Bitflags for MSI control attributes.</summary>
            <remarks>Please refer to the MSDN Windows Installer documentation for more information.</remarks>
        </member>
        <member name="F:WindowsInstaller.MsiControlAttribute.Visible">
            <summary>If the Visible Control bit is set, the control is visible on the dialog box. If this bit is not set, the control is hidden on the dialog box. The visible or hidden state of the Visible control attribute can be later changed by a Control Event.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiControlAttribute.Enabled">
            <summary>This attribute specifies if the given control is enabled or disabled. Most controls appear gray when disabled.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiControlAttribute.Sunken">
            <summary>If this bit is set, the control is displayed with a sunken, three dimensional look. The effect of this style bit is different on different controls and versions of Windows. On some controls it has no visible effect. If the system does not support the Sunken control attribute, the control is displayed in the default visual style. If this bit is not set, the control is displayed with the default visual style.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiControlAttribute.Indirect">
            <summary>The Indirect control attribute specifies whether the value displayed or changed by this control is referenced indirectly. If this bit is set, the control displays or changes the value of the property that has the identifier listed in the Property column of the Control table. If this bit is not set, the control displays or changes the value of the property in the Property column of the Control table.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiControlAttribute.Integer">
            <summary>If this bit is set on a control, the associated property specified in the Property column of the Control table is an integer. If this bit is not set, the property is a string value.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiControlAttribute.RTLRO">
            <summary>If this style bit is set the text in the control is displayed in a right-to-left reading order.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiControlAttribute.RightAligned">
            <summary>If this style bit is set, text in the control is aligned to the right.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiControlAttribute.LeftScroll">
            <summary>If this bit is set, the scroll bar is located on the left side of the control. If this bit is not set, the scroll bar is on the right side of the control.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiControlAttribute.BiDi">
            <summary>This is a combination of the right-to-left reading order <see cref="F:WindowsInstaller.MsiControlAttribute.RTLRO"/>, the <see cref="F:WindowsInstaller.MsiControlAttribute.RightAligned"/>, and <see cref="F:WindowsInstaller.MsiControlAttribute.LeftScroll"/> attributes.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiControlAttribute.Transparent">
            <summary>If the Transparent Control bit is set on a text control, the control is displayed transparently with the background showing through the control where there are no characters. If this bit is not set the text control is opaque.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiControlAttribute.NoPrefix">
            <summary>If this bit is set on a text control, the occurrence of the ampersand character in a text string is displayed as itself. If this bit is not set, then the character following the ampersand in the text string is displayed as an underscored character.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiControlAttribute.NoWrap">
            <summary>If this bit is set the text in the control is displayed on a single line. If the text extends beyond the control's margins it is truncated and an ellipsis ("...") is inserted at the end to indicate the truncation. If this bit is not set, text wraps.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiControlAttribute.FormatSize">
            <summary>If this bit is set for a static text control, the control will automatically attempt to format the displayed text as a number representing a count of bytes. For proper formatting, the control's text must be set to a string representing a number expressed in units of 512 bytes. The displayed value will then be formatted in terms of kilobytes (KB), megabytes (MB), or gigabytes (GB), and displayed with the appropriate string representing the units.  Kb = Less than 20480.  Mb = Less than 20971520.  Gb = Less than 10737418240</summary>
        </member>
        <member name="F:WindowsInstaller.MsiControlAttribute.UsersLanguage">
            <summary>If this bit flag is set, fonts are created using the user's default UI code page. If the bit flag is not set, fonts are created using the database code page.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiControlAttribute.MultiLine">
            <summary>If this bit is set on an Edit control, the installer creates a multiple line edit control with a vertical scroll bar.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiControlAttribute.PasswordInput">
            <summary>PasswordInput</summary>
        </member>
        <member name="F:WindowsInstaller.MsiControlAttribute.Progress95">
            <summary>If this bit is set on a ProgressBar control, the bar is drawn as a series of small rectangles in Microsoft Windows 95-style. If this bit is not set, the progress indicator bar is drawn as a single continuous rectangle.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiControlAttribute.RemovableVolume">
            <summary>If this bit is set, the control shows all the volumes involved in the current installation plus all the removable volumes. If this bit is not set, the control lists volumes in the current installation.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiControlAttribute.FixedVolume">
            <summary>If the FixedVolume Control bit is set, the control shows all the volumes involved in the current installation plus all the fixed internal hard drives. If this bit is not set, the control lists the volumes in the current installation.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiControlAttribute.RemoteVolume">
            <summary>If this bit is set, the control shows all the volumes involved in the current installation plus all the remote volumes. If this bit is not set, the control lists volumes in the current installation.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiControlAttribute.CDRomVolume">
            <summary>If the CDROMVolume Control bit is set, the control shows all the volumes in the current installation plus all the CD-ROM volumes. If this bit is not set, the control shows all the volumes in the current installation.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiControlAttribute.RAMDiskVolume">
            <summary>If this bit is set, the control shows all the volumes involved in the current installation plus all the RAM disk volumes. If this bit is not set the control lists volumes in the current installation.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiControlAttribute.FloppyVolume">
            <summary>If the FloppyVolume Control bit is set, the control shows all the volumes involved in the current installation plus all the floppy volumes. If this bit is not set, the control lists volumes in the current installation. </summary>
        </member>
        <member name="F:WindowsInstaller.MsiControlAttribute.ShowRollbackCost">
            <summary>ShowRollbackCost</summary>
        </member>
        <member name="F:WindowsInstaller.MsiControlAttribute.Sorted">
            <summary>If this bit is set, the items listed in the control are displayed in a specified order. If the bit is not set, items are displayed in alphabetical order.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiControlAttribute.ComboList">
            <summary>If the ComboList Control bit is set on a combo box, the edit field is replaced by a static text field. This prevents a user from entering a new value and requires the user to choose only one of the predefined values. If this bit is not set, the combo box has an edit field.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiControlAttribute.ImageHandle">
            <summary>ImageHandle</summary>
        </member>
        <member name="F:WindowsInstaller.MsiControlAttribute.PushLike">
            <summary>If this bit is set on a check box or a radio button group, the button is drawn with the appearance of a push button, but its logic stays the same. If the bit is not set, the controls are drawn in their usual style.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiControlAttribute.Bitmap">
            <summary>If the Bitmap Control bit is set, the text in the control is replaced by a bitmap image. The Text column in the Control table is a foreign key into the Binary table. If this bit is not set, the text in the control is specified in the Text column of the Control table.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiControlAttribute.Icon">
            <summary>If this bit is set, text is replaced by an icon image and the Text column in the Control table is a foreign key into the Binary table. If this bit is not set, text in the control is specified in the Text column of the Control table.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiControlAttribute.FixedSize">
            <summary>If the FixedSize Control bit is set, the picture is cropped or centered in the control without changing its shape or size. If this bit is not set the picture is stretched to fit the control.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiControlAttribute.IconSize16">
            <summary>The first 16x16 image is loaded.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiControlAttribute.IconSize32">
            <summary>The first 32x32 image is loaded.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiControlAttribute.IconSize48">
            <summary>The first 48x48 image is loaded.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiControlAttribute.HasBorder">
            <summary>If this bit is set, the RadioButtonGroup has text and a border displayed around it. If the style bit is not set, the border is not displayed and no text is displayed on the group.</summary>
        </member>
        <member name="T:WindowsInstaller.MsiCostTree">
            <summary>Enumeration of MSI feature cost tree options.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiCostTree.SelfOnly">
            <summary>The feature only is included in the cost.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiCostTree.Children">
            <summary>The children of the indicated feature are included in the cost.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiCostTree.Parents">
            <summary>The parent features of the indicated feature are included in the cost.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiCostTree.Reserved">
            <summary>Reserved for future use.</summary>
        </member>
        <member name="T:WindowsInstaller.MsiCustomActionType">
            <summary>Enumeration of custom action types.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiCustomActionType.Dll">
            <summary>Target = entry point name</summary>
        </member>
        <member name="F:WindowsInstaller.MsiCustomActionType.Exe">
            <summary>Target = command line args</summary>
        </member>
        <member name="F:WindowsInstaller.MsiCustomActionType.TextData">
            <summary>Target = text string to be formatted and set into property</summary>
        </member>
        <member name="F:WindowsInstaller.MsiCustomActionType.JScript">
            <summary>Target = entry point name, null if none to call</summary>
        </member>
        <member name="F:WindowsInstaller.MsiCustomActionType.VBScript">
            <summary>Target = entry point name, null if none to call</summary>
        </member>
        <member name="F:WindowsInstaller.MsiCustomActionType.Install">
            <summary>Target = property list for nested engine initialization</summary>
        </member>
        <member name="F:WindowsInstaller.MsiCustomActionType.BinaryData">
            <summary>Source = Binary.Name, data stored in stream</summary>
        </member>
        <member name="F:WindowsInstaller.MsiCustomActionType.SourceFile">
            <summary>Source = File.File, file part of installation</summary>
        </member>
        <member name="F:WindowsInstaller.MsiCustomActionType.Directory">
            <summary>Source = Directory.Directory, folder containing existing file</summary>
        </member>
        <member name="F:WindowsInstaller.MsiCustomActionType.Property">
            <summary>Source = Property.Property, full path to executable</summary>
        </member>
        <member name="F:WindowsInstaller.MsiCustomActionType.Continue">
            <summary>ignore action return status, continue running</summary>
        </member>
        <member name="F:WindowsInstaller.MsiCustomActionType.Async">
            <summary>run asynchronously</summary>
        </member>
        <member name="F:WindowsInstaller.MsiCustomActionType.FirstSequence">
            <summary>skip if UI sequence already run</summary>
        </member>
        <member name="F:WindowsInstaller.MsiCustomActionType.OncePerProcess">
            <summary>skip if UI sequence already run in same process</summary>
        </member>
        <member name="F:WindowsInstaller.MsiCustomActionType.ClientRepeat">
            <summary>run on client only if UI already run on client</summary>
        </member>
        <member name="F:WindowsInstaller.MsiCustomActionType.InScript">
            <summary>queue for execution within script</summary>
        </member>
        <member name="F:WindowsInstaller.MsiCustomActionType.Rollback">
            <summary>in conjunction with InScript: queue in Rollback script</summary>
        </member>
        <member name="F:WindowsInstaller.MsiCustomActionType.Commit">
            <summary>in conjunction with InScript: run Commit ops from script on success</summary>
        </member>
        <member name="F:WindowsInstaller.MsiCustomActionType.NoImpersonate">
            <summary>no impersonation, run in system context</summary>
        </member>
        <member name="F:WindowsInstaller.MsiCustomActionType.TSAware">
            <summary>impersonate for per-machine installs on TS machines</summary>
        </member>
        <member name="F:WindowsInstaller.MsiCustomActionType.Type64BitScript">
            <summary>script should run in 64bit process</summary>
        </member>
        <member name="F:WindowsInstaller.MsiCustomActionType.HideTarget">
            <summary>don't record the contents of the Target field in the log file.</summary>
        </member>
        <member name="T:WindowsInstaller.MsiDbError">
            <summary>Enumeration of MSI database errors.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiDbError.InvalidArg">
            <summary>invalid argument</summary>
        </member>
        <member name="F:WindowsInstaller.MsiDbError.MoreData">
            <summary>buffer too small</summary>
        </member>
        <member name="F:WindowsInstaller.MsiDbError.FunctionError">
            <summary>function error</summary>
        </member>
        <member name="F:WindowsInstaller.MsiDbError.NoError">
            <summary>no error</summary>
        </member>
        <member name="F:WindowsInstaller.MsiDbError.DuplicateKey">
            <summary>new record duplicates primary keys of existing record in table</summary>
        </member>
        <member name="F:WindowsInstaller.MsiDbError.Required">
            <summary>non-nullable column, no null values allowed</summary>
        </member>
        <member name="F:WindowsInstaller.MsiDbError.BadLink">
            <summary>corresponding record in foreign table not found</summary>
        </member>
        <member name="F:WindowsInstaller.MsiDbError.Overflow">
            <summary>data greater than maximum value allowed</summary>
        </member>
        <member name="F:WindowsInstaller.MsiDbError.Underflow">
            <summary>data less than minimum value allowed</summary>
        </member>
        <member name="F:WindowsInstaller.MsiDbError.NotInSet">
            <summary>data not a member of the values permitted in the set</summary>
        </member>
        <member name="F:WindowsInstaller.MsiDbError.BadVersion">
            <summary>invalid version string</summary>
        </member>
        <member name="F:WindowsInstaller.MsiDbError.BadCase">
            <summary>invalid case, must be all upper-case or all lower-case</summary>
        </member>
        <member name="F:WindowsInstaller.MsiDbError.BadGUID">
            <summary>invalid GUID</summary>
        </member>
        <member name="F:WindowsInstaller.MsiDbError.BadWildcard">
            <summary>invalid wildcardfilename or use of wildcards</summary>
        </member>
        <member name="F:WindowsInstaller.MsiDbError.BadIdentifier">
            <summary>bad identifier</summary>
        </member>
        <member name="F:WindowsInstaller.MsiDbError.BadLanguage">
            <summary>bad language Id(s)</summary>
        </member>
        <member name="F:WindowsInstaller.MsiDbError.BadFilename">
            <summary>bad filename</summary>
        </member>
        <member name="F:WindowsInstaller.MsiDbError.BadPath">
            <summary>bad path</summary>
        </member>
        <member name="F:WindowsInstaller.MsiDbError.BadCondition">
            <summary>bad conditional statement</summary>
        </member>
        <member name="F:WindowsInstaller.MsiDbError.BadFormatted">
            <summary>bad format string</summary>
        </member>
        <member name="F:WindowsInstaller.MsiDbError.BadTemplate">
            <summary>bad template string</summary>
        </member>
        <member name="F:WindowsInstaller.MsiDbError.BadDefaultDir">
            <summary>bad string in DefaultDir column of Directory table</summary>
        </member>
        <member name="F:WindowsInstaller.MsiDbError.BadRegPath">
            <summary>bad registry path string</summary>
        </member>
        <member name="F:WindowsInstaller.MsiDbError.BadCustomSource">
            <summary>bad string in CustomSource column of CustomAction table</summary>
        </member>
        <member name="F:WindowsInstaller.MsiDbError.BadProperty">
            <summary>bad property string</summary>
        </member>
        <member name="F:WindowsInstaller.MsiDbError.MissingData">
            <summary>_Validation table missing reference to column</summary>
        </member>
        <member name="F:WindowsInstaller.MsiDbError.BadCategory">
            <summary>Category column of _Validation table for column is invalid</summary>
        </member>
        <member name="F:WindowsInstaller.MsiDbError.BadKeyTable">
            <summary>table in KeyTable column of _Validation table could not be found/loaded</summary>
        </member>
        <member name="F:WindowsInstaller.MsiDbError.BadMaxMinValues">
            <summary>value in MaxValue column of _Validation table is less than value in MinValue column</summary>
        </member>
        <member name="F:WindowsInstaller.MsiDbError.BadCabinet">
            <summary>bad cabinet name</summary>
        </member>
        <member name="F:WindowsInstaller.MsiDbError.BadShortcut">
            <summary>bad shortcut target</summary>
        </member>
        <member name="F:WindowsInstaller.MsiDbError.StringOverflow">
            <summary>string overflow (greater than length allowed in column def)</summary>
        </member>
        <member name="F:WindowsInstaller.MsiDbError.BadLocalizedAttrib">
            <summary>invalid localization attribute (primary keys cannot be localized)</summary>
        </member>
        <member name="T:WindowsInstaller.MsiDbState">
            <summary>Enumeration of MSI database states.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiDbState.Error">
            <summary>invalid database handle</summary>
        </member>
        <member name="F:WindowsInstaller.MsiDbState.Read">
            <summary>database open read-only, no persistent changes</summary>
        </member>
        <member name="F:WindowsInstaller.MsiDbState.Write">
            <summary>database readable and updatable</summary>
        </member>
        <member name="T:WindowsInstaller.MsiDialogStyle">
            <summary>Bitflags for MSI dialogs.</summary>
            <remarks>Please refer to the MSDN Windows Installer documentation for more information.</remarks>
        </member>
        <member name="F:WindowsInstaller.MsiDialogStyle.Visible">
            <summary>If this bit is set the dialog is originally created as visible, otherwise it is hidden.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiDialogStyle.Modal">
            <summary>If this bit is set, the dialog box is modal, other dialogs of the same application cannot be put on top of it, and the dialog keeps the control while it is running. If this bit is not set, the dialog is modeless, other dialogs of the same application may be moved on top of it. After a modeless dialog is created and displayed, the user interface returns control to the installer. The installer then calls the user interface periodically to update the dialog and to give it a chance to process the messages. As soon as this is done, the control is returned to the installer.  <b>Note</b>  There should be no modeless dialogs in a wizard sequence, since this would return control to the installer, ending the wizard sequence prematurely.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiDialogStyle.Minimize">
            <summary>If this bit is set, the dialog box can be minimized. This bit is ignored for modal dialog boxes, which cannot be minimized.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiDialogStyle.SysModal">
            <summary>If this style bit is set, the dialog box will stop all other applications and no other applications can take the focus. This state remains until the SysModal dialog is dismissed.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiDialogStyle.KeepModeless">
            <summary>Normally, when this bit is not set and a dialog box is created through DoAction, all other (typically modeless) dialogs are destroyed. If this bit is set, the other dialogs stay alive when this dialog box is created.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiDialogStyle.TrackDiskSpace">
            <summary>If this bit is set, the dialog box periodically calls the installer. If the property changes, it notifies the controls on the dialog. This style can be used if there is a control on the dialog indicating disk space. If the user switches to another application, adds or removes files, or otherwise modifies available disk space, you can quickly implement the change using this style. Any dialog box relying on the OutOfDiskSpace property to determine whether to bring up a dialog must set the TrackDiskSpace Dialog Style Bit for the dialog to dynamically update space on the target volumes.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiDialogStyle.UseCustomPalette">
            <summary>If this bit is set, the pictures on the dialog box are created with the custom palette (one per dialog received from the first control created). If the bit is not set, the pictures are rendered using a default palette.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiDialogStyle.RTLRO">
            <summary>If this style bit is set the text in the dialog box is displayed in right-to-left-reading order.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiDialogStyle.RightAligned">
            <summary>If this style bit is set, the text is aligned on the right side of the dialog box.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiDialogStyle.LeftScroll">
            <summary>If this style bit is set, the scroll bar is located on the left side of the dialog box.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiDialogStyle.BiDi">
            <summary>This is a combination of the right to left reading order <see cref="F:WindowsInstaller.MsiDialogStyle.RTLRO"/>, the <see cref="F:WindowsInstaller.MsiDialogStyle.RightAligned"/>, and the <see cref="F:WindowsInstaller.MsiDialogStyle.LeftScroll"/> dialog style bits.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiDialogStyle.Error">
            <summary>If this bit is set, the dialog box is an error dialog.</summary>
        </member>
        <member name="T:WindowsInstaller.MsiError">
            <summary>Internal enumeration of Win32/MSI errors.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiError.NoError">
            <summary>No error occured.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiError.Success">
            <summary>The operation was successful.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiError.FileNotFound">
            <summary>The system cannot find the file specified.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiError.AccessDenied">
            <summary>Access is denied.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiError.InvalidHandle">
            <summary>The handle is invalid.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiError.NotEnoughMemory">
            <summary>Not enough storage is available to process this command.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiError.InvalidData">
            <summary>The data is invalid.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiError.OutOfMemory">
            <summary>Not enough storage is available to complete this operation.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiError.InvalidParameter">
            <summary>The parameter is incorrect.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiError.OpenFailed">
            <summary>The system cannot open the device or file specified.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiError.DiskFull">
            <summary>There is not enough space on the disk.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiError.CallNotImplemented">
            <summary>This function is not available for this platform. It is only available on Windows 2000 and Windows XP with Window Installer version 2.0.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiError.BadPathName">
            <summary>The specified path is invalid.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiError.NoData">
            <summary>No data is available.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiError.MoreData">
            <summary>More data is available.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiError.NoMoreItems">
            <summary>No more data is available.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiError.Directory">
            <summary>The directory name is invalid.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiError.FileInvalid">
            <summary>The volume for a file has been externally altered so that the opened file is no longer valid.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiError.AppHelpBlock">
            <summary>This error code only occurs when using Windows Installer version 2.0 and Windows XP. If Windows Installer determines a product may be incompatible with the current operating system, it displays a dialog box informing the user and asking whether to try to install anyway. This error code is returned if the user chooses not to try the installation.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiError.InstallServiceFailure">
            <summary>The Windows Installer service could not be accessed.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiError.InstallUserExit">
            <summary>The user cancels installation.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiError.InstallFailure">
            <summary>A fatal error occurred during installation.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiError.InstallSuspend">
            <summary>Installation suspended, incomplete.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiError.UnknownProduct">
            <summary>This action is only valid for products that are currently installed.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiError.UnknownFeature">
            <summary>The feature identifier is not registered.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiError.UnknownComponent">
            <summary>The component identifier is not registered.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiError.UnknownProperty">
            <summary>This is an unknown property.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiError.InvalidHandleState">
            <summary>The handle is in an invalid state.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiError.BadConfiguration">
            <summary>The configuration data for this product is corrupt.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiError.IndexAbsent">
            <summary>The component qualifier not present.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiError.InstallSourceAbsent">
            <summary>The installation source for this product is not available. Verify that the source exists and that you can access it.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiError.InstallPackageVersion">
            <summary>This installation package cannot be installed by the Windows Installer service. You must install a Windows service pack that contains a newer version of the Windows Installer service.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiError.ProductUninstalled">
            <summary>The product is uninstalled.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiError.BadQuerySyntax">
            <summary>The SQL query syntax is invalid or unsupported.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiError.InvalidField">
            <summary>The record field does not exist.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiError.InstallAlreadyRunning">
            <summary>Another installation is already in progress.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiError.InstallPackageOpenFailed">
            <summary>This installation package could not be opened. Verify that the package exists and is accessible, or contact the application vendor to verify that this is a valid Windows Installer package.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiError.InstallPackageInvalid">
            <summary>This installation package could not be opened. Contact the application vendor to verify that this is a valid Windows Installer package.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiError.InstallUIFailure">
            <summary>There was an error starting the Windows Installer service user interface. </summary>
        </member>
        <member name="F:WindowsInstaller.MsiError.InstallLogFailure">
            <summary>There was an error opening installation log file. Verify that the specified log file location exists and is writable.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiError.InstallLanguageUnsupported">
            <summary>This language of this installation package is not supported by your system.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiError.InstallTransformFailure">
            <summary>There was an error applying transforms. Verify that the specified transform paths are valid.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiError.InstallPackageRejected">
            <summary>This installation is forbidden by system policy.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiError.FunctionNotCalled">
            <summary>The function could not be executed.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiError.FunctionFailed">
            <summary>The function failed during execution.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiError.InvalidTable">
            <summary>An invalid or unknown table was specified.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiError.DatatypeMismatch">
            <summary>The data supplied is the wrong type.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiError.UnsupportedType">
            <summary>Data of this type is not supported.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiError.CreateFailed">
            <summary>The Windows Installer service failed to start.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiError.InstallTempUnwritable">
            <summary>The Temp folder is either full or inaccessible. Verify that the Temp folder exists and that you can write to it.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiError.InstallPlatformUnsupported">
            <summary>This installation package is not supported on this platform.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiError.InstallNotUsed">
            <summary>Component is not used on this machine.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiError.PatchPackageOpenFailed">
            <summary>This patch package could not be opened.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiError.PatchPackageInvalid">
            <summary>This patch package could not be opened</summary>
        </member>
        <member name="F:WindowsInstaller.MsiError.PatchPackageUnsupported">
            <summary>This patch package cannot be processed by the Windows Installer service.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiError.ProductVersion">
            <summary>Another version of this product is already installed. Installation of this version cannot continue. To configure or remove the existing version of this product, use Add/Remove Programs in Control Panel.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiError.InvalidCommandLine">
            <summary>Invalid command line argument. Consult the Windows Installer SDK for detailed command-line help.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiError.InstallRemoteDisallowed">
            <summary>Installation from a Terminal Server client session is not permitted for the current user.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiError.SuccessRebootInitiated">
            <summary>The installer has initiated a restart. This error code is not available on Windows Installer version 1.0.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiError.PatchTargetNotFound">
            <summary>The installer cannot install the upgrade patch because the program being upgraded may be missing or the upgrade patch updates a different version of the program. Verify that the program to be upgraded exists on your computer and that you have the correct upgrade patch. This error code is not available on Windows Installer version 1.0.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiError.InstallTransformRejected">
            <summary>The patch package is not permitted by system policy. This error code is available with Windows Installer versions 2.0.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiError.InstallRemoteProhibited">
            <summary>One or more customizations are not permitted by system policy. This error code is available with Windows Installer versions 2.0.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiError.InvalidDataType">
            <summary>The specified datatype is invalid.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiError.BadUserName">
            <summary>The specified username is invalid.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiError.SucessRebootRequired">
            <summary>A restart is required to complete the install. This does not include installs where the ForceReboot action is run. This error code is not available on Windows Installer version 1.0.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiError.E_Fail">
            <summary>Unspecified error.</summary>
        </member>
        <member name="T:WindowsInstaller.MsiInstallFeatureAttribute">
            <summary>Bit flags install feature attributes enumeration.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallFeatureAttribute.FavorLocal">
            <summary>FavorLocal</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallFeatureAttribute.FavorSource">
            <summary>FavorSource</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallFeatureAttribute.FollowParent">
            <summary>FollowParent</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallFeatureAttribute.FavorAdvertise">
            <summary>FavorAdvertise</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallFeatureAttribute.DisallowAdvertise">
            <summary>DisallowAdvertise</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallFeatureAttribute.NounSupportedAdvertise">
            <summary>NounSupportedAdvertise</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallFeatureAttribute.All">
            <summary>All attributes.</summary>
        </member>
        <member name="T:WindowsInstaller.MsiFeatureInstallState">
            <summary>
            Bit-flags defining an MSI feature's install state.
            </summary>
        </member>
        <member name="F:WindowsInstaller.MsiFeatureInstallState.Advertised">
            <summary>The feature can be advertised.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiFeatureInstallState.Absent">
            <summary>The feature can be absent.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiFeatureInstallState.Local">
            <summary>The feature can be installed on the local drive.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiFeatureInstallState.Source">
            <summary>The feature can be configured to run from source, CD-ROM, or network.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiFeatureInstallState.Default">
            <summary>The feature can be configured to use the default location: local or source.</summary>
        </member>
        <member name="T:WindowsInstaller.MsiInstallLevel">
            <summary>Enumeration of MSI install levels.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallLevel.Default">
            <summary>install authored default</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallLevel.Minimum">
            <summary>install only required features</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallLevel.Maximum">
            <summary>install all features</summary>
        </member>
        <member name="T:WindowsInstaller.MsiInstallLogMode">
            <summary>Bit flags for use with <see cref="M:WindowsInstaller.MsiInterop.MsiEnableLog(WindowsInstaller.MsiInstallLogMode,System.String,WindowsInstaller.MsiLogAttribute)"/> and <see cref="M:WindowsInstaller.MsiInterop.MsiSetExternalUI(WindowsInstaller.MsiInstallUIHandler,WindowsInstaller.MsiInstallLogMode,System.Int32)"/>.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallLogMode.None">
            <summary>None.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallLogMode.FatalExit">
            <summary>Logs out of memory or fatal exit information.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallLogMode.Error">
            <summary>Logs the error messages.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallLogMode.Warning">
            <summary>Logs the warning messages.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallLogMode.User">
            <summary>Logs the user requests.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallLogMode.Info">
            <summary>Logs the status messages that are not displayed.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallLogMode.ResolveSource">
            <summary>Request to determine a valid source location.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallLogMode.OutOfDiskSpace">
            <summary>Indicates insufficient disk space.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallLogMode.ActionStart">
            <summary>Logs the start of new installation actions.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallLogMode.ActionData">
            <summary>Logs the data record with the installation action.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallLogMode.CommonData">
            <summary>Logs the parameters for user-interface initialization.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallLogMode.PropertyDump">
            <summary>Logs the property values at termination.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallLogMode.Verbose">
            <summary>Sends large amounts of information to a log file not generally useful to users. May be used for technical support.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallLogMode.ExtraDebug">
            <summary>Sends extra debugging information, such as handle creation information, to the log file. <b>Windows XP/2000/98/95:  This feature is not supported.</b></summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallLogMode.Progress">
            <summary>external handler only</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallLogMode.Initialize">
            <summary>external handler only</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallLogMode.Terminate">
            <summary>external handler only</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallLogMode.ShowDialog">
            <summary>external handler only</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallLogMode.ExternalUI">
            <summary>All modes.</summary>
        </member>
        <member name="T:WindowsInstaller.MsiInstallMessage">
            <summary>
            <para>Install message type for callback is a combination of the following:</para>
            <para>A message box style:  MB_*, where MB_OK is the default</para>
            <para>A message box icon type:  MB_ICON*, where no icon is the default</para>
            <para>A default button:  MB_DEFBUTTON?, where MB_DEFBUTTON1 is the default</para>
            <para>One of these flags an install message, no default.</para>
            </summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallMessage.FatalExit">
            <summary>premature termination, possibly fatal OOM</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallMessage.Error">
            <summary>formatted error message</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallMessage.Warning">
            <summary>formatted warning message</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallMessage.User">
            <summary>user request message</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallMessage.Info">
            <summary>informative message for log</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallMessage.FilesInUse">
            <summary>list of files in use that need to be replaced</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallMessage.ResolveSource">
            <summary>request to determine a valid source location</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallMessage.OutOfDiskSpace">
            <summary>insufficient disk space message</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallMessage.ActionStart">
            <summary>start of action: action name and description</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallMessage.ActionData">
            <summary>formatted data associated with individual action item</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallMessage.Progress">
            <summary>progress gauge info: units so far, total</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallMessage.CommonData">
            <summary>product info for dialog: language Id, dialog caption</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallMessage.Initialize">
            <summary>sent prior to UI initialization, no string data</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallMessage.Terminate">
            <summary>sent after UI termination, no string data</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallMessage.ShowDialog">
            <summary>sent prior to display or authored dialog or wizard</summary>
        </member>
        <member name="T:WindowsInstaller.MsiInstallMode">
            <summary>Enumeration of installation modes.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallMode.NoSourceResolution">
            <summary>skip source resolution</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallMode.NoDetection">
            <summary>skip detection</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallMode.Existing">
            <summary>provide, if available</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallMode.Default">
            <summary>install, if absent</summary>
        </member>
        <member name="T:WindowsInstaller.MsiInstallState">
            <summary>Enumeration of MSI install states.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallState.NotUsed">
            <summary>component disabled</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallState.BadConfig">
            <summary>configuration data corrupt</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallState.Incomplete">
            <summary>installation suspended or in progress</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallState.SourceAbsent">
            <summary>run from source, source is unavailable</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallState.MoreData">
            <summary>return buffer overflow</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallState.InvalidArg">
            <summary>invalid function argument</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallState.Unknown">
            <summary>unrecognized product or feature</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallState.Broken">
            <summary>broken</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallState.Advertised">
            <summary>advertised feature</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallState.Removed">
            <summary>component being removed (action state, not settable)</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallState.Absent">
            <summary>uninstalled (or action state absent but clients remain)</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallState.Local">
            <summary>installed on local drive</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallState.Source">
            <summary>run from source, CD or net</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallState.Default">
            <summary>use default, local or source</summary>
        </member>
        <member name="T:WindowsInstaller.MsiInstallType">
            <summary>Enumeration of various MSI install types.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallType.Default">
            <summary>set to indicate default behavior</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallType.NetworkImage">
            <summary>set to indicate network install</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallType.SingleInstance">
            <summary>set to indicate a particular instance</summary>
        </member>
        <member name="T:WindowsInstaller.MsiInstallUILevel">
            <summary>Enumeration of internal MSI install UI levels.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallUILevel.NoChange">
            <summary>UI level is unchanged</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallUILevel.Default">
            <summary>default UI is used</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallUILevel.None">
            <summary>completely silent installation</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallUILevel.Basic">
            <summary>simple progress and error handling</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallUILevel.Reduced">
            <summary>authored UI, wizard dialogs suppressed</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallUILevel.Full">
            <summary>authored UI with wizards, progress, errors</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallUILevel.EndDialog">
            <summary>display success/failure dialog at end of install</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallUILevel.ProgressOnly">
            <summary>display only progress dialog</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallUILevel.HideCancel">
            <summary>do not display the cancel button in basic UI</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInstallUILevel.SourceResOnly">
            <summary>force display of source resolution even if quiet</summary>
        </member>
        <member name="T:WindowsInstaller.MsiLogAttribute">
            <summary>Flag attributes for <see cref="M:WindowsInstaller.MsiInterop.MsiEnableLog(WindowsInstaller.MsiInstallLogMode,System.String,WindowsInstaller.MsiLogAttribute)"/>.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiLogAttribute.Append">
            <summary>If this value is set, the installer appends the existing log.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiLogAttribute.FlushEachLine">
            <summary>Forces the log buffer to be flushed after each line.</summary>
        </member>
        <member name="T:WindowsInstaller.MsiModify">
            <summary>Enumeration of modification modes for <see cref="M:WindowsInstaller.MsiInterop.MsiViewModify(System.Int32,WindowsInstaller.MsiModify,System.Int32)"/>.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiModify.Seek">
            <summary>reposition to current record primary key</summary>
        </member>
        <member name="F:WindowsInstaller.MsiModify.Refresh">
            <summary>refetch current record data</summary>
        </member>
        <member name="F:WindowsInstaller.MsiModify.Insert">
            <summary>insert new record, fails if matching key exists</summary>
        </member>
        <member name="F:WindowsInstaller.MsiModify.Update">
            <summary>update existing non-key data of fetched record</summary>
        </member>
        <member name="F:WindowsInstaller.MsiModify.Assign">
            <summary>insert record, replacing any existing record</summary>
        </member>
        <member name="F:WindowsInstaller.MsiModify.Replace">
            <summary>update record, delete old if primary key edit</summary>
        </member>
        <member name="F:WindowsInstaller.MsiModify.Merge">
            <summary>fails if record with duplicate key not identical</summary>
        </member>
        <member name="F:WindowsInstaller.MsiModify.Delete">
            <summary>remove row referenced by this record from table</summary>
        </member>
        <member name="F:WindowsInstaller.MsiModify.InsertTemporary">
            <summary>insert a temporary record</summary>
        </member>
        <member name="F:WindowsInstaller.MsiModify.Validate">
            <summary>validate a fetched record</summary>
        </member>
        <member name="F:WindowsInstaller.MsiModify.ValidateNew">
            <summary>validate a new record</summary>
        </member>
        <member name="F:WindowsInstaller.MsiModify.ValidateField">
            <summary>validate field(s) of an incomplete record</summary>
        </member>
        <member name="F:WindowsInstaller.MsiModify.ValidateDelete">
            <summary>validate before deleting record</summary>
        </member>
        <member name="T:WindowsInstaller.MsiOpenPackageFlags">
            <summary>
            Possible flags for the <c>options</c> parameter of <see cref="M:WindowsInstaller.MsiInterop.MsiOpenPackageEx(System.String,WindowsInstaller.MsiOpenPackageFlags,System.Int32@)"/>.
            </summary>
        </member>
        <member name="F:WindowsInstaller.MsiOpenPackageFlags.None">
            <summary>No options.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiOpenPackageFlags.IgnoreMachineState">
            <summary>Ignore the computer state when creating the product handle.</summary>
        </member>
        <member name="T:WindowsInstaller.MsiReinstallMode">
            <summary>Bit-flags for reinstallation.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiReinstallMode.Repair">
            <summary>Reserved bit - currently ignored</summary>
        </member>
        <member name="F:WindowsInstaller.MsiReinstallMode.FileMissing">
            <summary>Reinstall only if file is missing</summary>
        </member>
        <member name="F:WindowsInstaller.MsiReinstallMode.FileOlderVersion">
            <summary>Reinstall if file is missing, or older version</summary>
        </member>
        <member name="F:WindowsInstaller.MsiReinstallMode.FileEqualVersion">
            <summary>Reinstall if file is missing, or equal or older version</summary>
        </member>
        <member name="F:WindowsInstaller.MsiReinstallMode.FileExact">
            <summary>Reinstall if file is missing, or not exact version</summary>
        </member>
        <member name="F:WindowsInstaller.MsiReinstallMode.FileVerify">
            <summary>checksum executables, reinstall if missing or corrupt</summary>
        </member>
        <member name="F:WindowsInstaller.MsiReinstallMode.FileReplace">
            <summary>Reinstall all files, regardless of version</summary>
        </member>
        <member name="F:WindowsInstaller.MsiReinstallMode.MachineData">
            <summary>insure required machine reg entries</summary>
        </member>
        <member name="F:WindowsInstaller.MsiReinstallMode.UserData">
            <summary>insure required user reg entries</summary>
        </member>
        <member name="F:WindowsInstaller.MsiReinstallMode.Shortcut">
            <summary>validate shortcuts items</summary>
        </member>
        <member name="F:WindowsInstaller.MsiReinstallMode.Package">
            <summary>use re-cache source install package</summary>
        </member>
        <member name="T:WindowsInstaller.MsiRunMode">
            <summary>Enumeration of MSI run modes.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiRunMode.Admin">
            <summary>admin mode install, else product install</summary>
        </member>
        <member name="F:WindowsInstaller.MsiRunMode.Advertise">
            <summary>installing advertisements, else installing or updating product</summary>
        </member>
        <member name="F:WindowsInstaller.MsiRunMode.Maintenance">
            <summary>modifying an existing installation, else new installation</summary>
        </member>
        <member name="F:WindowsInstaller.MsiRunMode.RollbackEnabled">
            <summary>rollback is enabled</summary>
        </member>
        <member name="F:WindowsInstaller.MsiRunMode.LogEnabled">
            <summary>log file active, enabled prior to install session</summary>
        </member>
        <member name="F:WindowsInstaller.MsiRunMode.Operations">
            <summary>spooling execute operations, else in determination phase</summary>
        </member>
        <member name="F:WindowsInstaller.MsiRunMode.RebootAtEnd">
            <summary>reboot needed after successful installation (settable)</summary>
        </member>
        <member name="F:WindowsInstaller.MsiRunMode.RebootNow">
            <summary>reboot needed to continue installation (settable)</summary>
        </member>
        <member name="F:WindowsInstaller.MsiRunMode.Cabinet">
            <summary>installing files from cabinets and files using Media table</summary>
        </member>
        <member name="F:WindowsInstaller.MsiRunMode.SourceShortNames">
            <summary>source LongFileNames suppressed via PID_MSISOURCE summary property</summary>
        </member>
        <member name="F:WindowsInstaller.MsiRunMode.TargetShortNames">
            <summary>target LongFileNames suppressed via SHORTFILENAMES property</summary>
        </member>
        <member name="F:WindowsInstaller.MsiRunMode.Reserved11">
            <summary>future use</summary>
        </member>
        <member name="F:WindowsInstaller.MsiRunMode.Windows9x">
            <summary>operating systems is Windows9?, else Windows NT</summary>
        </member>
        <member name="F:WindowsInstaller.MsiRunMode.ZawEnabled">
            <summary>operating system supports demand installation</summary>
        </member>
        <member name="F:WindowsInstaller.MsiRunMode.Reserved14">
            <summary>future use</summary>
        </member>
        <member name="F:WindowsInstaller.MsiRunMode.Reserved15">
            <summary>future use</summary>
        </member>
        <member name="F:WindowsInstaller.MsiRunMode.Scheduled">
            <summary>custom action call from install script execution</summary>
        </member>
        <member name="F:WindowsInstaller.MsiRunMode.Rollback">
            <summary>custom action call from rollback execution script</summary>
        </member>
        <member name="F:WindowsInstaller.MsiRunMode.Commit">
            <summary>custom action call from commit execution script</summary>
        </member>
        <member name="T:WindowsInstaller.MsiTransformError">
            <summary>Bit-flag error conditions that should be suppressed when the transform is applied.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiTransformError.None">
            <summary>None of the following conditions.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiTransformError.AddExistingRow">
            <summary>Adding a row that already exists.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiTransformError.DelMissingRow">
            <summary>Deleting a row that doesn't exist.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiTransformError.AddExistingTable">
            <summary>Adding a table that already exists.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiTransformError.DelMissingTable">
            <summary>Deleting a table that doesn't exist.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiTransformError.UpdateMissingRow">
            <summary>Updating a row that doesn't exist.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiTransformError.ChangeCodePage">
            <summary>Transform and database code pages do not match and neither code page is neutral.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiTransformError.ViewTransform">
            <summary>Create the temporary _TransformView table.</summary>
        </member>
        <member name="T:WindowsInstaller.MsiUserInfoState">
            <summary>Enumeration of MSI user states.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiUserInfoState.MoreData">
            <summary>return buffer overflow</summary>
        </member>
        <member name="F:WindowsInstaller.MsiUserInfoState.InvalidArg">
            <summary>invalid function argument</summary>
        </member>
        <member name="F:WindowsInstaller.MsiUserInfoState.Unknown">
            <summary>unrecognized product</summary>
        </member>
        <member name="F:WindowsInstaller.MsiUserInfoState.Absent">
            <summary>user info and PID not initialized</summary>
        </member>
        <member name="F:WindowsInstaller.MsiUserInfoState.Present">
            <summary>user info and PID initialized</summary>
        </member>
        <member name="T:WindowsInstaller.MsiValidationFlag">
            <summary>Bit-flags for MSI validation.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiValidationFlag.None">
            <summary>Validate no properties.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiValidationFlag.Language">
            <summary>Default language must match base database.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiValidationFlag.Product">
            <summary>Product must match base database.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiValidationFlag.MajorVersion">
            <summary>Check major version only.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiValidationFlag.MinorVersion">
            <summary>Check major and minor versions only.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiValidationFlag.UpdateVersion">
            <summary>Check major, minor, and update versions.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiValidationFlag.NewLessBaseVersion">
            <summary>Installed version &lt; base version.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiValidationFlag.NewLessEqualBaseVersion">
            <summary>Installed version &lt;= base version.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiValidationFlag.NewEqualBaseVersion">
            <summary>Installed version = base version.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiValidationFlag.NewGreaterEqualBaseVersion">
            <summary>Installed version &gt;= base version.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiValidationFlag.NewGreaterBaseVersion">
            <summary>Installed version &gt; base version.</summary>
        </member>
        <member name="F:WindowsInstaller.MsiValidationFlag.UpgradeCode">
            <summary>UpgradeCode must match base database.</summary>
        </member>
        <member name="T:WindowsInstaller.PlatformArchitecture">
            <summary>Bit-flags of platform architectures.</summary>
        </member>
        <member name="F:WindowsInstaller.PlatformArchitecture.Current">
            <summary>The current platform.</summary>
        </member>
        <member name="F:WindowsInstaller.PlatformArchitecture.X86">
            <summary>The x86 platform.</summary>
        </member>
        <member name="F:WindowsInstaller.PlatformArchitecture.IA64">
            <summary>The ia64 platform.</summary>
        </member>
        <member name="T:WindowsInstaller.SummaryInformationStreamProperty">
            <summary>Enumeration of MSI summary stream information property ids.</summary>
        </member>
        <member name="F:WindowsInstaller.SummaryInformationStreamProperty.Codepage">
            <summary>Codepage</summary>
        </member>
        <member name="F:WindowsInstaller.SummaryInformationStreamProperty.Title">
            <summary>Title</summary>
        </member>
        <member name="F:WindowsInstaller.SummaryInformationStreamProperty.Subject">
            <summary>Subject</summary>
        </member>
        <member name="F:WindowsInstaller.SummaryInformationStreamProperty.Author">
            <summary>Author</summary>
        </member>
        <member name="F:WindowsInstaller.SummaryInformationStreamProperty.Keywords">
            <summary>Keywords</summary>
        </member>
        <member name="F:WindowsInstaller.SummaryInformationStreamProperty.Comments">
            <summary>Comments</summary>
        </member>
        <member name="F:WindowsInstaller.SummaryInformationStreamProperty.Template">
            <summary>Template</summary>
        </member>
        <member name="F:WindowsInstaller.SummaryInformationStreamProperty.LastSavedBy">
            <summary>LastSavedBy</summary>
        </member>
        <member name="F:WindowsInstaller.SummaryInformationStreamProperty.RevisionNumber">
            <summary>RevisionNumber</summary>
        </member>
        <member name="F:WindowsInstaller.SummaryInformationStreamProperty.LastPrinted">
            <summary>LastPrinted</summary>
        </member>
        <member name="F:WindowsInstaller.SummaryInformationStreamProperty.CreateTime">
            <summary>CreateTime</summary>
        </member>
        <member name="F:WindowsInstaller.SummaryInformationStreamProperty.LastSaveTime">
            <summary>LastSaveTime</summary>
        </member>
        <member name="F:WindowsInstaller.SummaryInformationStreamProperty.PageCount">
            <summary>PageCount</summary>
        </member>
        <member name="F:WindowsInstaller.SummaryInformationStreamProperty.WordCount">
            <summary>WordCount</summary>
        </member>
        <member name="F:WindowsInstaller.SummaryInformationStreamProperty.CharacterCount">
            <summary>CharacterCount</summary>
        </member>
        <member name="F:WindowsInstaller.SummaryInformationStreamProperty.CreatingApplication">
            <summary>CreatingApplication</summary>
        </member>
        <member name="F:WindowsInstaller.SummaryInformationStreamProperty.Security">
            <summary>Security</summary>
        </member>
        <member name="T:WindowsInstaller.VariantType">
            <summary>
            Enumeration of variant types.
            </summary>
        </member>
        <member name="T:WindowsInstaller.FILETIME">
            <summary>The <c>FILETIME</c> structure is a 64-bit value representing the number of 100-nanosecond intervals since January 1, 1601 (UTC).</summary>
        </member>
        <member name="F:WindowsInstaller.FILETIME.LowDateTime">
            <summary>Low-order part of the file time.</summary>
        </member>
        <member name="F:WindowsInstaller.FILETIME.HighDateTime">
            <summary>High-order part of the file time.</summary>
        </member>
        <member name="T:WindowsInstaller.MsiInstallUIHandler">
            <summary>The <c>INSTALLUI_HANDLER</c> delegate defines a callback function that the installer calls for progress notification and error messages.</summary>
            <remarks>
            The <c>messageType</c> parameter specifies a combination of one message box style, one message box icon type, one default button, and one installation message type.
            </remarks>
        </member>
        <member name="T:WindowsInstaller.MsiInterop">
            <summary>
            Internal class supporting direct MSI API.
            This class cannot be inherited.
            This class cannot be instantiated directly.
            </summary>
            <remarks>
            <para>Supports the Windows Installer API 2.0.</para>
            <para><b>Note</b>:  The following are omitted from this version:
            Hashing and digital signature functions.</para>
            <para>Please refer to the MSDN documention on the Windows Installer
            for more information about the Windows Installer API.</para>
            </remarks>
        </member>
        <member name="F:WindowsInstaller.MsiInterop.MaxFeatureChars">
            <summary>Maximum chars in feature name (same as string GUID)</summary>
        </member>
        <member name="F:WindowsInstaller.MsiInterop.MessageTypeMask">
            <summary>
            Type mask to extract the <see cref="T:WindowsInstaller.MsiInstallMessage"/> in
            <see cref="T:WindowsInstaller.MsiInstallUIHandler"/>s.
            </summary>
        </member>
        <member name="F:WindowsInstaller.MsiInterop.MsiNullInteger">
            <summary>Represents a "null" integer.</summary>
        </member>
        <member name="M:WindowsInstaller.MsiInterop.MsiAdvertiseProduct(System.String,System.String,System.String,System.UInt16)">
            <summary>The <c>MsiAdvertiseProduct</c> function generates an advertise script or advertises a product to the computer. The <c>MsiAdvertiseProduct</c> function enables the installer to write to a script the registry and shortcut information used to assign or publish a product. The script can be written to be consistent with a specified platform by using <see cref="M:WindowsInstaller.MsiInterop.MsiAdvertiseProductEx(System.String,System.String,System.String,System.UInt16,WindowsInstaller.PlatformArchitecture,WindowsInstaller.MsiAdvertismentOptions)"/>.</summary>
            <param name="path">The full path to the package of the product being advertised.</param>
            <param name="script">The full path to script file that will be created with the advertise information. To advertise the product locally to the computer, set <see cref="F:WindowsInstaller.MsiAdvertiseProductFlag.MachineAssign"/> or <see cref="F:WindowsInstaller.MsiAdvertiseProductFlag.UserAssign"/>.</param>
            <param name="transforms">A semicolon-delimited list of transforms to be applied. The list of transforms can be prefixed with the @ or | character to specify the secure caching of transforms. The @ prefix specifies secure-at-source transforms and the | prefix indicates secure full path transforms.  This parameter may be <c>null</c>.</param>
            <param name="langId">The installation language to use if the source supports multiple languages.</param>
            <returns>
            <para><see cref="F:WindowsInstaller.MsiError.Success"/>  The function succeeded.</para>
            <para><see cref="F:WindowsInstaller.MsiError.CallNotImplemented"/>  This error is returned if an attempt is made to generate an advertise script on any platform other than Windows 2000 or Windows XP. Advertisement to the local computer is supported on all platforms.</para>
            <para>An error relating to an action, see <see cref="T:WindowsInstaller.MsiError"/>.</para>
            </returns>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="M:WindowsInstaller.MsiInterop.MsiAdvertiseProductEx(System.String,System.String,System.String,System.UInt16,WindowsInstaller.PlatformArchitecture,WindowsInstaller.MsiAdvertismentOptions)">
            <summary>The <c>MsiAdvertiseProductEx</c> function generates an advertise script or advertises a product to the computer. The <c>MsiAdvertiseProductEx</c> function enables the installer to write to a script the registry and shortcut information used to assign or publish a product. Provides the same functionality as <see cref="M:WindowsInstaller.MsiInterop.MsiAdvertiseProduct(System.String,System.String,System.String,System.UInt16)"/>. The script can be written to be consistent with a specified platform by using <c>MsiAdvertiseProductEx</c>.</summary>
            <param name="path">The full path to the package of the product being advertised.</param>
            <param name="script">The full path to script file that will be created with the advertise information. To advertise the product locally to the computer, set <see cref="F:WindowsInstaller.MsiAdvertiseProductFlag.MachineAssign"/> or <see cref="F:WindowsInstaller.MsiAdvertiseProductFlag.UserAssign"/>.</param>
            <param name="transforms">A semicolon-delimited list of transforms to be applied. The list of transforms can be prefixed with the @ or | character to specify the secure caching of transforms. The @ prefix specifies secure-at-source transforms and the | prefix indicates secure full path transforms.  This parameter may be <c>null</c>.</param>
            <param name="langId">The installation language to use if the source supports multiple languages.</param>
            <param name="platform">Bit flags that control for which platform the installer should create the script. This parameter is ignored if <c>script</c> is <c>null</c>. If <c>platform</c> is <see cref="F:WindowsInstaller.PlatformArchitecture.Current"/>, then the script is created based on the current platform. This is the same functionality as <see cref="M:WindowsInstaller.MsiInterop.MsiAdvertiseProduct(System.String,System.String,System.String,System.UInt16)"/>. If <c>platform</c> is <see cref="F:WindowsInstaller.PlatformArchitecture.X86"/> or <see cref="F:WindowsInstaller.PlatformArchitecture.IA64"/>, the installer creates script for the specified platform.</param>
            <param name="options">Bit flags that specify extra advertisement options. Nonzero value is only available in Windows Installer versions shipped with Windows Server 2003 family and later and Windows XP Service Pack 1 and later.</param>
            <returns>
            <para><see cref="F:WindowsInstaller.MsiError.Success"/>  The function succeeded.</para>
            <para><see cref="F:WindowsInstaller.MsiError.CallNotImplemented"/>  This error is returned if an attempt is made to generate an advertise script on any platform other than Windows 2000 or Windows XP. Advertisement to the local computer is supported on all platforms.</para>
            <para>An error relating to an action, see <see cref="T:WindowsInstaller.MsiError"/>.</para>
            </returns>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="M:WindowsInstaller.MsiInterop.MsiApplyPatch(System.String,System.String,WindowsInstaller.MsiInstallType,System.String)">
            <summary>For each product listed by the patch package as eligible to receive the patch, the MsiApplyPatch function invokes an installation and sets the PATCH property to the path of the patch package.</summary>
            <param name="patchPackage">A null-terminated string specifying the full path to the patch package. </param>
            <param name="installPackage">
            <para>If <c>installtype</c> is set to <see cref="F:WindowsInstaller.MsiInstallType.NetworkImage"/>, this parameter is a null-terminated string that specifies a path to the product that is to be patched. The installer applies the patch to every eligible product listed in the patch package if <c>installPackage</c> is set to <c>null</c> and <c>installType</c> is set to <see cref="F:WindowsInstaller.MsiInstallType.Default"/>.</para>
            <para>If <c>installtype</c> is <see cref="F:WindowsInstaller.MsiInstallType.SingleInstance"/>, the installer applies the patch to the product specified by <c>installPackage</c>. In this case, other eligible products listed in the patch package are ignored and the <c>installPackage</c> parameter contains the null-terminated string representing the product code of the instance to patch. This type of installation requires the installer running Windows .NET Server 2003 family or Windows XP SP1.</para>
            </param>
            <param name="installType">
            <para>This parameter specifies the type of installation to patch.</para>
            <para><see cref="F:WindowsInstaller.MsiInstallType.NetworkImage"/>  Specifies an administrative installation. In this case, <c>installPackage</c> must be set to a package path. A value of 1 for <see cref="F:WindowsInstaller.MsiInstallType.NetworkImage"/> sets this for an administrative installation.</para>
            <para><see cref="F:WindowsInstaller.MsiInstallType.Default"/>  Searches system for products to patch. In this case, szInstallPackage must be <c>null</c>.</para>
            <para><see cref="F:WindowsInstaller.MsiInstallType.SingleInstance"/>  Patch the product specified by szInstallPackage. <c>installPackage</c> is the product code of the instance to patch. This type of installation requires the installer running Windows .NET Server 2003 family or Windows XP SP1.</para>
            </param>
            <param name="commandLine">A null-terminated string that specifies command line property settings.</param>
            <returns>
            <para><see cref="F:WindowsInstaller.MsiError.Success"/>  The function succeeded.</para>
            <para><see cref="F:WindowsInstaller.MsiError.PatchPackageOpenFailed"/>  Patch package could not be opened.</para>
            <para><see cref="F:WindowsInstaller.MsiError.PatchPackageInvalid"/>  The patch package is invalid.</para>
            <para><see cref="F:WindowsInstaller.MsiError.PatchPackageUnsupported"/>  The patch package is not unsupported.</para>
            <para>An error relating to an action, see <see cref="T:WindowsInstaller.MsiError"/>.</para>
            </returns>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="M:WindowsInstaller.MsiInterop.MsiCloseAllHandles">
            <summary>The <c>MsiCloseAllHandles</c> function closes all open installation handles allocated by the current thread. This is a diagnostic function and should not be used for cleanup.</summary>
            <returns>This function returns 0 if all handles are closed. Otherwise, the function returns the number of handles open prior to its call.</returns>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="M:WindowsInstaller.MsiInterop.MsiCloseHandle(System.Int32)">
            <summary>The <c>MsiCloseHandle</c> function closes an open installation handle.</summary>
            <param name="handle">Specifies any open installation handle.</param>
            <returns>
            <para><see cref="F:WindowsInstaller.MsiError.Success"/>  The function succeeded.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InvalidHandle"/>  An invalid handle was passed to the function.</para>
            </returns>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="M:WindowsInstaller.MsiInterop.MsiCollectUserInfo(System.String)">
            <summary>The <c>MsiCollectUserInfo</c> function obtains and stores the user information and product ID from an installation wizard.</summary>
            <param name="product">Specifies the product code of the product for which the user information is collected.</param>
            <returns>
            <para><see cref="F:WindowsInstaller.MsiError.Success"/>  The function succeeded.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InvalidParameter"/>  One of the parameters was invalid.</para>
            <para>An error relating to an action, see <see cref="T:WindowsInstaller.MsiError"/>.</para>
            </returns>
        </member>
        <member name="M:WindowsInstaller.MsiInterop.MsiConfigureFeature(System.String,System.String,WindowsInstaller.MsiInstallState)">
            <summary>The <c>MsiConfigureFeature</c> function configures the installed state for a product feature.</summary>
            <param name="product">Specifies the product code for the product to be configured.</param>
            <param name="feature">Specifies the feature ID for the feature to be configured.</param>
            <param name="installState">Specifies the installation state (<see cref="T:WindowsInstaller.MsiInstallState"/>) for the feature.</param>
            <returns>
            <para><see cref="F:WindowsInstaller.MsiError.Success"/>  The function succeeded.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InvalidParameter"/>  One of the parameters was invalid.</para>
            <para>An error relating to an action, see <see cref="T:WindowsInstaller.MsiError"/>.</para>
            </returns>
        </member>
        <member name="M:WindowsInstaller.MsiInterop.MsiConfigureProduct(System.String,WindowsInstaller.MsiInstallLevel,WindowsInstaller.MsiInstallState)">
            <summary>The <c>MsiConfigureProduct</c> function installs or uninstalls a product.</summary>
            <param name="product">Specifies the product code for the product to be configured.</param>
            <param name="level">Specifies how much of the product should be installed when installing the product to its default state. The <c>level</c> parameter will be ignored, and all features will be installed, if the <c>installState</c> parameter is set to any other value than <see cref="F:WindowsInstaller.MsiInstallState.Default"/>.</param>
            <param name="installState">Specifies the installation state for the product.</param>
            <returns>
            <para><see cref="F:WindowsInstaller.MsiError.Success"/>  The function succeeded.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InvalidParameter"/>  One of the parameters was invalid.</para>
            <para>An error relating to an action, see <see cref="T:WindowsInstaller.MsiError"/>.</para>
            </returns>
        </member>
        <member name="M:WindowsInstaller.MsiInterop.MsiConfigureProductEx(System.String,WindowsInstaller.MsiInstallLevel,WindowsInstaller.MsiInstallState,System.String)">
            <summary>The <c>MsiConfigureProductEx</c> function installs or uninstalls a product. A product command line may also be specified.</summary>
            <param name="product">Specifies the product code for the product to be configured.</param>
            <param name="level">Specifies how much of the product should be installed when installing the product to its default state. The <c>level</c> parameter will be ignored, and all features will be installed, if the <c>installState</c> parameter is set to any other value than <see cref="F:WindowsInstaller.MsiInstallState.Default"/>.</param>
            <param name="installState">Specifies the installation state for the product.</param>
            <param name="commandLine">Specifies the command line property settings. This should be a list of the format <i>Property=Setting Property=Setting</i>.</param>
            <returns>
            <para><see cref="F:WindowsInstaller.MsiError.Success"/>  The function succeeded.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InvalidParameter"/>  One of the parameters was invalid.</para>
            <para>An error relating to an action, see <see cref="T:WindowsInstaller.MsiError"/>.</para>
            </returns>
        </member>
        <member name="M:WindowsInstaller.MsiInterop.MsiEnableLog(WindowsInstaller.MsiInstallLogMode,System.String,WindowsInstaller.MsiLogAttribute)">
            <summary>The <c>MsiEnableLog</c> function sets the log mode for all subsequent installations that are initiated in the calling process.</summary>
            <param name="logMode">Specifies the log mode.  Can be a combination of <see cref="T:WindowsInstaller.MsiInstallLogMode"/> flags.</param>
            <param name="logFile">Specifies the string that holds the full path to the log file. Entering a <c>null</c> disables logging, in which case <c>logMode</c> is ignored. If a path is supplied, then <c>logMode</c> must not be zero</param>
            <param name="logAttributes">Specifies how frequently the log buffer is to be flushed.</param>
            <returns>
            <para><see cref="F:WindowsInstaller.MsiError.Success"/>  The function succeeded.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InvalidParameter"/>  One of the parameters was invalid.</para>
            </returns>
        </member>
        <member name="M:WindowsInstaller.MsiInterop.MsiEnumClients(System.String,System.UInt32,System.String)">
            <summary>The <c>MsiEnumClients</c> function enumerates the clients for a given installed component. The function retrieves one product code each time it is called.</summary>
            <param name="component">Specifies the component whose clients are to be enumerated.</param>
            <param name="index">Specifies the index of the client to retrieve. This parameter should be zero for the first call to the <c>MsiEnumClients</c> function and then incremented for subsequent calls. Because clients are not ordered, any new client has an arbitrary index. This means that the function can return clients in any order.</param>
            <param name="product">Pointer to a buffer that receives the product code. This buffer must be 39 characters long. The first 38 characters are for the GUID, and the last character is for the terminating null character.</param>
            <returns>
            <para><see cref="F:WindowsInstaller.MsiError.Success"/>  The function succeeded.</para>
            <para><see cref="F:WindowsInstaller.MsiError.BadConfiguration"/>  The configuration data is corrupt.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InvalidParameter"/>  One of the parameters was invalid.</para>
            <para><see cref="F:WindowsInstaller.MsiError.NoMoreItems"/>  There are no clients to return.</para>
            <para><see cref="F:WindowsInstaller.MsiError.NotEnoughMemory"/>  The system does not have enough memory to complete the operation. Available with Windows Server 2003 family.</para>
            <para><see cref="F:WindowsInstaller.MsiError.UnknownComponent"/>  The specified component is unknown.</para>
            </returns>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="M:WindowsInstaller.MsiInterop.MsiEnumComponentQualifiers(System.String,System.UInt32,System.Text.StringBuilder,System.UInt32@,System.Text.StringBuilder,System.Int32@)">
            <summary>The <c>MsiEnumComponentQualifiers</c> function enumerates the advertised qualifiers for the given component. This function retrieves one qualifier each time it is called.</summary>
            <param name="component">Specifies component whose qualifiers are to be enumerated.</param>
            <param name="index">Specifies the index of the qualifier to retrieve. This parameter should be zero for the first call to the <c>MsiEnumComponentQualifiers</c> function and then incremented for subsequent calls. Because qualifiers are not ordered, any new qualifier has an arbitrary index. This means that the function can return qualifiers in any order.</param>
            <param name="qualifier">Pointer to a buffer that receives the qualifier code.</param>
            <param name="qualifierSize">Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <c>qualifier</c> parameter. On input, this size should include the terminating <c>null</c> character. On return, the value does not include the <c>null</c> character.</param>
            <param name="appData">Pointer to a buffer that receives the application registered data for the qualifier. This parameter can be <c>null</c>.</param>
            <param name="appDataSize">Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <c>appData</c> parameter. On input, this size should include the terminating <c>null</c> character. On return, the value does not include the <c>null</c> character. This parameter can be <c>null</c> only if the <c>appData</c> parameter is <c>null</c>.</param>
            <returns>
            <para><see cref="F:WindowsInstaller.MsiError.Success"/>  The function succeeded.</para>
            <para><see cref="F:WindowsInstaller.MsiError.BadConfiguration"/>  The configuration data is corrupt.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InvalidParameter"/>  One of the parameters was invalid.</para>
            <para><see cref="F:WindowsInstaller.MsiError.MoreData"/>  A buffer is to small to hold the requested data.</para>
            <para><see cref="F:WindowsInstaller.MsiError.NoMoreItems"/>  There are no clients to return.</para>
            <para><see cref="F:WindowsInstaller.MsiError.NotEnoughMemory"/>  The system does not have enough memory to complete the operation. Available with Windows Server 2003 family.</para>
            <para><see cref="F:WindowsInstaller.MsiError.UnknownComponent"/>  The specified component is unknown.</para>
            </returns>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="M:WindowsInstaller.MsiInterop.MsiEnumComponents(System.UInt32,System.String)">
            <summary>The <c>MsiEnumComponents</c> function enumerates the installed components for all products. This function retrieves one component code each time it is called.</summary>
            <param name="index">Specifies the index of the component to retrieve. This parameter should be zero for the first call to the <c>MsiEnumComponents</c> function and then incremented for subsequent calls. Because components are not ordered, any new component has an arbitrary index. This means that the function can return components in any order.</param>
            <param name="component">Pointer to a buffer that receives the component code. This buffer must be 39 characters long. The first 38 characters are for the GUID, and the last character is for the terminating <c>null</c> character.</param>
            <returns>
            <para><see cref="F:WindowsInstaller.MsiError.Success"/>  The function succeeded.</para>
            <para><see cref="F:WindowsInstaller.MsiError.BadConfiguration"/>  The configuration data is corrupt.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InvalidParameter"/>  One of the parameters was invalid.</para>
            <para><see cref="F:WindowsInstaller.MsiError.NoMoreItems"/>  There are no clients to return.</para>
            <para><see cref="F:WindowsInstaller.MsiError.NotEnoughMemory"/>  The system does not have enough memory to complete the operation. Available with Windows Server 2003 family.</para>
            </returns>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="M:WindowsInstaller.MsiInterop.MsiEnumFeatures(System.String,System.UInt32,System.String,System.String)">
            <summary>The <c>MsiEnumFeatures</c> function enumerates the published features for a given product. This function retrieves one feature ID each time it is called.</summary>
            <param name="product">Null-terminated string specifying the product code of the product whose features are to be enumerated.</param>
            <param name="index">Specifies the index of the feature to retrieve. This parameter should be zero for the first call to the <c>MsiEnumFeatures</c> function and then incremented for subsequent calls. Because features are not ordered, any new feature has an arbitrary index. This means that the function can return features in any order.</param>
            <param name="feature">Pointer to a buffer that receives the feature ID. This parameter must be sized to hold a string of length <c><see cref="F:WindowsInstaller.MsiInterop.MaxFeatureChars"/> + 1</c>.</param>
            <param name="featureParent">Pointer to a buffer that receives the feature ID of the parent of the feature. This parameter must be sized to hold a string of length <c><see cref="F:WindowsInstaller.MsiInterop.MaxFeatureChars"/> + 1</c>. </param>
            <returns>
            <para><see cref="F:WindowsInstaller.MsiError.Success"/>  The function succeeded.</para>
            <para><see cref="F:WindowsInstaller.MsiError.BadConfiguration"/>  The configuration data is corrupt.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InvalidParameter"/>  One of the parameters was invalid.</para>
            <para><see cref="F:WindowsInstaller.MsiError.NoMoreItems"/>  There are no clients to return.</para>
            <para><see cref="F:WindowsInstaller.MsiError.UnknownProduct"/>  The specified product is unknown.</para>
            </returns>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="M:WindowsInstaller.MsiInterop.MsiEnumPatches(System.String,System.UInt32,System.String,System.Text.StringBuilder,System.UInt32@)">
            <summary>The <c>MsiEnumPatches</c> function enumerates all of the patches that have been applied to a product. The function returns the patch code GUID for each patch that has been applied to the product and returns a list of transforms from each patch that apply to the product. Note that patches may have many transforms only some of which are applicable to a particular product. The list of transforms are returned in the same format as the value of the <c>TRANSFORMS</c> property.</summary>
            <param name="product">Specifies the product for which patches are to be enumerated.</param>
            <param name="index">Specifies the index of the patch to retrieve. This parameter should be zero for the first call to the <c>MsiEnumPatches</c> function and then incremented for subsequent calls. </param>
            <param name="patch">Pointer to a buffer that receives the patch's GUID. This argument is required.</param>
            <param name="transform">Pointer to a buffer that receives the list of transforms in the patch that are applicable to the product. This argument is required and cannot be <c>null</c>.</param>
            <param name="transformSize">Set to the number of characters copied to <c>transform</c> upon an unsuccessful return of the function. Not set for a successful return. On input, this is the full size of the buffer, including a space for a terminating <c>null</c> character. If the buffer passed in is too small, the count returned does not include the terminating <c>null</c> character.</param>
            <returns>
            <para><see cref="F:WindowsInstaller.MsiError.Success"/>  The function succeeded.</para>
            <para><see cref="F:WindowsInstaller.MsiError.BadConfiguration"/>  The configuration data is corrupt.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InvalidParameter"/>  One of the parameters was invalid.</para>
            <para><see cref="F:WindowsInstaller.MsiError.MoreData"/>  A buffer is too small to hold the requested data.</para>
            <para><see cref="F:WindowsInstaller.MsiError.NoMoreItems"/>  There are no clients to return.</para>
            </returns>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="M:WindowsInstaller.MsiInterop.MsiEnumProducts(System.UInt32,System.String)">
            <summary>The <c>MsiEnumProducts</c> function enumerates through all the products currently advertised or installed. Both per-user and per-machine installations and advertisements are enumerated.</summary>
            <param name="index">Specifies the index of the product to retrieve. This parameter should be zero for the first call to the <c>MsiEnumProducts</c> function and then incremented for subsequent calls. Because products are not ordered, any new product has an arbitrary index. This means that the function can return products in any order.</param>
            <param name="product">Pointer to a buffer that receives the product code. This buffer must be 39 characters long. The first 38 characters are for the GUID, and the last character is for the terminating null character.</param>
            <returns>
            <para><see cref="F:WindowsInstaller.MsiError.Success"/>  The function succeeded.</para>
            <para><see cref="F:WindowsInstaller.MsiError.BadConfiguration"/>  The configuration data is corrupt.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InvalidParameter"/>  One of the parameters was invalid.</para>
            <para><see cref="F:WindowsInstaller.MsiError.NoMoreItems"/>  There are no clients to return.</para>
            <para><see cref="F:WindowsInstaller.MsiError.NotEnoughMemory"/>  The system does not have enough memory to complete the operation. Available with Windows Server 2003 family.</para>
            </returns>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="M:WindowsInstaller.MsiInterop.MsiEnumRelatedProducts(System.String,System.UInt32,System.UInt32,System.String)">
            <summary>The <c>MsiEnumRelatedProducts</c> function enumerates products with a specified upgrade code. This function lists the currently installed and advertised products that have the specified UpgradeCode property in their Property table.</summary>
            <param name="upgradeCode">The null-terminated string specifying the upgrade code of related products that the installer is to enumerate.</param>
            <param name="reserved">This parameter is reserved and must be 0.</param>
            <param name="index">The zero-based index into the registered products.</param>
            <param name="product">A buffer to receive the product code GUID. This buffer must be 39 characters long. The first 38 characters are for the GUID, and the last character is for the terminating <c>null</c> character.</param>
            <returns>
            <para><see cref="F:WindowsInstaller.MsiError.Success"/>  The function succeeded.</para>
            <para><see cref="F:WindowsInstaller.MsiError.BadConfiguration"/>  The configuration data is corrupt.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InvalidParameter"/>  One of the parameters was invalid.</para>
            <para><see cref="F:WindowsInstaller.MsiError.NoMoreItems"/>  There are no clients to return.</para>
            <para><see cref="F:WindowsInstaller.MsiError.NotEnoughMemory"/>  The system does not have enough memory to complete the operation. Available with Windows Server 2003 family.</para>
            </returns>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="M:WindowsInstaller.MsiInterop.MsiGetComponentPath(System.String,System.String,System.Text.StringBuilder,System.UInt32@)">
            <summary>The <c>MsiGetComponentPath</c> function returns the full path to an installed component. If the key path for the component is a registry key then the registry key is returned.</summary>
            <param name="product">Specifies the product code for the client product.</param>
            <param name="component">Specifies the component ID of the component to be located.</param>
            <param name="path">Pointer to a variable that receives the path to the component. This parameter can be <c>null</c>. If the component is a registry key, the registry roots are represented numerically. If this is a registry subkey path, there is a backslash at the end of the Key Path. If this is a registry value key path, there is no backslash at the end. For example, a registry path of "HKEY_CURRENT_USER\SOFTWARE\Microsoft" would be returned as "01:\SOFTWARE\Microsoft\".</param>
            <param name="pathSize">
            <para>Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <c>path</c> parameter. On input, this is the full size of the buffer, including a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating <c>null</c> character.</para>
            <para>If <c>path</c> is <c>null</c>, <c>pathSize</c> can be <c>null</c>.</para>
            </param>
            <returns>The <see cref="T:WindowsInstaller.MsiInstallState"/>.</returns>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="M:WindowsInstaller.MsiInterop.MsiGetFeatureInfo(System.Int32,System.String,WindowsInstaller.MsiInstallFeatureAttribute,System.Text.StringBuilder,System.UInt32@,System.String,System.UInt32@)">
            <summary>The <c>MsiGetFeatureInfo</c> function returns descriptive information for a feature.</summary>
            <param name="productHandle">Handle to the product that owns the feature. This handle is obtained from <see cref="M:WindowsInstaller.MsiInterop.MsiOpenProduct(System.String,System.Int32@)"/>.</param>
            <param name="feature">Specifies the feature code for the feature about which information should be returned.</param>
            <param name="attributes">Specifies the attribute flags.</param>
            <param name="title">Pointer to a buffer to receive the localized descriptive name of the feature.</param>
            <param name="titleSize">As input, the size of <c>title</c>. As output, the number of characters returned in <c>title</c>. On input, this is the full size of the buffer, including a space for a terminating <c>null</c> character. If the buffer passed in is too small, the count returned does not include the terminating <c>null</c> character.</param>
            <param name="help">Pointer to a buffer to receive the localized descriptive name of the feature.</param>
            <param name="helpSize">As input, the size of <c>help</c>. As output, the number of characters returned in <c>help</c>. On input, this is the full size of the buffer, including a space for a terminating <c>null</c> character. If the buffer passed in is too small, the count returned does not include the terminating <c>null</c> character.</param>
            <returns>
            <para><see cref="F:WindowsInstaller.MsiError.Success"/>  The function succeeded.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InvalidHandle"/>  The product handle is invalid.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InvalidParameter"/>  One of the parameters was invalid.</para>
            <para><see cref="F:WindowsInstaller.MsiError.MoreData"/>  A buffer is too small to hold the requested data.</para>
            <para><see cref="F:WindowsInstaller.MsiError.UnknownFeature"/>  The feature is not known.</para>
            </returns>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="M:WindowsInstaller.MsiInterop.MsiGetFeatureUsage(System.String,System.String,System.UInt32@,System.UInt16@)">
            <summary>The <c>MsiGetFeatureUsage</c> returns the usage metrics for a product feature.</summary>
            <param name="product">Specifies the product code for the product containing the feature.</param>
            <param name="feature">Specifies the feature code for the feature for which metrics are to be returned.</param>
            <param name="useCount">Indicates the number of times the feature has been used.</param>
            <param name="dateUsed">Specifies the date that the feature was last used. The date is in the MS-DOS date format.</param>
            <returns>
            <para><see cref="F:WindowsInstaller.MsiError.Success"/>  The function succeeded.</para>
            <para><see cref="F:WindowsInstaller.MsiError.BadConfiguration"/>  The configuration data is corrupt.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InstallFailure"/>  No usage information is available or the product or feature is invalid.</para>
            </returns>
        </member>
        <member name="M:WindowsInstaller.MsiInterop.MsiGetFileVersion(System.String,System.Text.StringBuilder,System.UInt32@,System.Text.StringBuilder,System.UInt32@)">
            <summary>The <c>MsiGetFileVersion</c> returns the version string and language string in the format that the installer expects to find them in the database. If you just want version information, set <c>language</c> to <c>null</c> and <c>languageSize</c> to zero. If you just want language information, set <c>version</c> to <c>null</c> and <c>versionSize</c> to zero.</summary>
            <param name="path">Specifies the path to the file.</param>
            <param name="version">Returns the file version. Set to <c>null</c> for language information only.</param>
            <param name="versionSize">In and out buffer byte count. Set to 0 for language information only. On input, this is the full size of the buffer, including a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character.</param>
            <param name="language">Returns the file language. Set to <c>null</c> for version information only.</param>
            <param name="languageSize">In and out buffer byte count. Set to 0 for version information only. On input, this is the full size of the buffer, including a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character.</param>
            <returns>
            <para><see cref="F:WindowsInstaller.MsiError.Success"/>  The function succeeded.</para>
            <para><see cref="F:WindowsInstaller.MsiError.AccessDenied"/>  File could not be opened to get version information.</para>
            <para><see cref="F:WindowsInstaller.MsiError.E_Fail"/>  Unexpected error.</para>
            <para><see cref="F:WindowsInstaller.MsiError.FileInvalid"/>  File does not contain version information.</para>
            <para><see cref="F:WindowsInstaller.MsiError.FileNotFound"/>  File does not exist.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InvalidData"/>  The version information is invalid.</para>
            </returns>
        </member>
        <member name="M:WindowsInstaller.MsiInterop.MsiGetPatchInfo(System.String,System.String,System.Text.StringBuilder,System.UInt32@)">
            <summary>The <c>MsiGetPatchInfo</c> function returns information about a patch.</summary>
            <param name="patch">Specifies the patch code for the patch package.</param>
            <param name="attribute">Specifies the attribute to be retrieved.  (See <see cref="F:WindowsInstaller.MsiInstallerProperty.LocalPackage"/>)</param>
            <param name="value">Pointer to a buffer that receives the property value. This parameter can be <c>null</c>.</param>
            <param name="valueSize">Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <c>value</c> parameter. On input, this is the full size of the buffer, including a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character.</param>
            <returns>
            <para><see cref="F:WindowsInstaller.MsiError.Success"/>  The function succeeded.</para>
            <para><see cref="F:WindowsInstaller.MsiError.BadConfiguration"/>  The configuration data is corrupt.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InvalidParameter"/>  One of the parameters was invalid.</para>
            <para><see cref="F:WindowsInstaller.MsiError.MoreData"/>  A buffer is too small to hold the requested data.</para>
            <para><see cref="F:WindowsInstaller.MsiError.UnknownProduct"/>  The patch package is not installed.</para>
            <para><see cref="F:WindowsInstaller.MsiError.UnknownProperty"/>  The property is unrecognized.</para>
            </returns>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="M:WindowsInstaller.MsiInterop.MsiGetProductCode(System.String,System.String)">
            <summary>The <c>MsiGetProductCode</c> function returns the product code of an application by using the component code of an installed or advertised component of the application. During initialization, an application must determine under which product code it has been installed or advertised.</summary>
            <param name="component">This parameter specifies the component code of a component that has been installed by the application. This will be typically the component code of the component containing the executable file of the application.</param>
            <param name="product">Pointer to a buffer that receives the product code. This buffer must be 39 characters long. The first 38 characters are for the GUID, and the last character is for the terminating null character.</param>
            <returns>
            <para><see cref="F:WindowsInstaller.MsiError.Success"/>  The function succeeded.</para>
            <para><see cref="F:WindowsInstaller.MsiError.BadConfiguration"/>  The configuration data is corrupt.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InvalidParameter"/>  One of the parameters was invalid.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InstallFailure"/>  The product code could not be determined.</para>
            <para><see cref="F:WindowsInstaller.MsiError.UnknownComponent"/>  The specified component is unknown.</para>
            </returns>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="M:WindowsInstaller.MsiInterop.MsiGetProductInfo(System.String,System.String,System.Text.StringBuilder,System.UInt32@)">
            <summary>The <c>MsiGetProductInfo</c> function returns product information for published and installed products.</summary>
            <param name="product">Specifies the product code for the product.</param>
            <param name="property">Specifies the property to be retrieved. The properties in the following list can only be retrieved from applications that are already installed. Note that required properties are guaranteed to be available, but other properties are available only if that property has been set. See the indicated links to the installer properties for information about how each property is set.</param>
            <param name="value">Pointer to a buffer that receives the property value. This parameter can be <c>null</c>.</param>
            <param name="valueSize">Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <c>value</c> parameter. On input, this is the full size of the buffer, including a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character.</param>
            <returns>
            <para><see cref="F:WindowsInstaller.MsiError.Success"/>  The function succeeded.</para>
            <para><see cref="F:WindowsInstaller.MsiError.BadConfiguration"/>  The configuration data is corrupt.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InvalidParameter"/>  One of the parameters was invalid.</para>
            <para><see cref="F:WindowsInstaller.MsiError.MoreData"/>  A buffer is too small to hold the requested data.</para>
            <para><see cref="F:WindowsInstaller.MsiError.UnknownProduct"/>  The patch package is not installed.</para>
            <para><see cref="F:WindowsInstaller.MsiError.UnknownProperty"/>  The property is unrecognized.</para>
            </returns>
        </member>
        <member name="M:WindowsInstaller.MsiInterop.MsiGetProductInfoFromScript(System.String,System.String,System.UInt16@,System.UInt32@,System.Text.StringBuilder,System.UInt32@,System.Text.StringBuilder,System.UInt32@)">
            <summary>The <c>MsiGetProductInfoFromScript</c> function returns product information for a Windows Installer script file.</summary>
            <param name="scriptFile">A null-terminated string specifying the full path to the script file. The script file is the advertise script that was created by calling <see cref="M:WindowsInstaller.MsiInterop.MsiAdvertiseProduct(System.String,System.String,System.String,System.UInt16)"/> or <see cref="M:WindowsInstaller.MsiInterop.MsiAdvertiseProductEx(System.String,System.String,System.String,System.UInt16,WindowsInstaller.PlatformArchitecture,WindowsInstaller.MsiAdvertismentOptions)"/>.</param>
            <param name="product">Points to a buffer that receives the product code. The buffer must be 39 characters long. The first 38 characters are for the product code GUID, and the last character is for the terminating null character.</param>
            <param name="langId">Points to a variable that receives the product language.</param>
            <param name="version">Points to a buffer that receives the product version. </param>
            <param name="name">Points to a buffer that receives the product name. The buffer includes a terminating null character.</param>
            <param name="nameSize">Points to a variable that specifies the size, in characters, of the buffer pointed to by the <c>name</c> parameter. This size should include the terminating null character. When the function returns, this variable contains the length of the string stored in the buffer. The count returned does not include the terminating null character. If the buffer is not large enough, the function returns <see cref="F:WindowsInstaller.MsiError.MoreData"/>, and the variable contains the size of the string in characters, without counting the null character.</param>
            <param name="package">Points to a buffer that receives the package name. The buffer includes the terminating null character.</param>
            <param name="packageSize">Points to a variable that specifies the size, in characters, of the buffer pointed to by the <c>package</c> parameter. This size should include the terminating null character. When the function returns, this variable contains the length of the string stored in the buffer. The count returned does not include the terminating null character. If the buffer is not large enough, the function returns <see cref="F:WindowsInstaller.MsiError.MoreData"/>, and the variable contains the size of the string in characters, without counting the null character.</param>
            <returns>
            <para><see cref="F:WindowsInstaller.MsiError.Success"/>  The function succeeded.</para>
            <para><see cref="F:WindowsInstaller.MsiError.CallNotImplemented"/>  This function is only available on Windows 2000 and Windows XP.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InvalidParameter"/>  One of the parameters was invalid.</para>
            <para><see cref="F:WindowsInstaller.MsiError.MoreData"/>  A buffer is too small to hold the requested data.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InstallFailure"/>  Could not get script information.</para>
            </returns>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="M:WindowsInstaller.MsiInterop.MsiGetProductProperty(System.Int32,System.String,System.Text.StringBuilder,System.UInt32@)">
            <summary>The <c>MsiGetProductProperty</c> function retrieves product properties. These properties are in the product database.</summary>
            <param name="productHandle">Handle to the product obtained from <see cref="M:WindowsInstaller.MsiInterop.MsiOpenProduct(System.String,System.Int32@)"/>.</param>
            <param name="property">Specifies the property to retrieve. This is case-sensitive.</param>
            <param name="value">Pointer to a buffer that receives the property value. This parameter can be <c>null</c>.</param>
            <param name="valueSize">Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <c>value</c> parameter. On input, this is the full size of the buffer, including a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character.</param>
            <returns>
            <para><see cref="F:WindowsInstaller.MsiError.Success"/>  The function succeeded.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InvalidHandle"/>  The product handle is invalid.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InvalidParameter"/>  One of the parameters was invalid.</para>
            <para><see cref="F:WindowsInstaller.MsiError.MoreData"/>  A buffer is too small to hold the requested data.</para>
            </returns>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="M:WindowsInstaller.MsiInterop.MsiGetShortcutTarget(System.String,System.String,System.String,System.String)">
            <summary>The <c>MsiGetShortcutTarget</c> function examines a shortcut and returns its product, feature name, and component if available.</summary>
            <param name="target">A null-terminated string specifying the full path to a shortcut.</param>
            <param name="product">A GUID for the product code of the shortcut. This string buffer must be 39 characters long. The first 38 characters are for the GUID, and the last character is for the terminating null character. This parameter can be null.</param>
            <param name="feature">The feature name of the shortcut. The string buffer must be <c><see cref="F:WindowsInstaller.MsiInterop.MaxFeatureChars"/> + 1</c> characters long. This parameter can be null.</param>
            <param name="component">A GUID of the component code. This string buffer must be 39 characters long. The first 38 characters are for the GUID, and the last character is for the terminating null character. This parameter can be null.</param>
            <returns>
            <para><see cref="F:WindowsInstaller.MsiError.Success"/>  The function succeeded.</para>
            <para><see cref="F:WindowsInstaller.MsiError.FunctionFailed"/>  The function failed.</para>
            </returns>
        </member>
        <member name="M:WindowsInstaller.MsiInterop.MsiGetUserInfo(System.String,System.Text.StringBuilder,System.UInt32@,System.Text.StringBuilder,System.UInt32@,System.Text.StringBuilder,System.UInt32@)">
            <summary>The <c>MsiGetUserInfo</c> function returns the registered user information for an installed product.</summary>
            <param name="product">Specifies the product code for the product to be queried.</param>
            <param name="user">Pointer to a variable that receives the name of the user.</param>
            <param name="userSize">Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <c>user</c> parameter. This size should include the terminating null character.</param>
            <param name="org">Pointer to a buffer that receives the organization name.</param>
            <param name="orgSize">Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <c>org</c> parameter. On input, this is the full size of the buffer, including a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character.</param>
            <param name="serial">Pointer to a buffer that receives the product ID.</param>
            <param name="serialSize">Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <c>serial</c> parameter. On input, this is the full size of the buffer, including a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character.</param>
            <returns>The <see cref="T:WindowsInstaller.MsiUserInfoState"/> result.</returns>
        </member>
        <member name="M:WindowsInstaller.MsiInterop.MsiInstallMissingComponent(System.String,System.String,WindowsInstaller.MsiInstallState)">
            <summary>The <c>MsiInstallMissingComponent</c> function installs files that are unexpectedly missing.</summary>
            <param name="product">Specifies the product code for the product that owns the component to be installed.</param>
            <param name="component">Identifies the component to be installed.</param>
            <param name="state">Specifies the way the component should be installed. </param>
            <returns>
            <para><see cref="F:WindowsInstaller.MsiError.Success"/>  The function succeeded.</para>
            <para><see cref="F:WindowsInstaller.MsiError.BadConfiguration"/>  The configuration data is corrupt.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InstallFailure"/>  The installation failed.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InstallSourceAbsent"/>  The source was unavailable.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InstallSuspend"/>  The installation was suspended.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InstallUserExit"/>  The user exited the installation.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InvalidParameter"/>  One of the parameters was invalid.</para>
            <para><see cref="F:WindowsInstaller.MsiError.UnknownProduct"/>  The product code is unrecognized.</para>
            </returns>
        </member>
        <member name="M:WindowsInstaller.MsiInterop.MsiInstallMissingFile(System.String,System.String)">
            <summary>The <c>MsiInstallMissingFile</c> function installs files that are unexpectedly missing.</summary>
            <param name="product">Specifies the product code for the product that owns the file to be installed.</param>
            <param name="file">Specifies the file to be installed.</param>
            <returns>
            <para><see cref="F:WindowsInstaller.MsiError.Success"/>  The function succeeded.</para>
            <para><see cref="F:WindowsInstaller.MsiError.BadConfiguration"/>  The configuration data is corrupt.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InstallFailure"/>  The installation failed.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InstallSourceAbsent"/>  The source was unavailable.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InstallSuspend"/>  The installation was suspended.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InstallUserExit"/>  The user exited the installation.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InvalidParameter"/>  One of the parameters was invalid.</para>
            <para><see cref="F:WindowsInstaller.MsiError.UnknownProduct"/>  The product code is unrecognized.</para>
            </returns>
        </member>
        <member name="M:WindowsInstaller.MsiInterop.MsiInstallProduct(System.String,System.String)">
            <summary>The MsiInstallProduct function installs or uninstalls a product.</summary>
            <param name="product">A null-terminated string that specifies the path to the package.</param>
            <param name="commandLine">A null-terminated string that specifies the command line property settings. This should be a list of the format <i>Property=Setting Property=Setting</i>.</param>
            <returns>
            <para><see cref="F:WindowsInstaller.MsiError.Success"/>  The function succeeded.</para>
            <para>An error relating to an action, see <see cref="T:WindowsInstaller.MsiError"/>.</para>
            </returns>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="M:WindowsInstaller.MsiInterop.MsiIsProductElevated(System.String,System.Boolean@)">
            <summary>
            <para>The <c>MsiIsProductElevated</c> function checks whether the product is installed with elevated privileges. An application is called a "managed application" if elevated (system) privileges are used to install the application.</para>
            <para>Note that <c>MsiIsProductElevated</c> does not take into account policies such as AlwaysInstallElevated, but verifies that the local system owns the product's registry data.</para>
            </summary>
            <param name="product">The full product code GUID of the product. This parameter is required and may not be null or empty.</param>
            <param name="elevated">A pointer to a <see cref="T:System.Boolean"/> for the result. This may not be null.</param>
            <returns>
            <para><see cref="F:WindowsInstaller.MsiError.Success"/>  The function succeeded.</para>
            <para><see cref="F:WindowsInstaller.MsiError.BadConfiguration"/>  The configuration data is corrupt.</para>
            <para><see cref="F:WindowsInstaller.MsiError.CallNotImplemented"/>  This function is only available on Windows 2000 and Windows XP.</para>
            <para><see cref="F:WindowsInstaller.MsiError.FunctionFailed"/>  The function failed.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InvalidParameter"/>  One of the parameters was invalid.</para>
            </returns>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="M:WindowsInstaller.MsiInterop.MsiLocateComponent(System.String,System.Text.StringBuilder,System.UInt32@)">
            <summary>The <c>MsiLocateComponent</c> function returns the full path to an installed component without a product code. This function attempts to determine the product using <see cref="M:WindowsInstaller.MsiInterop.MsiGetProductCode(System.String,System.String)"/>, but is not guaranteed to find the correct product for the caller. <see cref="M:WindowsInstaller.MsiInterop.MsiGetComponentPath(System.String,System.String,System.Text.StringBuilder,System.UInt32@)"/> should always be called when possible.</summary>
            <param name="component">Specifies the component ID of the component to be located.</param>
            <param name="path">Pointer to a variable that receives the path to the component. The variable includes the terminating null character.</param>
            <param name="pathSize">
            <para>Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <c>path</c> parameter. On input, this is the full size of the buffer, including a space for a terminating null character. Upon success of the <c>MsiLocateComponent</c> function, the variable pointed to by pcchBuf contains the count of characters not including the terminating null character. If the size of the buffer passed in is too small, the function returns <see cref="F:WindowsInstaller.MsiInstallState.MoreData"/>.</para>
            <para>If <c>path</c> is <c>null</c>, pcchBuf can be 0.</para>
            </param>
            <returns>The <see cref="T:WindowsInstaller.MsiInstallState"/>.</returns>
        </member>
        <member name="M:WindowsInstaller.MsiInterop.MsiOpenPackage(System.String,System.Int32@)">
            <summary>The <c>MsiOpenPackage</c> function opens a package for use with the functions that access the product database. The <see cref="M:WindowsInstaller.MsiInterop.MsiCloseHandle(System.Int32)"/> function must be called with the handle when the handle is no longer needed.</summary>
            <param name="path">Specifies the path to the package. </param>
            <param name="handle">Specifies the path to the package. </param>
            <returns>
            <para><see cref="F:WindowsInstaller.MsiError.Success"/>  The function succeeded.</para>
            <para><see cref="F:WindowsInstaller.MsiError.BadConfiguration"/>  The configuration data is corrupt.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InstallFailure"/>  The product could not be opened.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InstallRemoteProhibited"/>  Windows Installer does not permit installation from a Remote Desktop Connection.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InvalidParameter"/>  One of the parameters was invalid.</para>
            </returns>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="M:WindowsInstaller.MsiInterop.MsiOpenPackageEx(System.String,WindowsInstaller.MsiOpenPackageFlags,System.Int32@)">
            <summary>The <c>MsiOpenPackageEx</c> function opens a package for use with functions that access the product database. The <see cref="M:WindowsInstaller.MsiInterop.MsiCloseHandle(System.Int32)"/> function must be called with the handle when the handle is no longer needed.</summary>
            <param name="path">Specifies the path to the package.</param>
            <param name="options">The <see cref="T:WindowsInstaller.MsiOpenPackageFlags"/> option.</param>
            <param name="handle">Pointer to a variable that receives the product handle.</param>
            <returns>
            <para><see cref="F:WindowsInstaller.MsiError.Success"/>  The function succeeded.</para>
            <para><see cref="F:WindowsInstaller.MsiError.BadConfiguration"/>  The configuration data is corrupt.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InstallFailure"/>  The product could not be opened.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InstallRemoteProhibited"/>  Windows Installer does not permit installation from a Remote Desktop Connection.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InvalidParameter"/>  One of the parameters was invalid.</para>
            </returns>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="M:WindowsInstaller.MsiInterop.MsiOpenProduct(System.String,System.Int32@)">
            <summary>The <c>MsiOpenProduct</c> function opens a product for use with the functions that access the product database. The <see cref="M:WindowsInstaller.MsiInterop.MsiCloseHandle(System.Int32)"/> function must be called with the handle when the handle is no longer needed.</summary>
            <param name="product">Specifies the product code of the product to be opened.</param>
            <param name="handle">Pointer to a variable that receives the product handle. </param>
            <returns>
            <para><see cref="F:WindowsInstaller.MsiError.Success"/>  The function succeeded.</para>
            <para><see cref="F:WindowsInstaller.MsiError.BadConfiguration"/>  The configuration data is corrupt.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InstallFailure"/>  The product could not be opened.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InstallRemoteProhibited"/>  Windows Installer does not permit installation from a Remote Desktop Connection.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InvalidParameter"/>  One of the parameters was invalid.</para>
            </returns>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="M:WindowsInstaller.MsiInterop.MsiProvideAssembly(System.String,System.String,System.UInt32,WindowsInstaller.MsiAssemblyInfo,System.String,System.Int32@)">
            <summary>
            <para>The <c>MsiProvideAssembly</c> function returns the full path to a Windows Installer component containing an assembly. The function prompts for a source and performs any necessary installation. <c>MsiProvideAssembly</c> increments the usage count for the feature.</para>
            <para>This function is available starting with Windows Installer version 2.0.</para>
            </summary>
            <param name="assembly">The assembly's name as a string.</param>
            <param name="context">Set to <c>null</c> for global assemblies. For private assemblies, set <c>context</c> to the full path of the application configuration file (.cfg file) or to the full path of the executable file (.exe) of the application to which the assembly has been made private.</param>
            <param name="mode">Defines the installation mode.</param>
            <param name="info">Assembly information and assembly type.</param>
            <param name="path">Pointer to a variable that receives the path to the component. This parameter can be <c>null</c>.</param>
            <param name="pathSize">Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <c>path</c> parameter. On input, this is the full size of the buffer, including a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character. </param>
            <returns>
            <para><see cref="F:WindowsInstaller.MsiError.Success"/>  The function succeeded.</para>
            <para><see cref="F:WindowsInstaller.MsiError.BadConfiguration"/>  The configuration data is corrupt.</para>
            <para><see cref="F:WindowsInstaller.MsiError.FileNotFound"/>  The feature is absent or broken.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InstallFailure"/>  The product could not be opened.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InstallNotUsed"/>  The component being requested is disabled on the computer.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InstallSourceAbsent"/>  The source was unavailable.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InvalidParameter"/>  One of the parameters was invalid.</para>
            <para><see cref="F:WindowsInstaller.MsiError.MoreData"/>  A buffer is too small to hold the requested data.</para>
            <para><see cref="F:WindowsInstaller.MsiError.NotEnoughMemory"/>  The system does not have enough memory to complete the operation. Available with Windows Server 2003 family.</para>
            <para><see cref="F:WindowsInstaller.MsiError.UnknownComponent"/>  The component ID does not specify a known component.</para>
            <para><see cref="F:WindowsInstaller.MsiError.UnknownFeature"/>  The feature ID does not identify a known feature.</para>
            <para><see cref="F:WindowsInstaller.MsiError.UnknownProduct"/>  The product code does not identify a known product.</para>
            <para><see cref="F:WindowsInstaller.MsiInstallState.Unknown"/>  An unrecognized product or a feature name was passed to the function.</para>
            </returns>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="M:WindowsInstaller.MsiInterop.MsiProvideComponent(System.String,System.String,System.String,System.UInt32,System.Text.StringBuilder,System.Int32@)">
            <summary>The <c>MsiProvideComponent</c> function returns the full component path, performing any necessary installation. This function prompts for source if necessary and increments the usage count for the feature.</summary>
            <param name="product">Specifies the product code for the product that contains the feature with the necessary component.</param>
            <param name="feature">Specifies the feature ID of the feature with the necessary component.</param>
            <param name="component">Specifies the component code of the necessary component.</param>
            <param name="mode">Defines the installation mode.</param>
            <param name="path">Pointer to a variable that receives the path to the component. This parameter can be <c>null</c>.</param>
            <param name="pathSize">Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <c>path</c> parameter. On input, this is the full size of the buffer, including a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character. </param>
            <returns>
            <para><see cref="F:WindowsInstaller.MsiError.Success"/>  The function succeeded.</para>
            <para><see cref="F:WindowsInstaller.MsiError.BadConfiguration"/>  The configuration data is corrupt.</para>
            <para><see cref="F:WindowsInstaller.MsiError.FileNotFound"/>  The feature is absent or broken.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InstallFailure"/>  The product could not be opened.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InstallNotUsed"/>  The component being requested is disabled on the computer.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InstallSourceAbsent"/>  The source was unavailable.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InvalidParameter"/>  One of the parameters was invalid.</para>
            <para><see cref="F:WindowsInstaller.MsiError.MoreData"/>  A buffer is too small to hold the requested data.</para>
            <para><see cref="F:WindowsInstaller.MsiError.UnknownFeature"/>  The feature ID does not identify a known feature.</para>
            <para><see cref="F:WindowsInstaller.MsiError.UnknownProduct"/>  The product code does not identify a known product.</para>
            <para><see cref="F:WindowsInstaller.MsiInstallState.Unknown"/>  An unrecognized product or a feature name was passed to the function.</para>
            </returns>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="M:WindowsInstaller.MsiInterop.MsiProvideQualifiedComponent(System.String,System.String,System.UInt32,System.Text.StringBuilder,System.Int32@)">
            <summary>The <c>MsiProvideQualifiedComponent</c> function returns the full component path for a qualified component and performs any necessary installation. This function prompts for source if necessary, and increments the usage count for the feature.</summary>
            <param name="component">Specifies the component ID for the requested component. This may not be the GUID for the component itself, but rather a server that provides the correct functionality, as in the ComponentId column of the PublishComponent table.</param>
            <param name="qualifier">Specifies a qualifier into a list of advertising components (from PublishComponent Table).</param>
            <param name="mode">Defines the installation mode.</param>
            <param name="path">Pointer to a variable that receives the path to the component. This parameter can be <c>null</c>.</param>
            <param name="pathSize">Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <c>path</c> parameter. On input, this is the full size of the buffer, including a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character. </param>
            <returns>
            <para><see cref="F:WindowsInstaller.MsiError.Success"/>  The function succeeded.</para>
            <para><see cref="F:WindowsInstaller.MsiError.FileNotFound"/>  The feature is absent or broken.</para>
            <para><see cref="F:WindowsInstaller.MsiError.IndexAbsent"/>  The component qualifier is invalid or absent.</para>
            <para><see cref="F:WindowsInstaller.MsiError.UnknownComponent"/>  The component ID does not specify a known component.</para>
            <para>An error relating to an action, see <see cref="T:WindowsInstaller.MsiError"/>.</para>
            </returns>
        </member>
        <member name="M:WindowsInstaller.MsiInterop.MsiProvideQualifiedComponentEx(System.String,System.String,System.UInt32,System.String,System.UInt32,System.UInt32,System.Text.StringBuilder,System.Int32@)">
            <summary>The <c>MsiProvideQualifiedComponent</c> function returns the full component path for a qualified component and performs any necessary installation. This function prompts for source if necessary, and increments the usage count for the feature.</summary>
            <param name="component">Specifies the component ID for the requested component. This may not be the GUID for the component itself, but rather a server that provides the correct functionality, as in the ComponentId column of the PublishComponent table.</param>
            <param name="qualifier">Specifies a qualifier into a list of advertising components (from PublishComponent Table).</param>
            <param name="mode">Defines the installation mode.</param>
            <param name="product">Specifies the product to match that has published the qualified component. If this is <c>null</c>, then this API works the same as <see cref="M:WindowsInstaller.MsiInterop.MsiProvideQualifiedComponent(System.String,System.String,System.UInt32,System.Text.StringBuilder,System.Int32@)"/>.</param>
            <param name="unused1">Reserved. Must be zero.</param>
            <param name="unused2">Reserved. Must be zero.</param>
            <param name="path">Pointer to a variable that receives the path to the component. This parameter can be <c>null</c>.</param>
            <param name="pathSize">Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the <c>path</c> parameter. On input, this is the full size of the buffer, including a space for a terminating null character. If the buffer passed in is too small, the count returned does not include the terminating null character. </param>
            <returns>
            <para><see cref="F:WindowsInstaller.MsiError.Success"/>  The function succeeded.</para>
            <para><see cref="F:WindowsInstaller.MsiError.FileNotFound"/>  The feature is absent or broken.</para>
            <para><see cref="F:WindowsInstaller.MsiError.IndexAbsent"/>  The component qualifier is invalid or absent.</para>
            <para><see cref="F:WindowsInstaller.MsiError.UnknownComponent"/>  The component ID does not specify a known component.</para>
            <para>An error relating to an action, see <see cref="T:WindowsInstaller.MsiError"/>.</para>
            </returns>
        </member>
        <member name="M:WindowsInstaller.MsiInterop.MsiQueryFeatureState(System.String,System.String)">
            <summary>The <c>MsiQueryFeatureState</c> function returns the installed state for a product feature.</summary>
            <param name="product">Specifies the product code for the product that contains the feature of interest.</param>
            <param name="feature">Identifies the feature of interest.</param>
            <returns>The <see cref="T:WindowsInstaller.MsiInstallState"/>.</returns>
        </member>
        <member name="M:WindowsInstaller.MsiInterop.MsiQueryProductState(System.String)">
            <summary>The <c>MsiQueryProductState</c> function returns the installed state for a product.</summary>
            <param name="product">Specifies the product code for the product of interest.</param>
            <returns>The <see cref="T:WindowsInstaller.MsiInstallState"/>.</returns>
        </member>
        <member name="M:WindowsInstaller.MsiInterop.MsiReinstallFeature(System.String,System.String,WindowsInstaller.MsiReinstallMode)">
            <summary>The <c>MsiReinstallFeature</c> function reinstalls features.</summary>
            <param name="product">Specifies the product code for the product containing the feature to be reinstalled.</param>
            <param name="feature">Identifies the feature to be reinstalled.</param>
            <param name="mode">Specifies what to install.  (See <see cref="T:WindowsInstaller.MsiReinstallMode"/>.)</param>
            <returns>
            <para><see cref="F:WindowsInstaller.MsiError.Success"/>  The function succeeded.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InstallFailure"/>  The installation failed.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InstallServiceFailure"/>  The installation service could not be accessed.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InstallSuspend"/>  The installation was suspended.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InstallUserExit"/>  The user exited the installation.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InvalidParameter"/>  One of the parameters was invalid.</para>
            <para><see cref="F:WindowsInstaller.MsiError.UnknownFeature"/>  The feature ID does not identify a known feature.</para>
            <para><see cref="F:WindowsInstaller.MsiError.UnknownProduct"/>  The product code does not identify a known product.</para>
            </returns>
        </member>
        <member name="M:WindowsInstaller.MsiInterop.MsiReinstallProduct(System.String,WindowsInstaller.MsiReinstallMode)">
            <summary>The <c>MsiReinstallProduct</c> function reinstalls products.</summary>
            <param name="product">Specifies the product code for the product containing the feature to be reinstalled.</param>
            <param name="mode">Specifies what to install.  (See <see cref="T:WindowsInstaller.MsiReinstallMode"/>.)</param>
            <returns>
            <para><see cref="F:WindowsInstaller.MsiError.Success"/>  The function succeeded.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InstallFailure"/>  The installation failed.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InstallServiceFailure"/>  The installation service could not be accessed.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InstallSuspend"/>  The installation was suspended.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InstallUserExit"/>  The user exited the installation.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InvalidParameter"/>  One of the parameters was invalid.</para>
            <para><see cref="F:WindowsInstaller.MsiError.UnknownFeature"/>  The feature ID does not identify a known feature.</para>
            <para><see cref="F:WindowsInstaller.MsiError.UnknownProduct"/>  The product code does not identify a known product.</para>
            </returns>
        </member>
        <member name="M:WindowsInstaller.MsiInterop.MsiSetExternalUI(WindowsInstaller.MsiInstallUIHandler,WindowsInstaller.MsiInstallLogMode,System.Int32)">
            <summary>The <c>MsiSetExternalUI</c> function enables an external user-interface handler. This external UI handler is called before the normal internal user-interface handler. The external UI handler has the option to suppress the internal UI by returning a non-zero value to indicate that it has handled the messages.</summary>
            <param name="handler">The <see cref="T:WindowsInstaller.MsiInstallUIHandler"/> handler delegate.</param>
            <param name="filter">Specifies which messages to handle using the external message handler. If the external handler returns a non-zero result, then that message will not be sent to the UI, instead the message will be logged if logging has been enabled. See <see cref="M:WindowsInstaller.MsiInterop.MsiEnableLog(WindowsInstaller.MsiInstallLogMode,System.String,WindowsInstaller.MsiLogAttribute)"/>.</param>
            <param name="context">Pointer to an application context that is passed to the callback function. This parameter can be used for error checking.</param>
            <returns>The return value is the previously set external handler, or <c>null</c> if there was no previously set handler.</returns>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="M:WindowsInstaller.MsiInterop.MsiSetInternalUI(WindowsInstaller.MsiInstallUILevel,System.Int32@)">
            <summary>The <c>MsiSetInternalUI</c> function enables the installer's internal user interface. Then this user interface is used for all subsequent calls to user-interface-generating installer functions in this process.</summary>
            <param name="level">Specifies the level of complexity of the user interface.</param>
            <param name="parentWindow">Pointer to a window. This window becomes the owner of any user interface created. A pointer to the previous owner of the user interface is returned. If this parameter is <c>null</c>, the owner of the user interface does not change.</param>
            <returns>The previous user interface level is returned. If an invalid <c>level</c> is passed, then <see cref="F:WindowsInstaller.MsiInstallUILevel.NoChange"/> is returned.</returns>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="M:WindowsInstaller.MsiInterop.MsiSourceListAddSource(System.String,System.String,System.UInt32,System.String)">
            <summary>The <c>MsiSourceListAddSource</c> function adds to the list of valid network sources in the source list.</summary>
            <param name="product">Specifies the product code.</param>
            <param name="user">User name for per-user installation; null or empty string for per-machine installation. On Windows NT, Windows 2000, or Windows XP, the user name should always be in the format of DOMAIN\USERNAME (or MACHINENAME\USERNAME for a local user).</param>
            <param name="reserved">Reserved for future use. This value must be set to 0.</param>
            <param name="source">Pointer to the string specifying the source.</param>
            <returns>
            <para><see cref="F:WindowsInstaller.MsiError.Success"/>  The function succeeded.</para>
            <para><see cref="F:WindowsInstaller.MsiError.AccessDenied"/>  The user does not have the ability to add a source.</para>
            <para><see cref="F:WindowsInstaller.MsiError.BadConfiguration"/>  The configuration data is corrupt.</para>
            <para><see cref="F:WindowsInstaller.MsiError.BadUserName"/>  Could not resolve the user name.</para>
            <para><see cref="F:WindowsInstaller.MsiError.FunctionFailed"/>  The function failed.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InstallServiceFailure"/>  The installation service could not be accessed.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InvalidParameter"/>  One of the parameters was invalid.</para>
            <para><see cref="F:WindowsInstaller.MsiError.UnknownProduct"/>  The product code does not identify a known product.</para>
            </returns>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="M:WindowsInstaller.MsiInterop.MsiSourceListClearAll(System.String,System.String,System.UInt32)">
            <summary>The <c>MsiSourceListClearAll</c> function removes all network sources from the source list.</summary>
            <param name="product">Specifies the product code.</param>
            <param name="user">User name for per-user installation; null or empty string for per-machine installation. On Windows NT, Windows 2000, or Windows XP, the user name should always be in the format of DOMAIN\USERNAME (or MACHINENAME\USERNAME for a local user).</param>
            <param name="reserved">Reserved for future use. This value must be set to 0.</param>
            <returns>
            <para><see cref="F:WindowsInstaller.MsiError.Success"/>  The function succeeded.</para>
            <para><see cref="F:WindowsInstaller.MsiError.AccessDenied"/>  The user does not have the ability to add a source.</para>
            <para><see cref="F:WindowsInstaller.MsiError.BadConfiguration"/>  The configuration data is corrupt.</para>
            <para><see cref="F:WindowsInstaller.MsiError.BadUserName"/>  Could not resolve the user name.</para>
            <para><see cref="F:WindowsInstaller.MsiError.FunctionFailed"/>  The function failed.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InstallServiceFailure"/>  The installation service could not be accessed.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InvalidParameter"/>  One of the parameters was invalid.</para>
            <para><see cref="F:WindowsInstaller.MsiError.UnknownProduct"/>  The product code does not identify a known product.</para>
            </returns>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="M:WindowsInstaller.MsiInterop.MsiSourceListForceResolution(System.String,System.String,System.UInt32)">
            <summary>The <c>MsiSourceListForceResolution</c> function forces the installer to search the source list for a valid product source the next time a source is needed. For example, when the installer performs an installation or reinstallation, or when it needs the path for a component that is set to run from source.</summary>
            <param name="product">Specifies the product code.</param>
            <param name="user">User name for per-user installation; null or empty string for per-machine installation. On Windows NT, Windows 2000, or Windows XP, the user name should always be in the format of DOMAIN\USERNAME (or MACHINENAME\USERNAME for a local user).</param>
            <param name="reserved">Reserved for future use. This value must be set to 0.</param>
            <returns>
            <para><see cref="F:WindowsInstaller.MsiError.Success"/>  The function succeeded.</para>
            <para><see cref="F:WindowsInstaller.MsiError.AccessDenied"/>  The user does not have the ability to add a source.</para>
            <para><see cref="F:WindowsInstaller.MsiError.BadConfiguration"/>  The configuration data is corrupt.</para>
            <para><see cref="F:WindowsInstaller.MsiError.BadUserName"/>  Could not resolve the user name.</para>
            <para><see cref="F:WindowsInstaller.MsiError.FunctionFailed"/>  The function failed.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InstallServiceFailure"/>  The installation service could not be accessed.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InvalidParameter"/>  One of the parameters was invalid.</para>
            <para><see cref="F:WindowsInstaller.MsiError.UnknownProduct"/>  The product code does not identify a known product.</para>
            </returns>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="M:WindowsInstaller.MsiInterop.MsiUseFeature(System.String,System.String)">
            <summary>The <c>MsiUseFeature</c> function increments the usage count for a particular feature and indicates the installation state for that feature. This function should be used to indicate an application's intent to use a feature.</summary>
            <param name="product">Specifies the product code for the product that owns the feature to be used.</param>
            <param name="feature">Identifies the feature to be used.</param>
            <returns>The <see cref="T:WindowsInstaller.MsiInstallState"/>.</returns>
        </member>
        <member name="M:WindowsInstaller.MsiInterop.MsiUseFeatureEx(System.String,System.String,WindowsInstaller.MsiInstallMode,System.UInt32)">
            <summary>The <c>MsiUseFeatureEx</c> function increments the usage count for a particular feature and indicates the installation state for that feature. This function should be used to indicate an application's intent to use a feature.</summary>
            <param name="product">Specifies the product code for the product that owns the feature to be used.</param>
            <param name="feature">Identifies the feature to be used.</param>
            <param name="mode">This can be <see cref="F:WindowsInstaller.MsiInstallMode.NoDetection"/>.</param>
            <param name="reserved">Reserved for future use. This value must be set to 0. </param>
            <returns>The <see cref="T:WindowsInstaller.MsiInstallState"/>.</returns>
        </member>
        <member name="M:WindowsInstaller.MsiInterop.MsiVerifyPackage(System.String)">
            <summary>The <c>MsiVerifyPackage</c> function verifies that the given file is an installation package.</summary>
            <param name="path">Specifies the path and file name of the package.</param>
            <returns>
            <para><see cref="F:WindowsInstaller.MsiError.Success"/>  The file is a package.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InvalidParameter"/>  One of the parameters was invalid.</para>
            <para><see cref="F:WindowsInstaller.MsiError.PatchPackageInvalid"/>  The file is not a valid package.</para>
            <para><see cref="F:WindowsInstaller.MsiError.PatchPackageOpenFailed"/>  The file could not be opened.</para>
            </returns>
        </member>
        <member name="M:WindowsInstaller.MsiInterop.MsiCreateRecord(System.UInt32)">
            <summary>The <c>MsiCreateRecord</c> function creates a new record object with the specified number of fields. This function returns a handle that should be closed using <see cref="M:WindowsInstaller.MsiInterop.MsiCloseHandle(System.Int32)"/>.</summary>
            <param name="count">Specifies the number of fields the record will have. The maximum number of fields in a record is limited to 65535.</param>
            <returns>
            <para>If the function succeeds, the return value is handle to a new record object.</para>
            <para>If the function fails, the return value is <c>IntPtr.Zero</c>.</para>
            </returns>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="M:WindowsInstaller.MsiInterop.MsiCreateTransformSummaryInfo(System.Int32,System.Int32,System.String,WindowsInstaller.MsiTransformError,WindowsInstaller.MsiValidationFlag)">
            <summary>The <c>MsiCreateTransformSummaryInfo</c> function creates summary information of an existing transform to include validation and error conditions. Execution of this function sets the error record, accessible through <see cref="M:WindowsInstaller.MsiInterop.MsiGetLastErrorRecord"/>.</summary>
            <param name="database">Handle to the database that contains the new database Summary Information.</param>
            <param name="databaseRef">Handle to the database that contains the original Summary Information.</param>
            <param name="transformFile">The name of the transform to which the Summary Information is added.</param>
            <param name="errorConditions">The error conditions that should be suppressed when the transform is applied.</param>
            <param name="validation">Specifies those properties to be validated to verify the transform can be applied to the database.</param>
            <returns>
            <para><see cref="F:WindowsInstaller.MsiError.Success"/>  The function succeeded.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InstallPackageInvalid"/>  Reference to an invalid Windows Installer package.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InvalidHandle"/>  An invalid or inactive handle was supplied.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InvalidParameter"/>  One of the parameters was invalid.</para>
            <para><see cref="F:WindowsInstaller.MsiError.OpenFailed"/>  The transform storage file could not be opened.</para>
            </returns>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="M:WindowsInstaller.MsiInterop.MsiDatabaseApplyTransform(System.Int32,System.String,WindowsInstaller.MsiTransformError)">
            <summary>The <c>MsiDatabaseApplyTransform</c> function applies a transform to a database.</summary>
            <param name="database">Handle to the database obtained from <see cref="M:WindowsInstaller.MsiInterop.MsiOpenDatabase(System.String,WindowsInstaller.MsiDbPersistMode,System.Int32@)"/> to the transform.</param>
            <param name="transformFile">Specifies the name of the transform file to apply.</param>
            <param name="errorConditions">Error conditions that should be suppressed.</param>
            <returns>
            <para><see cref="F:WindowsInstaller.MsiError.Success"/>  The function succeeded.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InstallTransformFailure"/>  Reference to an invalid Windows Installer package.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InvalidHandle"/>  An invalid or inactive handle was supplied.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InvalidParameter"/>  One of the parameters was invalid.</para>
            <para><see cref="F:WindowsInstaller.MsiError.OpenFailed"/>  The transform storage file could not be opened.</para>
            </returns>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="M:WindowsInstaller.MsiInterop.MsiDatabaseCommit(System.Int32)">
            <summary>The <c>MsiDatabaseCommit</c> function commits changes to a database.</summary>
            <param name="database">Handle to the database obtained from <see cref="M:WindowsInstaller.MsiInterop.MsiOpenDatabase(System.String,WindowsInstaller.MsiDbPersistMode,System.Int32@)"/>.</param>
            <returns>
            <para><see cref="F:WindowsInstaller.MsiError.Success"/>  The function succeeded.</para>
            <para><see cref="F:WindowsInstaller.MsiError.FunctionFailed"/>  The function failed.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InvalidHandle"/>  An invalid or inactive handle was supplied.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InvalidHandleState"/>  The handle is in an invalid state.</para>
            </returns>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="M:WindowsInstaller.MsiInterop.MsiDatabaseExport(System.Int32,System.String,System.String,System.String)">
            <summary>The <c>MsiDatabaseExport</c> function exports an installer table from an open database to a text archive file.</summary>
            <param name="database">Handle to the database obtained from <see cref="M:WindowsInstaller.MsiInterop.MsiOpenDatabase(System.String,WindowsInstaller.MsiDbPersistMode,System.Int32@)"/>.</param>
            <param name="table">Specifies the name of the table to export.</param>
            <param name="folder">Specifies the name of the folder that contains archive files.</param>
            <param name="fileName">Specifies the name of the exported table archive file.</param>
            <returns>
            <para><see cref="F:WindowsInstaller.MsiError.Success"/>  The function succeeded.</para>
            <para><see cref="F:WindowsInstaller.MsiError.BadPathName"/>  An invalid path was passed to the function.</para>
            <para><see cref="F:WindowsInstaller.MsiError.FunctionFailed"/>  The function failed.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InvalidHandle"/>  An invalid or inactive handle was supplied.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InvalidParameter"/>  One of the parameters was invalid.</para>
            </returns>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="M:WindowsInstaller.MsiInterop.MsiDatabaseGenerateTransform(System.Int32,System.Int32,System.String,System.Int32,System.Int32)">
            <summary>The <c>MsiDatabaseGenerateTransform</c> function generates a transform file of differences between two databases. A transform is a way of recording changes to a database without altering the original database. You can also use <c>MsiDatabaseGenerateTransform</c> to test whether two databases are identical without creating a transform.</summary>
            <param name="database">Handle to the database obtained from <see cref="M:WindowsInstaller.MsiInterop.MsiOpenDatabase(System.String,WindowsInstaller.MsiDbPersistMode,System.Int32@)"/> that includes the changes.</param>
            <param name="databaseRef">Handle to the database obtained from <see cref="M:WindowsInstaller.MsiInterop.MsiOpenDatabase(System.String,WindowsInstaller.MsiDbPersistMode,System.Int32@)"/> that does not include the changes.</param>
            <param name="transformFile">A null-terimated string specifying the name of the transform file being generated. This parameter can be <c>null</c>. If <c>transformFile</c> is <c>null</c>, you can use <c>MsiDatabaseGenerateTransform</c> to test whether two databases are identical without creating a transform. If the databases are identical, the function returns <see cref="F:WindowsInstaller.MsiError.NoData"/>. If the databases are different the function returns <see cref="F:WindowsInstaller.MsiError.NoError"/>.</param>
            <param name="reserved1">This is a reserved argument and must be set to 0.</param>
            <param name="reserved2">This is a reserved argument and must be set to 0.</param>
            <returns>
            <para><see cref="F:WindowsInstaller.MsiError.Success"/>  The function succeeded.</para>
            <para><see cref="F:WindowsInstaller.MsiError.CreateFailed"/>  The storage for the transform file could not be created.</para>
            <para><see cref="F:WindowsInstaller.MsiError.NoData"/>  If <c>transformFile</c> is <c>null</c>, this value is returned if the two databases are identical. No transform file is generated.</para>
            <para><see cref="F:WindowsInstaller.MsiError.NoError"/>  If <c>transformFile</c> is <c>null</c>, this is returned if the two databases are different.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InstallTransformFailure"/>  The transform could not be generated.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InvalidHandle"/>  An invalid or inactive handle was supplied.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InvalidParameter"/>  One of the parameters was invalid.</para>
            </returns>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="M:WindowsInstaller.MsiInterop.MsiDatabaseGetPrimaryKeys(System.Int32,System.String,System.Int32@)">
            <summary>The <c>MsiDatabaseGetPrimaryKeys</c> function returns a record containing the names of all the primary key columns for a specified table. This function returns a handle that should be closed using <see cref="M:WindowsInstaller.MsiInterop.MsiCloseHandle(System.Int32)"/>.</summary>
            <param name="database">Handle to the database.</param>
            <param name="table">Specifies the name of the table from which to obtain primary key names.</param>
            <param name="record">Pointer to the handle of the record that holds the primary key names.</param>
            <returns>
            <para><see cref="F:WindowsInstaller.MsiError.Success"/>  The function succeeded.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InvalidHandle"/>  An invalid or inactive handle was supplied.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InvalidParameter"/>  One of the parameters was invalid.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InvalidTable"/>  An invalid table was passed to the function.</para>
            </returns>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="M:WindowsInstaller.MsiInterop.MsiDatabaseImport(System.Int32,System.String,System.String)">
            <summary>The <c>MsiDatabaseImport</c> function imports an installer text archive table into an open database.</summary>
            <param name="database">Handle to the database obtained from <see cref="M:WindowsInstaller.MsiInterop.MsiOpenDatabase(System.String,WindowsInstaller.MsiDbPersistMode,System.Int32@)"/>.</param>
            <param name="folder">Specifies the path to the folder containing archive files.</param>
            <param name="fileName">Specifies the name of the file to import.</param>
            <returns>
            <para><see cref="F:WindowsInstaller.MsiError.Success"/>  The function succeeded.</para>
            <para><see cref="F:WindowsInstaller.MsiError.BadPathName"/>  An invalid path was passed to the function.</para>
            <para><see cref="F:WindowsInstaller.MsiError.FunctionFailed"/>  The function failed.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InvalidHandle"/>  An invalid or inactive handle was supplied.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InvalidParameter"/>  One of the parameters was invalid.</para>
            </returns>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="M:WindowsInstaller.MsiInterop.MsiDatabaseIsTablePersistent(System.Int32,System.String)">
            <summary>The <c>MsiDatabaseIsTablePersistent</c> function returns an enumeration describing the state of a particular table.</summary>
            <param name="database">Handle to the database to which the relevant table belongs.</param>
            <param name="table">Specifies the name of the relevant table.</param>
            <returns>The <see cref="T:WindowsInstaller.MsiCondition"/> of the table.</returns>
        </member>
        <member name="M:WindowsInstaller.MsiInterop.MsiDatabaseMerge(System.Int32,System.Int32,System.String)">
            <summary>The <c>MsiDatabaseMerge</c> function merges two databases together, allowing duplicate rows.</summary>
            <param name="database">Handle to the database obtained from <see cref="M:WindowsInstaller.MsiInterop.MsiOpenDatabase(System.String,WindowsInstaller.MsiDbPersistMode,System.Int32@)"/>.</param>
            <param name="merge">Handle to the database obtained from <see cref="M:WindowsInstaller.MsiInterop.MsiOpenDatabase(System.String,WindowsInstaller.MsiDbPersistMode,System.Int32@)"/> to merge into the base database.</param>
            <param name="table">Specifies the name of the table to receive merge conflict information.</param>
            <returns>
            <para><see cref="F:WindowsInstaller.MsiError.Success"/>  The function succeeded.</para>
            <para><see cref="F:WindowsInstaller.MsiError.DatatypeMismatch"/>  Schema difference between the two databases.</para>
            <para><see cref="F:WindowsInstaller.MsiError.FunctionFailed"/>  The function failed.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InvalidHandle"/>  An invalid or inactive handle was supplied.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InvalidTable"/>  An invalid table was passed to the function.</para>
            </returns>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="M:WindowsInstaller.MsiInterop.MsiDatabaseOpenView(System.Int32,System.String,System.Int32@)">
            <summary>The <c>MsiDatabaseOpenView</c> function prepares a database query and creates a view object. This function returns a handle that should be closed using <see cref="M:WindowsInstaller.MsiInterop.MsiCloseHandle(System.Int32)"/>.</summary>
            <param name="database">Handle to the database to which you want to open a view object.</param>
            <param name="query">Specifies a SQL query string for querying the database.</param>
            <param name="view">Pointer to a handle for the returned view.</param>
            <returns>
            <para><see cref="F:WindowsInstaller.MsiError.Success"/>  The function succeeded.</para>
            <para><see cref="F:WindowsInstaller.MsiError.BadQuerySyntax"/>  An invalid SQL query string was passed to the function.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InvalidHandle"/>  An invalid or inactive handle was supplied.</para>
            </returns>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="M:WindowsInstaller.MsiInterop.MsiDoAction(System.Int32,System.String)">
            <summary>The MsiDoAction function executes a built-in action, custom action, or user-interface wizard action.</summary>
            <param name="database">Handle to the installation provided to a DLL custom action or obtained through <see cref="M:WindowsInstaller.MsiInterop.MsiOpenPackage(System.String,System.Int32@)"/>, <see cref="M:WindowsInstaller.MsiInterop.MsiOpenPackageEx(System.String,WindowsInstaller.MsiOpenPackageFlags,System.Int32@)"/>, or <see cref="M:WindowsInstaller.MsiInterop.MsiOpenProduct(System.String,System.Int32@)"/>. </param>
            <param name="action">Specifies the action to execute.</param>
            <returns>
            <para><see cref="F:WindowsInstaller.MsiError.Success"/>  The function succeeded.</para>
            <para><see cref="F:WindowsInstaller.MsiError.FunctionFailed"/>  The function failed.</para>
            <para><see cref="F:WindowsInstaller.MsiError.FunctionNotCalled"/>  The action was not found.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InstallFailure"/>  The action failed.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InstallSuspend"/>  The user suspended the installation.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InstallUserExit"/>  The user canceled the action.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InvalidHandle"/>  An invalid or inactive handle was supplied.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InvalidHandleState"/>  The handle is in an invalid state.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InvalidParameter"/>  One of the parameters was invalid.</para>
            <para><see cref="F:WindowsInstaller.MsiError.MoreData"/>  The action indicates that the remaining actions should be skipped.</para>
            </returns>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="M:WindowsInstaller.MsiInterop.MsiEnableUIPreview(System.Int32,System.Int32@)">
            <summary>The <c>MsiEnableUIPreview</c> function enables preview mode of the user interface to facilitate authoring of user-interface dialog boxes. This function returns a handle that should be closed using <see cref="M:WindowsInstaller.MsiInterop.MsiCloseHandle(System.Int32)"/>.</summary>
            <param name="database">Handle to the database.</param>
            <param name="preview">Pointer to a returned handle for user-interface preview capability.</param>
            <returns>
            <para><see cref="F:WindowsInstaller.MsiError.Success"/>  The function succeeded.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InvalidHandle"/>  An invalid or inactive handle was supplied.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InvalidParameter"/>  One of the parameters was invalid.</para>
            <para><see cref="F:WindowsInstaller.MsiError.OutOfMemory"/>  Out of memory.</para>
            </returns>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="M:WindowsInstaller.MsiInterop.MsiEnumComponentCosts(System.Int32,System.String,System.UInt32,WindowsInstaller.MsiInstallState,System.String,System.UInt32@,System.Int32@,System.Int32@)">
            <summary>The <c>MsiEnumComponentCosts</c> function enumerates the disk-space per drive required to install a component. This information is needed to display the disk-space cost required for all drives in the user interface. The returned disk-space costs are expressed in multiples of 512 bytes.</summary>
            <param name="install">Handle to the installation provided to a DLL custom action or obtained through <see cref="M:WindowsInstaller.MsiInterop.MsiOpenPackage(System.String,System.Int32@)"/>, <see cref="M:WindowsInstaller.MsiInterop.MsiOpenPackageEx(System.String,WindowsInstaller.MsiOpenPackageFlags,System.Int32@)"/>, or <see cref="M:WindowsInstaller.MsiInterop.MsiOpenProduct(System.String,System.Int32@)"/>.</param>
            <param name="component">A null-terminated string specifying the component's name as it is listed in the Component column of the Component table. This parameter can be <c>null</c>. If <c>component</c> is <c>null</c> or an empty string, <c>MsiEnumComponentCosts</c> enumerates the total disk-space per drive used during the installation. In this case, <c>state</c> is ignored. The costs of the installer include those costs for caching the database in the secure folder as well as the cost to create the installation script. Note that the total disk-space used during the installation may be larger than the space used after the component is installed.</param>
            <param name="index">0-based index for drives. This parameter should be zero for the first call to the <c>MsiEnumComponentCosts</c> function and then incremented for subsequent calls.</param>
            <param name="state">Requested component state to be enumerated. If <c>component</c> is passed as <c>null</c> or an empty string, the installer ignores the <c>state</c> parameter.</param>
            <param name="drive">Buffer that holds the drive name including the null terminator. This is an empty string in case of an error.</param>
            <param name="driveSize">Pointer to a variable that specifies the size, in TCHARs, of the buffer pointed to by the <c>drive</c> parameter. This size should include the terminating null character. If the buffer provided is too small, the variable pointed to by <c>driveSize</c> contains the count of characters not including the null terminator.</param>
            <param name="cost">Cost of the component per drive expressed in multiples of 512 bytes. This value is 0 if an error has occurred. The value returned in <c>cost</c> is final disk-space used by the component after installation. If <c>component</c> is passed as <c>null</c> or an empty string, the installer sets the value at <c>cost</c> to 0.</param>
            <param name="tempCost">The component cost per drive for the duration of the installation, or 0 if an error occurred. The value in <c>tempCost</c> represents the temporary space requirements for the duration of the installation. This temporary space requirement is space needed only for the duration of the installation. This does not affect the final disk space requirement.</param>
            <returns>
            <para><see cref="F:WindowsInstaller.MsiError.Success"/>  The function succeeded.</para>
            <para><see cref="F:WindowsInstaller.MsiError.FunctionNotCalled"/>  Costing is not complete.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InvalidHandle"/>  An invalid or inactive handle was supplied.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InvalidHandleState"/>  The handle is in an invalid state.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InvalidParameter"/>  One of the parameters was invalid.</para>
            <para><see cref="F:WindowsInstaller.MsiError.MoreData"/>  Buffer not large enough for the drive name.</para>
            <para><see cref="F:WindowsInstaller.MsiError.NoMoreItems"/>  There are no more drives to return.</para>
            <para><see cref="F:WindowsInstaller.MsiError.UnknownComponent"/>  The component is missing.</para>
            </returns>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="M:WindowsInstaller.MsiInterop.MsiEvaluateCondition(System.Int32,System.String)">
            <summary>The <c>MsiEvaluateCondition</c> function evaluates a conditional expression containing property names and values.</summary>
            <param name="install">Handle to the installation provided to a DLL custom action or obtained through <see cref="M:WindowsInstaller.MsiInterop.MsiOpenPackage(System.String,System.Int32@)"/>, <see cref="M:WindowsInstaller.MsiInterop.MsiOpenPackageEx(System.String,WindowsInstaller.MsiOpenPackageFlags,System.Int32@)"/>, or <see cref="M:WindowsInstaller.MsiInterop.MsiOpenProduct(System.String,System.Int32@)"/>.</param>
            <param name="condition">Specifies the conditional expression. This parameter must not be <c>null</c>.</param>
            <returns>The <see cref="T:WindowsInstaller.MsiCondition"/>.</returns>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="M:WindowsInstaller.MsiInterop.MsiFormatRecord(System.Int32,System.Int32,System.Text.StringBuilder,System.UInt32@)">
            <summary>The <c>MsiFormatRecord</c> function formats record field data and properties using a format string.</summary>
            <param name="install">Handle to the installation provided to a DLL custom action or obtained through <see cref="M:WindowsInstaller.MsiInterop.MsiOpenPackage(System.String,System.Int32@)"/>, <see cref="M:WindowsInstaller.MsiInterop.MsiOpenPackageEx(System.String,WindowsInstaller.MsiOpenPackageFlags,System.Int32@)"/>, or <see cref="M:WindowsInstaller.MsiInterop.MsiOpenProduct(System.String,System.Int32@)"/>.</param>
            <param name="record">Handle to the record to format. The template string must be stored in record field 0 followed by referenced data parameters.</param>
            <param name="result">Pointer to the buffer that receives the null terminated formatted string. Do not attempt to determine the size of the buffer by passing in a <c>null</c> for <c>result</c>. You can get the size of the buffer by passing in an empty string (for example ""). The function will then return <see cref="F:WindowsInstaller.MsiError.MoreData"/> and <c>resultSize</c> will contain the required buffer size in TCHARs, not including the terminating null character. On return of <see cref="F:WindowsInstaller.MsiError.Success"/>, <c>resultSize</c> contains the number of TCHARs written to the buffer, not including the terminating null character.</param>
            <param name="resultSize">Pointer to the variable that specifies the size, in TCHARs, of the buffer pointed to by the variable <c>result</c>. When the function returns <see cref="F:WindowsInstaller.MsiError.Success"/>, this variable contains the size of the data copied to <c>result</c>, not including the terminating null character. If <c>result</c> is not large enough, the function returns <see cref="F:WindowsInstaller.MsiError.MoreData"/> and stores the required size, not including the terminating null character, in the variable pointed to by <c>resultSize</c>.</param>
            <returns>
            <para><see cref="F:WindowsInstaller.MsiError.Success"/>  The function succeeded.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InvalidHandle"/>  An invalid or inactive handle was supplied.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InvalidParameter"/>  One of the parameters was invalid.</para>
            <para><see cref="F:WindowsInstaller.MsiError.MoreData"/>  Buffer not large enough for the drive name.</para>
            </returns>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="M:WindowsInstaller.MsiInterop.MsiGetActiveDatabase(System.Int32)">
            <summary>The <c>MsiGetActiveDatabase</c> function returns the active database for the installation. This function returns a read-only handle that should be closed using <see cref="M:WindowsInstaller.MsiInterop.MsiCloseHandle(System.Int32)"/>.</summary>
            <param name="install">Handle to the installation provided to a DLL custom action or obtained through <see cref="M:WindowsInstaller.MsiInterop.MsiOpenPackage(System.String,System.Int32@)"/>, <see cref="M:WindowsInstaller.MsiInterop.MsiOpenPackageEx(System.String,WindowsInstaller.MsiOpenPackageFlags,System.Int32@)"/>, or <see cref="M:WindowsInstaller.MsiInterop.MsiOpenProduct(System.String,System.Int32@)"/>.</param>
            <returns>If the function succeeds, it returns a read-only handle to the database currently in use by the installer. If the function fails, the function returns <c>IntPtr.Zero</c>.</returns>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="M:WindowsInstaller.MsiInterop.MsiGetComponentState(System.Int32,System.String,WindowsInstaller.MsiInstallState@,WindowsInstaller.MsiInstallState@)">
            <summary>The <c>MsiGetComponentState</c> function obtains the state of a component.</summary>
            <param name="install">Handle to the installation provided to a DLL custom action or obtained through <see cref="M:WindowsInstaller.MsiInterop.MsiOpenPackage(System.String,System.Int32@)"/>, <see cref="M:WindowsInstaller.MsiInterop.MsiOpenPackageEx(System.String,WindowsInstaller.MsiOpenPackageFlags,System.Int32@)"/>, or <see cref="M:WindowsInstaller.MsiInterop.MsiOpenProduct(System.String,System.Int32@)"/>.</param>
            <param name="component">A null-terminated string specifying the component name within the product.</param>
            <param name="state">Receives the current installed state.</param>
            <param name="action">Receives the action taken during the installation.</param>
            <returns>
            <para><see cref="F:WindowsInstaller.MsiError.Success"/>  The function succeeded.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InvalidHandle"/>  An invalid or inactive handle was supplied.</para>
            <para><see cref="F:WindowsInstaller.MsiError.UnknownComponent"/>  An unknown component was requested.</para>
            </returns>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="M:WindowsInstaller.MsiInterop.MsiGetDatabaseState(System.Int32)">
            <summary>The <c>MsiGetDatabaseState</c> function returns the state of the database.</summary>
            <param name="database">Handle to the database obtained from <see cref="M:WindowsInstaller.MsiInterop.MsiOpenDatabase(System.String,WindowsInstaller.MsiDbPersistMode,System.Int32@)"/>.</param>
            <returns>The <see cref="T:WindowsInstaller.MsiDbState"/>.</returns>
        </member>
        <member name="M:WindowsInstaller.MsiInterop.MsiGetFeatureCost(System.Int32,System.String,WindowsInstaller.MsiCostTree,WindowsInstaller.MsiInstallState,System.Int32@)">
            <summary>The <c>MsiGetFeatureCost</c> function returns the disk space required by a feature and its selected children and parent features.</summary>
            <param name="install">Handle to the installation provided to a DLL custom action or obtained through <see cref="M:WindowsInstaller.MsiInterop.MsiOpenPackage(System.String,System.Int32@)"/>, <see cref="M:WindowsInstaller.MsiInterop.MsiOpenPackageEx(System.String,WindowsInstaller.MsiOpenPackageFlags,System.Int32@)"/>, or <see cref="M:WindowsInstaller.MsiInterop.MsiOpenProduct(System.String,System.Int32@)"/>.</param>
            <param name="feature">Specifies the name of the feature.</param>
            <param name="costTree">Specifies the value the function uses to determine disk space requirements.</param>
            <param name="state">Specifies the installation state.</param>
            <param name="cost">Receives the disk space requirements in units of 512 bytes. This parameter must not be null.</param>
            <returns>
            <para><see cref="F:WindowsInstaller.MsiError.Success"/>  The function succeeded.</para>
            <para><see cref="F:WindowsInstaller.MsiError.FunctionFailed"/>  The function failed.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InvalidHandle"/>  An invalid or inactive handle was supplied.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InvalidHandleState"/>  The handle is in an invalid state.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InvalidParameter"/>  One of the parameters was invalid.</para>
            <para><see cref="F:WindowsInstaller.MsiError.UnknownFeature"/>  An unknown feature was requested.</para>
            </returns>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="M:WindowsInstaller.MsiInterop.MsiGetFeatureState(System.Int32,System.String,WindowsInstaller.MsiInstallState@,WindowsInstaller.MsiInstallState@)">
            <summary>The <c>MsiGetFeatureState</c> function gets the requested state of a feature.</summary>
            <param name="install">Handle to the installation provided to a DLL custom action or obtained through <see cref="M:WindowsInstaller.MsiInterop.MsiOpenPackage(System.String,System.Int32@)"/>, <see cref="M:WindowsInstaller.MsiInterop.MsiOpenPackageEx(System.String,WindowsInstaller.MsiOpenPackageFlags,System.Int32@)"/>, or <see cref="M:WindowsInstaller.MsiInterop.MsiOpenProduct(System.String,System.Int32@)"/>.</param>
            <param name="feature">Specifies the feature name within the product.</param>
            <param name="state">Receives the current installed state.</param>
            <param name="action">Receives the action taken during the installation.</param>
            <returns>
            <para><see cref="F:WindowsInstaller.MsiError.Success"/>  The function succeeded.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InvalidHandle"/>  An invalid or inactive handle was supplied.</para>
            <para><see cref="F:WindowsInstaller.MsiError.UnknownFeature"/>  An unknown feature was requested.</para>
            </returns>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="M:WindowsInstaller.MsiInterop.MsiGetFeatureValidStates(System.Int32,System.String,WindowsInstaller.MsiFeatureInstallState@)">
            <summary>The <c>MsiGetFeatureValidStates</c> function returns a valid installation state.</summary>
            <param name="install">Handle to the installation provided to a DLL custom action or obtained through <see cref="M:WindowsInstaller.MsiInterop.MsiOpenPackage(System.String,System.Int32@)"/>, <see cref="M:WindowsInstaller.MsiInterop.MsiOpenPackageEx(System.String,WindowsInstaller.MsiOpenPackageFlags,System.Int32@)"/>, or <see cref="M:WindowsInstaller.MsiInterop.MsiOpenProduct(System.String,System.Int32@)"/>.</param>
            <param name="feature">Specifies the feature name within the product.</param>
            <param name="state">Receives the location to hold the valid installation states.</param>
            <returns>
            <para><see cref="F:WindowsInstaller.MsiError.Success"/>  The function succeeded.</para>
            <para><see cref="F:WindowsInstaller.MsiError.FunctionFailed"/>  The function failed.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InvalidHandle"/>  An invalid or inactive handle was supplied.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InvalidHandleState"/>  The handle is in an invalid state.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InvalidParameter"/>  One of the parameters was invalid.</para>
            <para><see cref="F:WindowsInstaller.MsiError.UnknownFeature"/>  An unknown feature was requested.</para>
            </returns>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="M:WindowsInstaller.MsiInterop.MsiGetLanguage(System.Int32)">
            <summary>The <c>MsiGetLanguage</c> function returns the numeric language of the installation that is currently running.</summary>
            <param name="install">Handle to the installation provided to a DLL custom action or obtained through <see cref="M:WindowsInstaller.MsiInterop.MsiOpenPackage(System.String,System.Int32@)"/>, <see cref="M:WindowsInstaller.MsiInterop.MsiOpenPackageEx(System.String,WindowsInstaller.MsiOpenPackageFlags,System.Int32@)"/>, or <see cref="M:WindowsInstaller.MsiInterop.MsiOpenProduct(System.String,System.Int32@)"/>.</param>
            <returns>If the function succeeds, the return value is the numeric LANGID for the install.  Can be <see cref="F:WindowsInstaller.MsiError.InvalidHandle"/> if the function fails, or zero if the installation is not running.</returns>
        </member>
        <member name="M:WindowsInstaller.MsiInterop.MsiGetLastErrorRecord">
            <summary>The <c>MsiGetLastErrorRecord</c> function returns the error record that was last returned for the calling process. This function returns a handle that should be closed using <see cref="M:WindowsInstaller.MsiInterop.MsiCloseHandle(System.Int32)"/>.</summary>
            <returns>A handle to the error record. If the last function was successful, <c>MsiGetLastErrorRecord</c> returns an <c>IntPtr.Zero</c>.</returns>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="M:WindowsInstaller.MsiInterop.MsiGetMode(System.Int32,WindowsInstaller.MsiRunMode)">
            <summary>The <c>MsiGetMode</c> function is used to determine whether the installer is currently running in a specified mode.</summary>
            <param name="install">Handle to the installation provided to a DLL custom action or obtained through <see cref="M:WindowsInstaller.MsiInterop.MsiOpenPackage(System.String,System.Int32@)"/>, <see cref="M:WindowsInstaller.MsiInterop.MsiOpenPackageEx(System.String,WindowsInstaller.MsiOpenPackageFlags,System.Int32@)"/>, or <see cref="M:WindowsInstaller.MsiInterop.MsiOpenProduct(System.String,System.Int32@)"/>.</param>
            <param name="mode">Specifies the run mode.</param>
            <returns><c>true</c> if the mode matches requested,</returns>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="M:WindowsInstaller.MsiInterop.MsiGetProperty(System.Int32,System.String,System.Text.StringBuilder,System.UInt32@)">
            <summary>The MsiGetProperty function gets the value for an installer property.</summary>
            <param name="install">Handle to the installation provided to a DLL custom action or obtained through <see cref="M:WindowsInstaller.MsiInterop.MsiOpenPackage(System.String,System.Int32@)"/>, <see cref="M:WindowsInstaller.MsiInterop.MsiOpenPackageEx(System.String,WindowsInstaller.MsiOpenPackageFlags,System.Int32@)"/>, or <see cref="M:WindowsInstaller.MsiInterop.MsiOpenProduct(System.String,System.Int32@)"/>.</param>
            <param name="name">A null-terminated string that specifies the name of the property.</param>
            <param name="value">Pointer to the buffer that receives the null terminated string containing the value of the property. Do not attempt to determine the size of the buffer by passing in a <c>null</c> for <c>value</c>. You can get the size of the buffer by passing in an empty string (for example ""). The function will then return <see cref="F:WindowsInstaller.MsiError.MoreData"/> and <c>valueSize</c> will contain the required buffer size in TCHARs, not including the terminating null character. On return of <see cref="F:WindowsInstaller.MsiError.Success"/>, <c>valueSize</c> contains the number of TCHARs written to the buffer, not including the terminating null character.</param>
            <param name="valueSize">Pointer to the variable that specifies the size, in TCHARs, of the buffer pointed to by the variable <c>value</c>. When the function returns <see cref="F:WindowsInstaller.MsiError.Success"/>, this variable contains the size of the data copied to <c>value</c>, not including the terminating null character. If <c>value</c> is not not large enough, the function returns <see cref="F:WindowsInstaller.MsiError.MoreData"/> and stores the required size, not including the terminating null character, in the variable pointed to by <c>valueSize</c>.</param>
            <returns>
            <para><see cref="F:WindowsInstaller.MsiError.Success"/>  The function succeeded.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InvalidHandle"/>  An invalid or inactive handle was supplied.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InvalidParameter"/>  One of the parameters was invalid.</para>
            <para><see cref="F:WindowsInstaller.MsiError.MoreData"/>  The provided buffer was too small to hold the entire value.</para>
            </returns>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="M:WindowsInstaller.MsiInterop.MsiGetSourcePath(System.Int32,System.String,System.Text.StringBuilder,System.UInt32@)">
            <summary>The <c>MsiGetSourcePath</c> function returns the full source path for a folder in the Directory table.</summary>
            <param name="install">Handle to the installation provided to a DLL custom action or obtained through <see cref="M:WindowsInstaller.MsiInterop.MsiOpenPackage(System.String,System.Int32@)"/>, <see cref="M:WindowsInstaller.MsiInterop.MsiOpenPackageEx(System.String,WindowsInstaller.MsiOpenPackageFlags,System.Int32@)"/>, or <see cref="M:WindowsInstaller.MsiInterop.MsiOpenProduct(System.String,System.Int32@)"/>.</param>
            <param name="folder"> null-terminated string that specifies a record of the Directory table. If the directory is a root directory, this can be a value from the DefaultDir column. Otherwise it must be a value from the Directory column.</param>
            <param name="path">Pointer to the buffer that receives the null terminated full source path. Do not attempt to determine the size of the buffer by passing in a <c>null</c> for <c>path</c>. You can get the size of the buffer by passing in an empty string (for example ""). The function will then return <see cref="F:WindowsInstaller.MsiError.MoreData"/> and <c>pathSize</c> will contain the required buffer size in TCHARs, not including the terminating null character. On return of <see cref="F:WindowsInstaller.MsiError.Success"/>, <c>pathSize</c> contains the number of TCHARs written to the buffer, not including the terminating null character.</param>
            <param name="pathSize">Pointer to the variable that specifies the size, in TCHARs, of the buffer pointed to by the variable <c>path</c>. When the function returns <see cref="F:WindowsInstaller.MsiError.Success"/>, this variable contains the size of the data copied to <c>path</c>, not including the terminating null character. If <c>path</c> is not large enough, the function returns <see cref="F:WindowsInstaller.MsiError.MoreData"/> and stores the required size, not including the terminating null character, in the variable pointed to by <c>pathSize</c>.</param>
            <returns>
            <para><see cref="F:WindowsInstaller.MsiError.Success"/>  The function succeeded.</para>
            <para><see cref="F:WindowsInstaller.MsiError.Directory"/>  The directory specified was not found in the Directory table.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InvalidHandle"/>  An invalid or inactive handle was supplied.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InvalidParameter"/>  One of the parameters was invalid.</para>
            <para><see cref="F:WindowsInstaller.MsiError.MoreData"/>  The provided buffer was too small to hold the entire value.</para>
            </returns>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="M:WindowsInstaller.MsiInterop.MsiGetSummaryInformation(System.Int32,System.String,System.UInt32,System.Int32@)">
            <summary>The <c>MsiGetSummaryInformation</c> function obtains a handle to the _SummaryInformation stream for an installer database. This function returns a handle that should be closed using <see cref="M:WindowsInstaller.MsiInterop.MsiCloseHandle(System.Int32)"/>.</summary>
            <param name="install">Handle to the installation provided to a DLL custom action or obtained through <see cref="M:WindowsInstaller.MsiInterop.MsiOpenPackage(System.String,System.Int32@)"/>, <see cref="M:WindowsInstaller.MsiInterop.MsiOpenPackageEx(System.String,WindowsInstaller.MsiOpenPackageFlags,System.Int32@)"/>, or <see cref="M:WindowsInstaller.MsiInterop.MsiOpenProduct(System.String,System.Int32@)"/>.</param>
            <param name="path">Specifies the path to the database. </param>
            <param name="updateCount">Specifies the maximum number of updated values.</param>
            <param name="summaryInfo">Pointer to the location from which to receive the summary information handle.</param>
            <returns>
            <para><see cref="F:WindowsInstaller.MsiError.Success"/>  The function succeeded.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InstallPackageInvalid"/>  The installation package is invalid.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InvalidHandle"/>  An invalid or inactive handle was supplied.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InvalidParameter"/>  One of the parameters was invalid.</para>
            </returns>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="M:WindowsInstaller.MsiInterop.MsiGetTargetPath(System.Int32,System.String,System.Text.StringBuilder,System.UInt32@)">
            <summary>The <c>MsiGetTargetPath</c> function returns the full target path for a folder in the Directory table.</summary>
            <param name="install">Handle to the installation provided to a DLL custom action or obtained through <see cref="M:WindowsInstaller.MsiInterop.MsiOpenPackage(System.String,System.Int32@)"/>, <see cref="M:WindowsInstaller.MsiInterop.MsiOpenPackageEx(System.String,WindowsInstaller.MsiOpenPackageFlags,System.Int32@)"/>, or <see cref="M:WindowsInstaller.MsiInterop.MsiOpenProduct(System.String,System.Int32@)"/>.</param>
            <param name="folder"> null-terminated string that specifies a record of the Directory table. If the directory is a root directory, this can be a value from the DefaultDir column. Otherwise it must be a value from the Directory column.</param>
            <param name="path">Pointer to the buffer that receives the null terminated full source path. Do not attempt to determine the size of the buffer by passing in a <c>null</c> for <c>path</c>. You can get the size of the buffer by passing in an empty string (for example ""). The function will then return <see cref="F:WindowsInstaller.MsiError.MoreData"/> and <c>pathSize</c> will contain the required buffer size in TCHARs, not including the terminating null character. On return of <see cref="F:WindowsInstaller.MsiError.Success"/>, <c>pathSize</c> contains the number of TCHARs written to the buffer, not including the terminating null character.</param>
            <param name="pathSize">Pointer to the variable that specifies the size, in TCHARs, of the buffer pointed to by the variable <c>path</c>. When the function returns <see cref="F:WindowsInstaller.MsiError.Success"/>, this variable contains the size of the data copied to <c>path</c>, not including the terminating null character. If <c>path</c> is not large enough, the function returns <see cref="F:WindowsInstaller.MsiError.MoreData"/> and stores the required size, not including the terminating null character, in the variable pointed to by <c>pathSize</c>.</param>
            <returns>
            <para><see cref="F:WindowsInstaller.MsiError.Success"/>  The function succeeded.</para>
            <para><see cref="F:WindowsInstaller.MsiError.Directory"/>  The directory specified was not found in the Directory table.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InvalidHandle"/>  An invalid or inactive handle was supplied.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InvalidParameter"/>  One of the parameters was invalid.</para>
            <para><see cref="F:WindowsInstaller.MsiError.MoreData"/>  The provided buffer was too small to hold the entire value.</para>
            </returns>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="M:WindowsInstaller.MsiInterop.MsiOpenDatabase(System.String,WindowsInstaller.MsiDbPersistMode,System.Int32@)">
            <summary>The <c>MsiOpenDatabase</c> function opens a database file for data access. This function returns a handle that should be closed using <see cref="M:WindowsInstaller.MsiInterop.MsiCloseHandle(System.Int32)"/>.</summary>
            <param name="path">Specifies the full path or relative path to the database file.</param>
            <param name="persist">Receives the full path to the file or the persistence mode.  You can use one of the constants from <see cref="!:MsiDbOpenPersistMode"/>.</param>
            <param name="handle">Pointer to the location of the returned database handle.</param>
            <returns>
            </returns>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="M:WindowsInstaller.MsiInterop.MsiPreviewBillboard(System.Int32,System.String,System.String)">
            <summary>The <c>MsiPreviewBillboard</c> function displays a billboard with the host control in the displayed dialog box.</summary>
            <param name="preview">Handle to the preview.</param>
            <param name="name">Specifies the name of the host control.</param>
            <param name="billboard">Specifies the name of the billboard to display.</param>
            <returns>
            <para><see cref="F:WindowsInstaller.MsiError.Success"/>  The function succeeded.</para>
            <para><see cref="F:WindowsInstaller.MsiError.FunctionFailed"/>  The function failed.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InvalidHandle"/>  An invalid or inactive handle was supplied.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InvalidParameter"/>  One of the parameters was invalid.</para>
            </returns>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="M:WindowsInstaller.MsiInterop.MsiPreviewDialog(System.Int32,System.String)">
            <summary>The <c>MsiPreviewDialog</c> function displays a dialog box as modeless and inactive.</summary>
            <param name="preview">Handle to the preview.</param>
            <param name="dialog">Specifies the name of the dialog box to preview.</param>
            <returns>
            <para><see cref="F:WindowsInstaller.MsiError.Success"/>  The function succeeded.</para>
            <para><see cref="F:WindowsInstaller.MsiError.FunctionFailed"/>  The function failed.</para>
            <para><see cref="F:WindowsInstaller.MsiError.FunctionNotCalled"/>  The function was not called.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InstallFailure"/>  The action failed.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InstallSuspend"/>  The user suspended the installation.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InstallUserExit"/>  The user canceled the action.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InvalidHandle"/>  An invalid or inactive handle was supplied.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InvalidParameter"/>  One of the parameters was invalid.</para>
            </returns>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="M:WindowsInstaller.MsiInterop.MsiProcessMessage(System.Int32,WindowsInstaller.MsiInstallMessage,System.Int32)">
            <summary>The <c>MsiProcessMessage</c> function sends an error record to the installer for processing.</summary>
            <param name="install">Handle to the installation provided to a DLL custom action or obtained through <see cref="M:WindowsInstaller.MsiInterop.MsiOpenPackage(System.String,System.Int32@)"/>, <see cref="M:WindowsInstaller.MsiInterop.MsiOpenPackageEx(System.String,WindowsInstaller.MsiOpenPackageFlags,System.Int32@)"/>, or <see cref="M:WindowsInstaller.MsiInterop.MsiOpenProduct(System.String,System.Int32@)"/>.</param>
            <param name="type">The <see cref="T:WindowsInstaller.MsiInstallMessage"/>.</param>
            <param name="record">Handle to a record containing message format and data.</param>
            <returns>
            <para><b>-1</b> An invalid parameter or handle was supplied.</para>
            <para><b>0</b> No action was taken.</para>
            <para>A <see cref="!:DialogResult"/>.</para>
            </returns>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="M:WindowsInstaller.MsiInterop.MsiRecordClearData(System.Int32)">
            <summary>The <c>MsiRecordClearData</c> function sets all fields in a record to <c>null</c>.</summary>
            <param name="record">Handle to the record.</param>
            <returns>
            <para><see cref="F:WindowsInstaller.MsiError.Success"/>  The function succeeded.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InvalidHandle"/>  An invalid or inactive handle was supplied.</para>
            </returns>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="M:WindowsInstaller.MsiInterop.MsiRecordDataSize(System.Int32,System.UInt32)">
            <summary>The <c>MsiRecordDataSize</c> function returns the length of a record field. The count does not include the terminating null character.</summary>
            <param name="record">Handle to the record.</param>
            <param name="field">Specifies a field of the record.</param>
            <returns>
            <para>The <c>MsiRecordDataSize</c> function returns 0 if the field is null, nonexistent, or an internal object pointer. The function also returns 0 if the handle is not a valid record handle.</para>
            <para>If the data is in integer format, the function returns sizeof(int).</para>
            <para>If the data is in string format, the function returns the character count (not including the null character).</para>
            <para>If the data is in stream format, the function returns the byte count.</para>
            </returns>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="M:WindowsInstaller.MsiInterop.MsiRecordGetFieldCount(System.Int32)">
            <summary>The <c>MsiRecordGetFieldCount</c> function returns the number of fields in a record.</summary>
            <param name="record">Handle to the record.</param>
            <returns>The count returned by the <c>MsiRecordGetFieldCount</c> parameter does not include field 0. Read access to fields beyond this count returns null values. Write access fails.</returns>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="M:WindowsInstaller.MsiInterop.MsiRecordGetInteger(System.Int32,System.UInt32)">
            <summary>The <c>MsiRecordGetInteger</c> function returns the integer value from a record field.</summary>
            <param name="record">Handle to the record.</param>
            <param name="field">Specifies a field of the record.</param>
            <returns>The MsiRecordGetInteger function returns <see cref="F:WindowsInstaller.MsiInterop.MsiNullInteger"/> if the field is null or if the field is a string that cannot be converted to an integer.</returns>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="M:WindowsInstaller.MsiInterop.MsiRecordGetString(System.Int32,System.UInt32,System.Text.StringBuilder,System.UInt32@)">
            <summary>The <c>MsiRecordGetString</c> function returns the string value of a record field.</summary>
            <param name="record">Handle to the record.</param>
            <param name="field">Specifies a field of the record.</param>
            <param name="value">Pointer to the buffer that receives the null terminated string containing the value of the record field. Do not attempt to determine the size of the buffer by passing in a <c>null</c> for <c>value</c>. You can get the size of the buffer by passing in an empty string (for example ""). The function will then return <see cref="F:WindowsInstaller.MsiError.MoreData"/> and <c>valueSize</c> will contain the required buffer size in TCHARs, not including the terminating null character. On return of <see cref="F:WindowsInstaller.MsiError.Success"/>, <c>valueSize</c> contains the number of TCHARs written to the buffer, not including the terminating null character.</param>
            <param name="valueSize">Pointer to the variable that specifies the size, in TCHARs, of the buffer pointed to by the variable <c>value</c>. When the function returns <see cref="F:WindowsInstaller.MsiError.Success"/>, this variable contains the size of the data copied to <c>value</c>, not including the terminating null character. If <c>value</c> is not large enough, the function returns <see cref="F:WindowsInstaller.MsiError.MoreData"/> and stores the required size, not including the terminating null character, in the variable pointed to by <c>valueSize</c>.</param>
            <returns>
            <para><see cref="F:WindowsInstaller.MsiError.Success"/>  The function succeeded.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InvalidHandle"/>  An invalid or inactive handle was supplied.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InvalidParameter"/>  One of the parameters was invalid.</para>
            <para><see cref="F:WindowsInstaller.MsiError.MoreData"/>  The provided buffer was too small to hold the entire value.</para>
            </returns>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="M:WindowsInstaller.MsiInterop.MsiRecordIsNull(System.Int32,System.UInt32)">
            <summary>The <c>MsiRecordIsNull</c> function reports whether a record field is <c>null</c>.</summary>
            <param name="record">Handle to the record.</param>
            <param name="field">Specifies a field of the record.</param>
            <returns><c>true</c>, if the function succeeded and the field is null or the field does not exist; otherwise, The function succeeded and the field is not null or the record handle is invalid.</returns>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="M:WindowsInstaller.MsiInterop.MsiRecordReadStream(System.Int32,System.UInt32,System.Text.StringBuilder,System.UInt32@)">
            <summary>The <c>MsiRecordReadStream</c> function reads bytes from a record stream field into a buffer.</summary>
            <param name="record">Handle to the record.</param>
            <param name="field">Specifies a field of the record.</param>
            <param name="buffer">A buffer to receive the stream field. You should ensure the destination buffer is the same size or larger than the source buffer.</param>
            <param name="bufferSize">Specifies the in and out buffer count. On input, this is the full size of the buffer. On output, this is the number of bytes that were actually written to the buffer.</param>
            <returns>
            <para><see cref="F:WindowsInstaller.MsiError.Success"/>  The function succeeded.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InvalidDataType"/>  The field is not a stream column.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InvalidHandle"/>  An invalid or inactive handle was supplied.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InvalidParameter"/>  One of the parameters was invalid.</para>
            </returns>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="M:WindowsInstaller.MsiInterop.MsiRecordSetInteger(System.Int32,System.UInt32,System.Int32)">
            <summary>The MsiRecordSetInteger function sets a record field to an integer field.</summary>
            <param name="record">Handle to the record.</param>
            <param name="field">Specifies a field of the record.</param>
            <param name="value">Specifies the value to which to set the field.</param>
            <returns>
            <para><see cref="F:WindowsInstaller.MsiError.Success"/>  The function succeeded.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InvalidField"/>  An invalid field of the record was supplied.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InvalidHandle"/>  An invalid or inactive handle was supplied.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InvalidParameter"/>  One of the parameters was invalid.</para>
            </returns>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="M:WindowsInstaller.MsiInterop.MsiRecordSetStream(System.Int32,System.UInt32,System.String)">
            <summary>The <c>MsiRecordSetStream</c> function sets a record stream field from a file. Stream data cannot be inserted into temporary fields.</summary>
            <param name="record">Handle to the record.</param>
            <param name="field">Specifies a field of the record.</param>
            <param name="path">Specifies the path to the file containing the stream.</param>
            <returns>
            <para><see cref="F:WindowsInstaller.MsiError.Success"/>  The function succeeded.</para>
            <para><see cref="F:WindowsInstaller.MsiError.BadPathName"/>  An invalid path was supplied.</para>
            <para><see cref="F:WindowsInstaller.MsiError.FunctionFailed"/>  The function failed.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InvalidHandle"/>  An invalid or inactive handle was supplied.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InvalidParameter"/>  One of the parameters was invalid.</para>
            </returns>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="M:WindowsInstaller.MsiInterop.MsiRecordSetString(System.Int32,System.UInt32,System.String)">
            <summary>The <c>MsiRecordSetString</c> function copies a string into the designated field.</summary>
            <param name="record">Handle to the record.</param>
            <param name="field">Specifies a field of the record.</param>
            <param name="value">Specifies the string value of the field.</param>
            <returns>
            <para><see cref="F:WindowsInstaller.MsiError.Success"/>  The function succeeded.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InvalidHandle"/>  An invalid or inactive handle was supplied.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InvalidParameter"/>  One of the parameters was invalid.</para>
            </returns>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="M:WindowsInstaller.MsiInterop.MsiSequence(System.Int32,System.String,System.Int32)">
            <summary>The <c>MsiSequence</c> function executes another action sequence, as described in the specified table.</summary>
            <param name="install">Handle to the installation provided to a DLL custom action or obtained through <see cref="M:WindowsInstaller.MsiInterop.MsiOpenPackage(System.String,System.Int32@)"/>, <see cref="M:WindowsInstaller.MsiInterop.MsiOpenPackageEx(System.String,WindowsInstaller.MsiOpenPackageFlags,System.Int32@)"/>, or <see cref="M:WindowsInstaller.MsiInterop.MsiOpenProduct(System.String,System.Int32@)"/>.</param>
            <param name="table">Specifies the name of the table containing the action sequence.</param>
            <param name="mode">This parameter is currently unimplemented. It is reserved for future use and must be 0.</param>
            <returns>
            <para><see cref="F:WindowsInstaller.MsiError.Success"/>  The function succeeded.</para>
            <para><see cref="F:WindowsInstaller.MsiError.FunctionFailed"/>  The function failed.</para>
            <para><see cref="F:WindowsInstaller.MsiError.FunctionNotCalled"/>  The function was not called.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InstallFailure"/>  The action failed.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InstallSuspend"/>  The user suspended the installation.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InstallUserExit"/>  The user canceled the action.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InvalidHandle"/>  An invalid or inactive handle was supplied.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InvalidHandleState"/>  The handle is in an invalid state.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InvalidParameter"/>  One of the parameters was invalid.</para>
            </returns>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="M:WindowsInstaller.MsiInterop.MsiSetComponentState(System.Int32,System.String,WindowsInstaller.MsiInstallState)">
            <summary>The <c>MsiSetComponentState</c> function sets a component to the requested state.</summary>
            <param name="install">Handle to the installation provided to a DLL custom action or obtained through <see cref="M:WindowsInstaller.MsiInterop.MsiOpenPackage(System.String,System.Int32@)"/>, <see cref="M:WindowsInstaller.MsiInterop.MsiOpenPackageEx(System.String,WindowsInstaller.MsiOpenPackageFlags,System.Int32@)"/>, or <see cref="M:WindowsInstaller.MsiInterop.MsiOpenProduct(System.String,System.Int32@)"/>.</param>
            <param name="component">Specifies the name of the component.</param>
            <param name="state">Specifies the state to set.</param>
            <returns>
            <para><see cref="F:WindowsInstaller.MsiError.Success"/>  The function succeeded.</para>
            <para><see cref="F:WindowsInstaller.MsiError.FunctionFailed"/>  The function failed.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InstallUserExit"/>  The user canceled the action.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InvalidHandle"/>  An invalid or inactive handle was supplied.</para>
            <para><see cref="F:WindowsInstaller.MsiError.UnknownComponent"/>  An unknown component was requested.</para>
            </returns>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="M:WindowsInstaller.MsiInterop.MsiSetFeatureAttributes(System.Int32,System.String,WindowsInstaller.MsiInstallFeatureAttribute)">
            <summary>The <c>MsiSetFeatureAttributes</c> function can modify the default attributes of a feature at runtime. Note that the default attributes of features are authored in the Attributes column of the Feature table.</summary>
            <param name="install">Handle to the installation provided to a DLL custom action or obtained through <see cref="M:WindowsInstaller.MsiInterop.MsiOpenPackage(System.String,System.Int32@)"/>, <see cref="M:WindowsInstaller.MsiInterop.MsiOpenPackageEx(System.String,WindowsInstaller.MsiOpenPackageFlags,System.Int32@)"/>, or <see cref="M:WindowsInstaller.MsiInterop.MsiOpenProduct(System.String,System.Int32@)"/>.</param>
            <param name="feature">Specifies the feature name within the product.</param>
            <param name="attributes">Feature attributes specified at run time.  (Bit flags)</param>
            <returns>
            <para><see cref="F:WindowsInstaller.MsiError.Success"/>  The function succeeded.</para>
            <para><see cref="F:WindowsInstaller.MsiError.FunctionFailed"/>  The function failed.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InvalidHandle"/>  An invalid or inactive handle was supplied.</para>
            <para><see cref="F:WindowsInstaller.MsiError.UnknownFeature"/>  The feature is not known.</para>
            </returns>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="M:WindowsInstaller.MsiInterop.MsiSetFeatureState(System.Int32,System.String,WindowsInstaller.MsiInstallState)">
            <summary>The <c>	MsiSetFeatureState</c> function sets a feature to a specified state.</summary>
            <param name="install">Handle to the installation provided to a DLL custom action or obtained through <see cref="M:WindowsInstaller.MsiInterop.MsiOpenPackage(System.String,System.Int32@)"/>, <see cref="M:WindowsInstaller.MsiInterop.MsiOpenPackageEx(System.String,WindowsInstaller.MsiOpenPackageFlags,System.Int32@)"/>, or <see cref="M:WindowsInstaller.MsiInterop.MsiOpenProduct(System.String,System.Int32@)"/>.</param>
            <param name="feature">Specifies the feature name within the product.</param>
            <param name="state">Specifies the state to set.</param>
            <returns>
            <para><see cref="F:WindowsInstaller.MsiError.Success"/>  The function succeeded.</para>
            <para><see cref="F:WindowsInstaller.MsiError.FunctionFailed"/>  The function failed.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InvalidHandle"/>  An invalid or inactive handle was supplied.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InvalidParameter"/>  One of the parameters was invalid.</para>
            <para><see cref="F:WindowsInstaller.MsiError.UnknownFeature"/>  The feature is not known.</para>
            </returns>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="M:WindowsInstaller.MsiInterop.MsiSetInstallLevel(System.Int32,System.Int32)">
            <summary>The <c>MsiSetInstallLevel</c> function sets the installation level for a full product installation.</summary>
            <param name="install">Handle to the installation provided to a DLL custom action or obtained through <see cref="M:WindowsInstaller.MsiInterop.MsiOpenPackage(System.String,System.Int32@)"/>, <see cref="M:WindowsInstaller.MsiInterop.MsiOpenPackageEx(System.String,WindowsInstaller.MsiOpenPackageFlags,System.Int32@)"/>, or <see cref="M:WindowsInstaller.MsiInterop.MsiOpenProduct(System.String,System.Int32@)"/>.</param>
            <param name="level">Specifies the installation level.</param>
            <returns>
            <para><see cref="F:WindowsInstaller.MsiError.Success"/>  The function succeeded.</para>
            <para><see cref="F:WindowsInstaller.MsiError.FunctionFailed"/>  The function failed.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InvalidHandle"/>  An invalid or inactive handle was supplied.</para>
            </returns>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="M:WindowsInstaller.MsiInterop.MsiSetMode(System.Int32,WindowsInstaller.MsiRunMode,System.Boolean)">
            <summary>The <c>MsiSetMode</c> function sets an internal engine Boolean state.</summary>
            <param name="install">Handle to the installation provided to a DLL custom action or obtained through <see cref="M:WindowsInstaller.MsiInterop.MsiOpenPackage(System.String,System.Int32@)"/>, <see cref="M:WindowsInstaller.MsiInterop.MsiOpenPackageEx(System.String,WindowsInstaller.MsiOpenPackageFlags,System.Int32@)"/>, or <see cref="M:WindowsInstaller.MsiInterop.MsiOpenProduct(System.String,System.Int32@)"/>.</param>
            <param name="mode">The <see cref="T:WindowsInstaller.MsiRunMode"/>.  Only <see cref="F:WindowsInstaller.MsiRunMode.RebootAtEnd"/> and <see cref="F:WindowsInstaller.MsiRunMode.RebootNow"/> are supported.</param>
            <param name="state">Specifies the state to set to <c>true</c> or <c>false</c>.</param>
            <returns>
            <para><see cref="F:WindowsInstaller.MsiError.Success"/>  The function succeeded.</para>
            <para><see cref="F:WindowsInstaller.MsiError.AccessDenied"/>  Access was denied.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InvalidHandle"/>  An invalid or inactive handle was supplied.</para>
            </returns>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="M:WindowsInstaller.MsiInterop.MsiSetProperty(System.Int32,System.String,System.String)">
            <summary>The <c>MsiSetProperty</c> function sets the value for an installation property.</summary>
            <param name="install">Handle to the installation provided to a DLL custom action or obtained through <see cref="M:WindowsInstaller.MsiInterop.MsiOpenPackage(System.String,System.Int32@)"/>, <see cref="M:WindowsInstaller.MsiInterop.MsiOpenPackageEx(System.String,WindowsInstaller.MsiOpenPackageFlags,System.Int32@)"/>, or <see cref="M:WindowsInstaller.MsiInterop.MsiOpenProduct(System.String,System.Int32@)"/>.</param>
            <param name="name">Specifies the name of the property.</param>
            <param name="value">Specifies the value of the property.</param>
            <returns>
            <para><see cref="F:WindowsInstaller.MsiError.Success"/>  The function succeeded.</para>
            <para><see cref="F:WindowsInstaller.MsiError.FunctionFailed"/>  The function failed.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InvalidHandle"/>  An invalid or inactive handle was supplied.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InvalidParameter"/>  One of the parameters was invalid.</para>
            </returns>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="M:WindowsInstaller.MsiInterop.MsiSetTargetPath(System.Int32,System.String,System.String)">
            <summary>The <c>MsiSetTargetPath</c> function sets the full target path for a folder in the Directory table.</summary>
            <param name="install">Handle to the installation provided to a DLL custom action or obtained through <see cref="M:WindowsInstaller.MsiInterop.MsiOpenPackage(System.String,System.Int32@)"/>, <see cref="M:WindowsInstaller.MsiInterop.MsiOpenPackageEx(System.String,WindowsInstaller.MsiOpenPackageFlags,System.Int32@)"/>, or <see cref="M:WindowsInstaller.MsiInterop.MsiOpenProduct(System.String,System.Int32@)"/>.</param>
            <param name="folder">Specifies the folder identifier. This is a primary key in the Directory table.</param>
            <param name="path">Specifies the full path for the folder, ending in a directory separator.</param>
            <returns>
            <para><see cref="F:WindowsInstaller.MsiError.Success"/>  The function succeeded.</para>
            <para><see cref="F:WindowsInstaller.MsiError.Directory"/>  The directory specified was not found in the Directory table.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InvalidHandle"/>  An invalid or inactive handle was supplied.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InvalidParameter"/>  One of the parameters was invalid.</para>
            </returns>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="M:WindowsInstaller.MsiInterop.MsiSummaryInfoGetProperty(System.Int32,System.UInt32,WindowsInstaller.VariantType@,System.Int32@,WindowsInstaller.FILETIME@,System.Text.StringBuilder,System.Int32@)">
            <summary>The <c>MsiSummaryInfoGetProperty</c> function gets a single property from the summary information.</summary>
            <param name="summaryInfo">Handle to summary information.</param>
            <param name="id">Specifies the property ID.</param>
            <param name="type">Receives the returned property type.</param>
            <param name="intValue">Receives the returned integer property data.</param>
            <param name="fileTime">Pointer to a file value.</param>
            <param name="value">Pointer to the buffer that receives the null terminated summary information property value. Do not attempt to determine the size of the buffer by passing in a <c>null</c> for <c>value</c>. You can get the size of the buffer by passing in an empty string (for example ""). The function will then return <see cref="F:WindowsInstaller.MsiError.MoreData"/> and <c>valueSize</c> will contain the required buffer size in TCHARs, not including the terminating null character. On return of <see cref="F:WindowsInstaller.MsiError.Success"/>, <c>valueSize</c> contains the number of TCHARs written to the buffer, not including the terminating null character. This parameter is an empty string if there are no errors.</param>
            <param name="valueSize">Pointer to the variable that specifies the size, in TCHARs, of the buffer pointed to by the variable <c>value</c>. When the function returns <see cref="F:WindowsInstaller.MsiError.Success"/>, this variable contains the size of the data copied to <c>value</c>, not including the terminating null character. If <c>value</c> is not large enough, the function returns <see cref="F:WindowsInstaller.MsiError.MoreData"/> and stores the required size, not including the terminating null character, in the variable pointed to by <c>valueSize</c>.</param>
            <returns>
            <para><see cref="F:WindowsInstaller.MsiError.Success"/>  The function succeeded.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InvalidHandle"/>  An invalid or inactive handle was supplied.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InvalidParameter"/>  One of the parameters was invalid.</para>
            <para><see cref="F:WindowsInstaller.MsiError.MoreData"/>  The buffer passed in was too small to hold the entire value. </para>
            <para><see cref="F:WindowsInstaller.MsiError.UnknownProperty"/>  The property is unknown.</para>
            </returns>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="M:WindowsInstaller.MsiInterop.MsiSummaryInfoGetPropertyCount(System.Int32,System.Int32@)">
            <summary>The <c>MsiSummaryInfoGetPropertyCount</c> function returns the number of existing properties in the summary information stream.</summary>
            <param name="summaryInfo">Handle to summary information.</param>
            <param name="count">Location to receive the total property count.</param>
            <returns>
            <para><see cref="F:WindowsInstaller.MsiError.Success"/>  The function succeeded.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InvalidHandle"/>  An invalid or inactive handle was supplied.</para>
            </returns>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="M:WindowsInstaller.MsiInterop.MsiSummaryInfoPersist(System.Int32)">
            <summary>The <c>MsiSummaryInfoPersist</c> function writes changed summary information back to the summary information stream.</summary>
            <param name="summaryInfo">Handle to summary information.</param>
            <returns>
            <para><see cref="F:WindowsInstaller.MsiError.Success"/>  The function succeeded.</para>
            <para><see cref="F:WindowsInstaller.MsiError.FunctionFailed"/>  The function failed.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InvalidHandle"/>  An invalid or inactive handle was supplied.</para>
            </returns>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="M:WindowsInstaller.MsiInterop.MsiSummaryInfoSetProperty(System.Int32,System.UInt32,WindowsInstaller.VariantType,System.Int32,WindowsInstaller.FILETIME,System.String)">
            <summary>The <c>MsiSummaryInfoSetProperty</c> function sets a single summary information property.</summary>
            <param name="summaryInfo">Handle to summary information.</param>
            <param name="id">Specifies the property to set.</param>
            <param name="type">Specifies the type of property to set.</param>
            <param name="intValue">Specifies the integer value.</param>
            <param name="fileTime">Specifies the file-time value.</param>
            <param name="value">Specifies the text value. </param>
            <returns>
            <para><see cref="F:WindowsInstaller.MsiError.Success"/>  The function succeeded.</para>
            <para><see cref="F:WindowsInstaller.MsiError.DatatypeMismatch"/>  The data types were mismatched.</para>
            <para><see cref="F:WindowsInstaller.MsiError.FunctionFailed"/>  The function failed.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InvalidHandle"/>  An invalid or inactive handle was supplied.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InvalidParameter"/>  One of the parameters was invalid.</para>
            <para><see cref="F:WindowsInstaller.MsiError.UnknownProperty"/>  The property is unknown.</para>
            <para><see cref="F:WindowsInstaller.MsiError.UnsupportedType"/>  The type is unsupported.</para>
            </returns>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="M:WindowsInstaller.MsiInterop.MsiVerifyDiskSpace(System.Int32)">
            <summary>The <c>MsiVerifyDiskSpace</c> function checks to see if sufficient disk space is present for the current installation.</summary>
            <param name="install">Handle to the installation provided to a DLL custom action or obtained through <see cref="M:WindowsInstaller.MsiInterop.MsiOpenPackage(System.String,System.Int32@)"/>, <see cref="M:WindowsInstaller.MsiInterop.MsiOpenPackageEx(System.String,WindowsInstaller.MsiOpenPackageFlags,System.Int32@)"/>, or <see cref="M:WindowsInstaller.MsiInterop.MsiOpenProduct(System.String,System.Int32@)"/>.</param>
            <returns>
            <para><see cref="F:WindowsInstaller.MsiError.Success"/>  The function succeeded.</para>
            <para><see cref="F:WindowsInstaller.MsiError.DiskFull"/>  The disk is full.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InvalidHandle"/>  An invalid or inactive handle was supplied.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InvalidHandleState"/>  The handle is in an invalid state.</para>
            </returns>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="M:WindowsInstaller.MsiInterop.MsiViewClose(System.Int32)">
            <summary>The <c>MsiViewClose</c> function releases the result set for an executed view. </summary>
            <param name="view">Handle to a view that is set to release.</param>
            <returns>
            <para><see cref="F:WindowsInstaller.MsiError.Success"/>  The function succeeded.</para>
            <para><see cref="F:WindowsInstaller.MsiError.FunctionFailed"/>  The function failed.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InvalidHandle"/>  An invalid or inactive handle was supplied.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InvalidHandleState"/>  The handle is in an invalid state.</para>
            </returns>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="M:WindowsInstaller.MsiInterop.MsiViewExecute(System.Int32,System.Int32)">
            <summary>The <c>MsiViewExecute</c> function executes a SQL view query and supplies any required parameters. The query uses the question mark token to represent parameters as described in SQL Syntax. The values of these parameters are passed in as the corresponding fields of a parameter record.</summary>
            <param name="view">Handle to the view upon which to execute the query.</param>
            <param name="record">Handle to a record that supplies the parameters. This parameter contains values to replace the parameter tokens in the SQL query. It is optional, so hRecord can be <c>IntPtr.Zero</c>.</param>
            <returns>
            <para><see cref="F:WindowsInstaller.MsiError.Success"/>  The function succeeded.</para>
            <para><see cref="F:WindowsInstaller.MsiError.FunctionFailed"/>  The function failed.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InvalidHandle"/>  An invalid or inactive handle was supplied.</para>
            </returns>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="M:WindowsInstaller.MsiInterop.MsiViewFetch(System.Int32,System.Int32@)">
            <summary>The <c>MsiViewFetch</c> function fetches the next sequential record from the view. This function returns a handle that should be closed using <see cref="M:WindowsInstaller.MsiInterop.MsiCloseHandle(System.Int32)"/>.</summary>
            <param name="view">Handle to the view to fetch from.</param>
            <param name="record">Pointer to the handle for the fetched record.</param>
            <returns>
            <para><see cref="F:WindowsInstaller.MsiError.Success"/>  The function succeeded.</para>
            <para><see cref="F:WindowsInstaller.MsiError.FunctionFailed"/>  The function failed.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InvalidHandle"/>  An invalid or inactive handle was supplied.</para>
            </returns>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="M:WindowsInstaller.MsiInterop.MsiViewGetColumnInfo(System.Int32,WindowsInstaller.MsiColInfoType,System.Int32@)">
            <summary>The <c>MsiViewGetColumnInfo</c> function returns a record containing column names or definitions. This function returns a handle that should be closed using <see cref="M:WindowsInstaller.MsiInterop.MsiCloseHandle(System.Int32)"/>.</summary>
            <param name="view">Handle to the view from which to obtain column information.</param>
            <param name="type">Specifies a flag indicating what type of information is needed.</param>
            <param name="record">Pointer to a handle to receive the column information data record.</param>
            <returns>
            <para><see cref="F:WindowsInstaller.MsiError.Success"/>  The function succeeded.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InvalidHandle"/>  An invalid or inactive handle was supplied.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InvalidHandleState"/>  The handle is in an invalid state.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InvalidParameter"/>  One of the parameters was invalid.</para>
            </returns>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="M:WindowsInstaller.MsiInterop.MsiViewGetError(System.Int32,System.Text.StringBuilder,System.UInt32@)">
            <summary>The <c>MsiViewGetError</c> function returns the error that occurred in the <see cref="M:WindowsInstaller.MsiInterop.MsiViewModify(System.Int32,WindowsInstaller.MsiModify,System.Int32)"/> function.</summary>
            <param name="view">Handle to the view.</param>
            <param name="columnNames">Pointer to the buffer that receives the null-terminated column name. Do not attempt to determine the size of the buffer by passing in a <c>null</c> for <c>columnNames</c>. You can get the size of the buffer by passing in an empty string (for example ""). The function will then return <see cref="F:WindowsInstaller.MsiDbError.MoreData"/> and <c>columnNamesSize</c> will contain the required buffer size in TCHARs, not including the terminating null character. On return of <see cref="F:WindowsInstaller.MsiDbError.NoError"/>, <c>columnNamesSize</c> contains the number of TCHARs written to the buffer, not including the terminating null character. This parameter is an empty string if there are no errors.</param>
            <param name="columnNamesSize">Pointer to the variable that specifies the size, in TCHARs, of the buffer pointed to by the variable <c>columnNames</c>. When the function returns <see cref="F:WindowsInstaller.MsiDbError.NoError"/>, this variable contains the size of the data copied to <c>columnNames</c>, not including the terminating null character. If <c>columnNames</c> is not large enough, the function returns <see cref="F:WindowsInstaller.MsiDbError.MoreData"/> and stores the required size, not including the terminating null character, in the variable pointed to by <c>columnNamesSize</c>.</param>
            <returns>The <see cref="T:WindowsInstaller.MsiDbError"/></returns>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="M:WindowsInstaller.MsiInterop.MsiViewModify(System.Int32,WindowsInstaller.MsiModify,System.Int32)">
            <summary>The MsiViewModify function updates a fetched record.</summary>
            <param name="view">Handle to a view.</param>
            <param name="mode">Specifies the modify mode.</param>
            <param name="record">Handle to the record to modify.</param>
            <returns>
            <para><see cref="F:WindowsInstaller.MsiError.Success"/>  The function succeeded.</para>
            <para><see cref="F:WindowsInstaller.MsiError.FunctionFailed"/>  The function failed.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InvalidData"/>  A validation was requested and the data did not pass. For more information, call <see cref="M:WindowsInstaller.MsiInterop.MsiViewGetError(System.Int32,System.Text.StringBuilder,System.UInt32@)"/>.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InvalidHandle"/>  An invalid or inactive handle was supplied.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InvalidHandleState"/>  The handle is in an invalid state.</para>
            <para><see cref="F:WindowsInstaller.MsiError.InvalidParameter"/>  One of the parameters was invalid.</para>
            </returns>
            <remarks>Please refer to the MSDN documentation for more information.</remarks>
        </member>
        <member name="T:Dapper.CommandFlags">
            <summary>
            Additional state flags that control command behaviour
            </summary>
        </member>
        <member name="F:Dapper.CommandFlags.None">
            <summary>
            No additional flags
            </summary>
        </member>
        <member name="F:Dapper.CommandFlags.Buffered">
            <summary>
            Should data be buffered before returning?
            </summary>
        </member>
        <member name="F:Dapper.CommandFlags.Pipelined">
            <summary>
            Can async queries be pipelined?
            </summary>
        </member>
        <member name="F:Dapper.CommandFlags.NoCache">
            <summary>
            Should the plan cache be bypassed?
            </summary>
        </member>
        <member name="T:Dapper.CommandDefinition">
            <summary>
            Represents the key aspects of a sql operation
            </summary>
        </member>
        <member name="P:Dapper.CommandDefinition.CommandText">
            <summary>
            The command (sql or a stored-procedure name) to execute
            </summary>
        </member>
        <member name="P:Dapper.CommandDefinition.Parameters">
            <summary>
            The parameters associated with the command
            </summary>
        </member>
        <member name="P:Dapper.CommandDefinition.Transaction">
            <summary>
            The active transaction for the command
            </summary>
        </member>
        <member name="P:Dapper.CommandDefinition.CommandTimeout">
            <summary>
            The effective timeout for the command
            </summary>
        </member>
        <member name="P:Dapper.CommandDefinition.CommandType">
            <summary>
            The type of command that the command-text represents
            </summary>
        </member>
        <member name="P:Dapper.CommandDefinition.Buffered">
            <summary>
            Should data be buffered before returning?
            </summary>
        </member>
        <member name="P:Dapper.CommandDefinition.AddToCache">
            <summary>
            Should the plan for this query be cached?
            </summary>
        </member>
        <member name="P:Dapper.CommandDefinition.Flags">
            <summary>
            Additional state flags against this command
            </summary>
        </member>
        <member name="P:Dapper.CommandDefinition.Pipelined">
            <summary>
            Can async queries be pipelined?
            </summary>
        </member>
        <member name="M:Dapper.CommandDefinition.#ctor(System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType},Dapper.CommandFlags)">
            <summary>
            Initialize the command definition
            </summary>
        </member>
        <member name="T:Dapper.SqlMapper">
            <summary>
            Dapper, a light weight object mapper for ADO.NET
            </summary>
        </member>
        <member name="T:Dapper.SqlMapper.IDynamicParameters">
            <summary>
            Implement this interface to pass an arbitrary db specific set of parameters to Dapper
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.IDynamicParameters.AddParameters(System.Data.IDbCommand,Dapper.SqlMapper.Identity)">
            <summary>
            Add all the parameters needed to the command just before it executes
            </summary>
            <param name="command">The raw command prior to execution</param>
            <param name="identity">Information about the query</param>
        </member>
        <member name="T:Dapper.SqlMapper.IParameterLookup">
            <summary>
            Extends IDynamicParameters providing by-name lookup of parameter values
            </summary>
        </member>
        <member name="P:Dapper.SqlMapper.IParameterLookup.Item(System.String)">
            <summary>
            Get the value of the specified parameter (return null if not found)
            </summary>
        </member>
        <member name="T:Dapper.SqlMapper.IParameterCallbacks">
            <summary>
            Extends IDynamicParameters with facilities for executing callbacks after commands have completed
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.IParameterCallbacks.OnCompleted">
            <summary>
            Invoked when the command has executed
            </summary>
        </member>
        <member name="T:Dapper.SqlMapper.ICustomQueryParameter">
            <summary>
            Implement this interface to pass an arbitrary db specific parameter to Dapper
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.ICustomQueryParameter.AddParameter(System.Data.IDbCommand,System.String)">
            <summary>
            Add the parameter needed to the command before it executes
            </summary>
            <param name="command">The raw command prior to execution</param>
            <param name="name">Parameter name</param>
        </member>
        <member name="T:Dapper.SqlMapper.ITypeHandler">
            <summary>
            Implement this interface to perform custom type-based parameter handling and value parsing
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.ITypeHandler.SetValue(System.Data.IDbDataParameter,System.Object)">
            <summary>
            Assign the value of a parameter before a command executes
            </summary>
            <param name="parameter">The parameter to configure</param>
            <param name="value">Parameter value</param>
        </member>
        <member name="M:Dapper.SqlMapper.ITypeHandler.Parse(System.Type,System.Object)">
            <summary>
            Parse a database value back to a typed value
            </summary>
            <param name="value">The value from the database</param>
            <param name="destinationType">The type to parse to</param>
            <returns>The typed value</returns>
        </member>
        <member name="T:Dapper.SqlMapper.UdtTypeHandler">
            <summary>
            A type handler for data-types that are supported by the underlying provider, but which need
            a well-known UdtTypeName to be specified
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.UdtTypeHandler.#ctor(System.String)">
            <summary>
            Creates a new instance of UdtTypeHandler with the specified UdtTypeName
            </summary>
        </member>
        <member name="T:Dapper.SqlMapper.TypeHandler`1">
            <summary>
            Base-class for simple type-handlers
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.TypeHandler`1.SetValue(System.Data.IDbDataParameter,`0)">
            <summary>
            Assign the value of a parameter before a command executes
            </summary>
            <param name="parameter">The parameter to configure</param>
            <param name="value">Parameter value</param>
        </member>
        <member name="M:Dapper.SqlMapper.TypeHandler`1.Parse(System.Object)">
            <summary>
            Parse a database value back to a typed value
            </summary>
            <param name="value">The value from the database</param>
            <returns>The typed value</returns>
        </member>
        <member name="T:Dapper.SqlMapper.ITypeMap">
            <summary>
            Implement this interface to change default mapping of reader columns to type members
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.ITypeMap.FindConstructor(System.String[],System.Type[])">
            <summary>
            Finds best constructor
            </summary>
            <param name="names">DataReader column names</param>
            <param name="types">DataReader column types</param>
            <returns>Matching constructor or default one</returns>
        </member>
        <member name="M:Dapper.SqlMapper.ITypeMap.FindExplicitConstructor">
            <summary>
            Returns a constructor which should *always* be used.
            
            Parameters will be default values, nulls for reference types and zero'd for value types.
            
            Use this class to force object creation away from parameterless constructors you don't control.
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.ITypeMap.GetConstructorParameter(System.Reflection.ConstructorInfo,System.String)">
            <summary>
            Gets mapping for constructor parameter
            </summary>
            <param name="constructor">Constructor to resolve</param>
            <param name="columnName">DataReader column name</param>
            <returns>Mapping implementation</returns>
        </member>
        <member name="M:Dapper.SqlMapper.ITypeMap.GetMember(System.String)">
            <summary>
            Gets member mapping for column
            </summary>
            <param name="columnName">DataReader column name</param>
            <returns>Mapping implementation</returns>
        </member>
        <member name="T:Dapper.SqlMapper.IMemberMap">
            <summary>
            Implements this interface to provide custom member mapping
            </summary>
        </member>
        <member name="P:Dapper.SqlMapper.IMemberMap.ColumnName">
            <summary>
            Source DataReader column name
            </summary>
        </member>
        <member name="P:Dapper.SqlMapper.IMemberMap.MemberType">
            <summary>
             Target member type
            </summary>
        </member>
        <member name="P:Dapper.SqlMapper.IMemberMap.Property">
            <summary>
            Target property
            </summary>
        </member>
        <member name="P:Dapper.SqlMapper.IMemberMap.Field">
            <summary>
            Target field
            </summary>
        </member>
        <member name="P:Dapper.SqlMapper.IMemberMap.Parameter">
            <summary>
            Target constructor parameter
            </summary>
        </member>
        <member name="T:Dapper.SqlMapper.Link`2">
            <summary>
            This is a micro-cache; suitable when the number of terms is controllable (a few hundred, for example),
            and strictly append-only; you cannot change existing values. All key matches are on **REFERENCE**
            equality. The type is fully thread-safe.
            </summary>
        </member>
        <member name="E:Dapper.SqlMapper.QueryCachePurged">
            <summary>
            Called if the query cache is purged via PurgeQueryCache
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.PurgeQueryCache">
            <summary>
            Purge the query cache 
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.GetCachedSQLCount">
            <summary>
            Return a count of all the cached queries by dapper
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dapper.SqlMapper.GetCachedSQL(System.Int32)">
            <summary>
            Return a list of all the queries cached by dapper
            </summary>
            <param name="ignoreHitCountAbove"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.SqlMapper.GetHashCollissions">
            <summary>
            Deep diagnostics only: find any hash collisions in the cache
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dapper.SqlMapper.ResetTypeHandlers">
            <summary>
            Clear the registered type handlers
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.AddTypeMap(System.Type,System.Data.DbType)">
            <summary>
            Configure the specified type to be mapped to a given db-type
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.AddTypeHandler(System.Type,Dapper.SqlMapper.ITypeHandler)">
            <summary>
            Configure the specified type to be processed by a custom handler
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.AddTypeHandlerImpl(System.Type,Dapper.SqlMapper.ITypeHandler,System.Boolean)">
            <summary>
            Configure the specified type to be processed by a custom handler
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.AddTypeHandler``1(Dapper.SqlMapper.TypeHandler{``0})">
            <summary>
            Configure the specified type to be processed by a custom handler
            </summary>
        </member>
        <member name="T:Dapper.SqlMapper.TypeHandlerCache`1">
            <summary>
            Not intended for direct usage
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.TypeHandlerCache`1.Parse(System.Object)">
            <summary>
            Not intended for direct usage
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.TypeHandlerCache`1.SetValue(System.Data.IDbDataParameter,System.Object)">
            <summary>
            Not intended for direct usage
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.GetDbType(System.Object)">
            <summary>
            Get the DbType that maps to a given value
            </summary>
        </member>
        <member name="T:Dapper.SqlMapper.Identity">
            <summary>
            Identity of a cached query in Dapper, used for extensibility
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.Identity.ForDynamicParameters(System.Type)">
            <summary>
            Create an identity for use with DynamicParameters, internal use only
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.SqlMapper.Identity.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="F:Dapper.SqlMapper.Identity.sql">
            <summary>
            The sql
            </summary>
        </member>
        <member name="F:Dapper.SqlMapper.Identity.commandType">
            <summary>
            The command type 
            </summary>
        </member>
        <member name="F:Dapper.SqlMapper.Identity.hashCode">
            <summary>
            
            </summary>
        </member>
        <member name="F:Dapper.SqlMapper.Identity.gridIndex">
            <summary>
            
            </summary>
        </member>
        <member name="F:Dapper.SqlMapper.Identity.type">
            <summary>
            
            </summary>
        </member>
        <member name="F:Dapper.SqlMapper.Identity.connectionString">
            <summary>
            
            </summary>
        </member>
        <member name="F:Dapper.SqlMapper.Identity.parametersType">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.Identity.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dapper.SqlMapper.Identity.Equals(Dapper.SqlMapper.Identity)">
            <summary>
            Compare 2 Identity objects
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.SqlMapper.AsList``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Obtains the data as a list; if it is *already* a list, the original object is returned without
            any duplication; otherwise, ToList() is invoked.
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.Execute(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Execute parameterized SQL  
            </summary>
            <returns>Number of rows affected</returns>
        </member>
        <member name="M:Dapper.SqlMapper.Execute(System.Data.IDbConnection,Dapper.CommandDefinition)">
            <summary>
            Execute parameterized SQL  
            </summary>
            <returns>Number of rows affected</returns>
        </member>
        <member name="M:Dapper.SqlMapper.ExecuteScalar(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Execute parameterized SQL that selects a single value
            </summary>
            <returns>The first cell selected</returns>
        </member>
        <member name="M:Dapper.SqlMapper.ExecuteScalar``1(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Execute parameterized SQL that selects a single value
            </summary>
            <returns>The first cell selected</returns>
        </member>
        <member name="M:Dapper.SqlMapper.ExecuteScalar(System.Data.IDbConnection,Dapper.CommandDefinition)">
            <summary>
            Execute parameterized SQL that selects a single value
            </summary>
            <returns>The first cell selected</returns>
        </member>
        <member name="M:Dapper.SqlMapper.ExecuteScalar``1(System.Data.IDbConnection,Dapper.CommandDefinition)">
            <summary>
            Execute parameterized SQL that selects a single value
            </summary>
            <returns>The first cell selected</returns>
        </member>
        <member name="M:Dapper.SqlMapper.ExecuteReader(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Execute parameterized SQL and return an <see cref="T:System.Data.IDataReader"/>
            </summary>
            <returns>An <see cref="T:System.Data.IDataReader"/> that can be used to iterate over the results of the SQL query.</returns>
            <remarks>
            This is typically used when the results of a query are not processed by Dapper, for example, used to fill a <see cref="T:System.Data.DataTable"/>
            or <see cref="T:System.Data.DataSet"/>.
            </remarks>
            <example>
            <code>
            <![CDATA[
            DataTable table = new DataTable("MyTable");
            using (var reader = ExecuteReader(cnn, sql, param))
            {
                table.Load(reader);
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Dapper.SqlMapper.ExecuteReader(System.Data.IDbConnection,Dapper.CommandDefinition)">
            <summary>
            Execute parameterized SQL and return an <see cref="T:System.Data.IDataReader"/>
            </summary>
            <returns>An <see cref="T:System.Data.IDataReader"/> that can be used to iterate over the results of the SQL query.</returns>
            <remarks>
            This is typically used when the results of a query are not processed by Dapper, for example, used to fill a <see cref="T:System.Data.DataTable"/>
            or <see cref="T:System.Data.DataSet"/>.
            </remarks>
        </member>
        <member name="M:Dapper.SqlMapper.ExecuteReader(System.Data.IDbConnection,Dapper.CommandDefinition,System.Data.CommandBehavior)">
            <summary>
            Execute parameterized SQL and return an <see cref="T:System.Data.IDataReader"/>
            </summary>
            <returns>An <see cref="T:System.Data.IDataReader"/> that can be used to iterate over the results of the SQL query.</returns>
            <remarks>
            This is typically used when the results of a query are not processed by Dapper, for example, used to fill a <see cref="T:System.Data.DataTable"/>
            or <see cref="T:System.Data.DataSet"/>.
            </remarks>
        </member>
        <member name="M:Dapper.SqlMapper.Query(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Return a list of dynamic objects, reader is closed after the call
            </summary>
            <remarks>Note: each row can be accessed via "dynamic", or by casting to an IDictionary&lt;string,object&gt;</remarks>
        </member>
        <member name="M:Dapper.SqlMapper.Query``1(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Executes a query, returning the data typed as per T
            </summary>
            <remarks>the dynamic param may seem a bit odd, but this works around a major usability issue in vs, if it is Object vs completion gets annoying. Eg type new [space] get new object</remarks>
            <returns>A sequence of data of the supplied type; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is
            created per row, and a direct column-name===member-name mapping is assumed (case insensitive).
            </returns>
        </member>
        <member name="M:Dapper.SqlMapper.Query(System.Data.IDbConnection,System.Type,System.String,System.Object,System.Data.IDbTransaction,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Executes a query, returning the data typed as per the Type suggested
            </summary>
            <returns>A sequence of data of the supplied type; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is
            created per row, and a direct column-name===member-name mapping is assumed (case insensitive).
            </returns>
        </member>
        <member name="M:Dapper.SqlMapper.Query``1(System.Data.IDbConnection,Dapper.CommandDefinition)">
            <summary>
            Executes a query, returning the data typed as per T
            </summary>
            <remarks>the dynamic param may seem a bit odd, but this works around a major usability issue in vs, if it is Object vs completion gets annoying. Eg type new [space] get new object</remarks>
            <returns>A sequence of data of the supplied type; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is
            created per row, and a direct column-name===member-name mapping is assumed (case insensitive).
            </returns>
        </member>
        <member name="M:Dapper.SqlMapper.QueryMultiple(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Execute a command that returns multiple result sets, and access each in turn
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.QueryMultiple(System.Data.IDbConnection,Dapper.CommandDefinition)">
            <summary>
            Execute a command that returns multiple result sets, and access each in turn
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.Query``3(System.Data.IDbConnection,System.String,System.Func{``0,``1,``2},System.Object,System.Data.IDbTransaction,System.Boolean,System.String,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Maps a query to objects
            </summary>
            <typeparam name="TFirst">The first type in the record set</typeparam>
            <typeparam name="TSecond">The second type in the record set</typeparam>
            <typeparam name="TReturn">The return type</typeparam>
            <param name="cnn"></param>
            <param name="sql"></param>
            <param name="map"></param>
            <param name="param"></param>
            <param name="transaction"></param>
            <param name="buffered"></param>
            <param name="splitOn">The Field we should split and read the second object from (default: id)</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <param name="commandType">Is it a stored proc or a batch?</param>
            <returns></returns>
        </member>
        <member name="M:Dapper.SqlMapper.Query``4(System.Data.IDbConnection,System.String,System.Func{``0,``1,``2,``3},System.Object,System.Data.IDbTransaction,System.Boolean,System.String,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Maps a query to objects
            </summary>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <typeparam name="TThird"></typeparam>
            <typeparam name="TReturn"></typeparam>
            <param name="cnn"></param>
            <param name="sql"></param>
            <param name="map"></param>
            <param name="param"></param>
            <param name="transaction"></param>
            <param name="buffered"></param>
            <param name="splitOn">The Field we should split and read the second object from (default: id)</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <param name="commandType"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.SqlMapper.Query``5(System.Data.IDbConnection,System.String,System.Func{``0,``1,``2,``3,``4},System.Object,System.Data.IDbTransaction,System.Boolean,System.String,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Perform a multi mapping query with 4 input parameters
            </summary>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <typeparam name="TThird"></typeparam>
            <typeparam name="TFourth"></typeparam>
            <typeparam name="TReturn"></typeparam>
            <param name="cnn"></param>
            <param name="sql"></param>
            <param name="map"></param>
            <param name="param"></param>
            <param name="transaction"></param>
            <param name="buffered"></param>
            <param name="splitOn"></param>
            <param name="commandTimeout"></param>
            <param name="commandType"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.SqlMapper.Query``6(System.Data.IDbConnection,System.String,System.Func{``0,``1,``2,``3,``4,``5},System.Object,System.Data.IDbTransaction,System.Boolean,System.String,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Perform a multi mapping query with 5 input parameters
            </summary>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <typeparam name="TThird"></typeparam>
            <typeparam name="TFourth"></typeparam>
            <typeparam name="TFifth"></typeparam>
            <typeparam name="TReturn"></typeparam>
            <param name="cnn"></param>
            <param name="sql"></param>
            <param name="map"></param>
            <param name="param"></param>
            <param name="transaction"></param>
            <param name="buffered"></param>
            <param name="splitOn"></param>
            <param name="commandTimeout"></param>
            <param name="commandType"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.SqlMapper.Query``7(System.Data.IDbConnection,System.String,System.Func{``0,``1,``2,``3,``4,``5,``6},System.Object,System.Data.IDbTransaction,System.Boolean,System.String,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Perform a multi mapping query with 6 input parameters
            </summary>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <typeparam name="TThird"></typeparam>
            <typeparam name="TFourth"></typeparam>
            <typeparam name="TFifth"></typeparam>
            <typeparam name="TSixth"></typeparam>
            <typeparam name="TReturn"></typeparam>
            <param name="cnn"></param>
            <param name="sql"></param>
            <param name="map"></param>
            <param name="param"></param>
            <param name="transaction"></param>
            <param name="buffered"></param>
            <param name="splitOn"></param>
            <param name="commandTimeout"></param>
            <param name="commandType"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.SqlMapper.Query``8(System.Data.IDbConnection,System.String,System.Func{``0,``1,``2,``3,``4,``5,``6,``7},System.Object,System.Data.IDbTransaction,System.Boolean,System.String,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Perform a multi mapping query with 7 input parameters
            </summary>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <typeparam name="TThird"></typeparam>
            <typeparam name="TFourth"></typeparam>
            <typeparam name="TFifth"></typeparam>
            <typeparam name="TSixth"></typeparam>
            <typeparam name="TSeventh"></typeparam>
            <typeparam name="TReturn"></typeparam>
            <param name="cnn"></param>
            <param name="sql"></param>
            <param name="map"></param>
            <param name="param"></param>
            <param name="transaction"></param>
            <param name="buffered"></param>
            <param name="splitOn"></param>
            <param name="commandTimeout"></param>
            <param name="commandType"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.SqlMapper.Query``1(System.Data.IDbConnection,System.String,System.Type[],System.Func{System.Object[],``0},System.Object,System.Data.IDbTransaction,System.Boolean,System.String,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Perform a multi mapping query with arbitrary input parameters
            </summary>
            <typeparam name="TReturn">The return type</typeparam>
            <param name="cnn"></param>
            <param name="sql"></param>
            <param name="types">array of types in the record set</param>
            <param name="map"></param>
            <param name="param"></param>
            <param name="transaction"></param>
            <param name="buffered"></param>
            <param name="splitOn">The Field we should split and read the second object from (default: id)</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <param name="commandType">Is it a stored proc or a batch?</param>
            <returns></returns>
        </member>
        <member name="M:Dapper.SqlMapper.ReadChar(System.Object)">
            <summary>
            Internal use only
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.SqlMapper.ReadNullableChar(System.Object)">
            <summary>
            Internal use only
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.FindOrAddParameter(System.Data.IDataParameterCollection,System.Data.IDbCommand,System.String)">
            <summary>
            Internal use only
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.PackListParameters(System.Data.IDbCommand,System.String,System.Object)">
            <summary>
            Internal use only
            </summary>
        </member>
        <member name="T:Dapper.SqlMapper.LiteralToken">
            <summary>
            Represents a placeholder for a value that should be replaced as a literal value in the resulting sql
            </summary>
        </member>
        <member name="P:Dapper.SqlMapper.LiteralToken.Token">
            <summary>
            The text in the original command that should be replaced
            </summary>
        </member>
        <member name="P:Dapper.SqlMapper.LiteralToken.Member">
            <summary>
            The name of the member referred to by the token
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.ReplaceLiterals(Dapper.SqlMapper.IParameterLookup,System.Data.IDbCommand)">
            <summary>
            Replace all literal tokens with their text form
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.Format(System.Object)">
            <summary>
            Convert numeric values to their string form for SQL literal purposes
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.CreateParamInfoGenerator(Dapper.SqlMapper.Identity,System.Boolean,System.Boolean)">
            <summary>
            Internal use only
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.GetTypeMap(System.Type)">
            <summary>
            Gets type-map for the given type
            </summary>
            <returns>Type map implementation, DefaultTypeMap instance if no override present</returns>
        </member>
        <member name="M:Dapper.SqlMapper.SetTypeMap(System.Type,Dapper.SqlMapper.ITypeMap)">
            <summary>
            Set custom mapping for type deserializers
            </summary>
            <param name="type">Entity type to override</param>
            <param name="map">Mapping rules impementation, null to remove custom map</param>
        </member>
        <member name="M:Dapper.SqlMapper.GetTypeDeserializer(System.Type,System.Data.IDataReader,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Internal use only
            </summary>
            <param name="type"></param>
            <param name="reader"></param>
            <param name="startBound"></param>
            <param name="length"></param>
            <param name="returnNullIfFirstMissing"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.SqlMapper.ThrowDataException(System.Exception,System.Int32,System.Data.IDataReader,System.Object)">
            <summary>
            Throws a data exception, only used internally
            </summary>
        </member>
        <member name="F:Dapper.SqlMapper.DataTableTypeNameKey">
            <summary>
            Key used to indicate the type name associated with a DataTable
            </summary>
        </member>
        <member name="P:Dapper.SqlMapper.ConnectionStringComparer">
            <summary>
            How should connection strings be compared for equivalence? Defaults to StringComparer.Ordinal.
            Providing a custom implementation can be useful for allowing multi-tenancy databases with identical
            schema to share strategies. Note that usual equivalence rules apply: any equivalent connection strings
            <b>MUST</b> yield the same hash-code.
            </summary>
        </member>
        <member name="T:Dapper.SqlMapper.GridReader">
            <summary>
            The grid reader provides interfaces for reading multiple result sets from a Dapper query 
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.GridReader.Read(System.Boolean)">
            <summary>
            Read the next grid of results, returned as a dynamic object
            </summary>
            <remarks>Note: each row can be accessed via "dynamic", or by casting to an IDictionary&lt;string,object&gt;</remarks>
        </member>
        <member name="M:Dapper.SqlMapper.GridReader.Read``1(System.Boolean)">
            <summary>
            Read the next grid of results
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.GridReader.Read(System.Type,System.Boolean)">
            <summary>
            Read the next grid of results
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.GridReader.Read``3(System.Func{``0,``1,``2},System.String,System.Boolean)">
            <summary>
            Read multiple objects from a single record set on the grid
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.GridReader.Read``4(System.Func{``0,``1,``2,``3},System.String,System.Boolean)">
            <summary>
            Read multiple objects from a single record set on the grid
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.GridReader.Read``5(System.Func{``0,``1,``2,``3,``4},System.String,System.Boolean)">
            <summary>
            Read multiple objects from a single record set on the grid
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.GridReader.Read``6(System.Func{``0,``1,``2,``3,``4,``5},System.String,System.Boolean)">
            <summary>
            Read multiple objects from a single record set on the grid
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.GridReader.Read``7(System.Func{``0,``1,``2,``3,``4,``5,``6},System.String,System.Boolean)">
            <summary>
            Read multiple objects from a single record set on the grid
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.GridReader.Read``8(System.Func{``0,``1,``2,``3,``4,``5,``6,``7},System.String,System.Boolean)">
            <summary>
            Read multiple objects from a single record set on the grid
            </summary>
        </member>
        <member name="P:Dapper.SqlMapper.GridReader.IsConsumed">
            <summary>
            Has the underlying reader been consumed?
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.GridReader.Dispose">
            <summary>
            Dispose the grid, closing and disposing both the underlying reader and command.
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.AsTableValuedParameter(System.Data.DataTable,System.String)">
            <summary>
            Used to pass a DataTable as a TableValuedParameter
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.SetTypeName(System.Data.DataTable,System.String)">
            <summary>
            Associate a DataTable with a type name
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.GetTypeName(System.Data.DataTable)">
            <summary>
            Fetch the type name associated with a DataTable
            </summary>
        </member>
        <member name="T:Dapper.DynamicParameters">
            <summary>
            A bag of parameters that can be passed to the Dapper Query and Execute methods
            </summary>
        </member>
        <member name="M:Dapper.DynamicParameters.#ctor">
            <summary>
            construct a dynamic parameter bag
            </summary>
        </member>
        <member name="M:Dapper.DynamicParameters.#ctor(System.Object)">
            <summary>
            construct a dynamic parameter bag
            </summary>
            <param name="template">can be an anonymous type or a DynamicParameters bag</param>
        </member>
        <member name="M:Dapper.DynamicParameters.AddDynamicParams(System.Object)">
            <summary>
            Append a whole object full of params to the dynamic
            EG: AddDynamicParams(new {A = 1, B = 2}) // will add property A and B to the dynamic
            </summary>
            <param name="param"></param>
        </member>
        <member name="M:Dapper.DynamicParameters.Add(System.String,System.Object,System.Nullable{System.Data.DbType},System.Nullable{System.Data.ParameterDirection},System.Nullable{System.Int32})">
            <summary>
            Add a parameter to this dynamic parameter list
            </summary>
        </member>
        <member name="M:Dapper.DynamicParameters.Add(System.String,System.Object,System.Nullable{System.Data.DbType},System.Nullable{System.Data.ParameterDirection},System.Nullable{System.Int32},System.Nullable{System.Byte},System.Nullable{System.Byte})">
            <summary>
            Add a parameter to this dynamic parameter list
            </summary>
        </member>
        <member name="P:Dapper.DynamicParameters.RemoveUnused">
            <summary>
            If true, the command-text is inspected and only values that are clearly used are included on the connection
            </summary>
        </member>
        <member name="M:Dapper.DynamicParameters.AddParameters(System.Data.IDbCommand,Dapper.SqlMapper.Identity)">
            <summary>
            Add all the parameters needed to the command just before it executes
            </summary>
            <param name="command">The raw command prior to execution</param>
            <param name="identity">Information about the query</param>
        </member>
        <member name="P:Dapper.DynamicParameters.ParameterNames">
            <summary>
            All the names of the param in the bag, use Get to yank them out
            </summary>
        </member>
        <member name="M:Dapper.DynamicParameters.Get``1(System.String)">
            <summary>
            Get the value of a parameter
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name"></param>
            <returns>The value, note DBNull.Value is not returned, instead the value is returned as null</returns>
        </member>
        <member name="M:Dapper.DynamicParameters.Output``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Nullable{System.Data.DbType},System.Nullable{System.Int32})">
            <summary>
            Allows you to automatically populate a target property/field from output parameters. It actually
            creates an InputOutput parameter, so you can still pass data in. 
            </summary>
            <typeparam name="T"></typeparam>
            <param name="target">The object whose property/field you wish to populate.</param>
            <param name="expression">A MemberExpression targeting a property/field of the target (or descendant thereof.)</param>
            <param name="dbType"></param>
            <param name="size">The size to set on the parameter. Defaults to 0, or DbString.DefaultLength in case of strings.</param>
            <returns>The DynamicParameters instance</returns>
        </member>
        <member name="T:Dapper.TableValuedParameter">
            <summary>
            Used to pass a DataTable as a TableValuedParameter
            </summary>
        </member>
        <member name="M:Dapper.TableValuedParameter.#ctor(System.Data.DataTable)">
            <summary>
            Create a new instance of TableValuedParameter
            </summary>
        </member>
        <member name="M:Dapper.TableValuedParameter.#ctor(System.Data.DataTable,System.String)">
            <summary>
            Create a new instance of TableValuedParameter
            </summary>
        </member>
        <member name="T:Dapper.DbString">
            <summary>
            This class represents a SQL string, it can be used if you need to denote your parameter is a Char vs VarChar vs nVarChar vs nChar
            </summary>
        </member>
        <member name="F:Dapper.DbString.DefaultLength">
            <summary>
            A value to set the default value of strings
            going through Dapper. Default is 4000, any value larger than this
            field will not have the default value applied.
            </summary>
        </member>
        <member name="M:Dapper.DbString.#ctor">
            <summary>
            Create a new DbString
            </summary>
        </member>
        <member name="P:Dapper.DbString.IsAnsi">
            <summary>
            Ansi vs Unicode 
            </summary>
        </member>
        <member name="P:Dapper.DbString.IsFixedLength">
            <summary>
            Fixed length 
            </summary>
        </member>
        <member name="P:Dapper.DbString.Length">
            <summary>
            Length of the string -1 for max
            </summary>
        </member>
        <member name="P:Dapper.DbString.Value">
            <summary>
            The value of the string
            </summary>
        </member>
        <member name="M:Dapper.DbString.AddParameter(System.Data.IDbCommand,System.String)">
            <summary>
            Add the parameter to the command... internal use only
            </summary>
            <param name="command"></param>
            <param name="name"></param>
        </member>
        <member name="T:Dapper.FeatureSupport">
            <summary>
            Handles variances in features per DBMS
            </summary>
        </member>
        <member name="M:Dapper.FeatureSupport.Get(System.Data.IDbConnection)">
            <summary>
            Gets the feature set based on the passed connection
            </summary>
        </member>
        <member name="P:Dapper.FeatureSupport.Arrays">
            <summary>
            True if the db supports array columns e.g. Postgresql
            </summary>
        </member>
        <member name="T:Dapper.SimpleMemberMap">
            <summary>
            Represents simple member map for one of target parameter or property or field to source DataReader column
            </summary>
        </member>
        <member name="M:Dapper.SimpleMemberMap.#ctor(System.String,System.Reflection.PropertyInfo)">
            <summary>
            Creates instance for simple property mapping
            </summary>
            <param name="columnName">DataReader column name</param>
            <param name="property">Target property</param>
        </member>
        <member name="M:Dapper.SimpleMemberMap.#ctor(System.String,System.Reflection.FieldInfo)">
            <summary>
            Creates instance for simple field mapping
            </summary>
            <param name="columnName">DataReader column name</param>
            <param name="field">Target property</param>
        </member>
        <member name="M:Dapper.SimpleMemberMap.#ctor(System.String,System.Reflection.ParameterInfo)">
            <summary>
            Creates instance for simple constructor parameter mapping
            </summary>
            <param name="columnName">DataReader column name</param>
            <param name="parameter">Target constructor parameter</param>
        </member>
        <member name="P:Dapper.SimpleMemberMap.ColumnName">
            <summary>
            DataReader column name
            </summary>
        </member>
        <member name="P:Dapper.SimpleMemberMap.MemberType">
            <summary>
            Target member type
            </summary>
        </member>
        <member name="P:Dapper.SimpleMemberMap.Property">
            <summary>
            Target property
            </summary>
        </member>
        <member name="P:Dapper.SimpleMemberMap.Field">
            <summary>
            Target field
            </summary>
        </member>
        <member name="P:Dapper.SimpleMemberMap.Parameter">
            <summary>
            Target constructor parameter
            </summary>
        </member>
        <member name="T:Dapper.DefaultTypeMap">
            <summary>
            Represents default type mapping strategy used by Dapper
            </summary>
        </member>
        <member name="M:Dapper.DefaultTypeMap.#ctor(System.Type)">
            <summary>
            Creates default type map
            </summary>
            <param name="type">Entity type</param>
        </member>
        <member name="M:Dapper.DefaultTypeMap.FindConstructor(System.String[],System.Type[])">
            <summary>
            Finds best constructor
            </summary>
            <param name="names">DataReader column names</param>
            <param name="types">DataReader column types</param>
            <returns>Matching constructor or default one</returns>
        </member>
        <member name="M:Dapper.DefaultTypeMap.FindExplicitConstructor">
            <summary>
            Returns the constructor, if any, that has the ExplicitConstructorAttribute on it.
            </summary>
        </member>
        <member name="M:Dapper.DefaultTypeMap.GetConstructorParameter(System.Reflection.ConstructorInfo,System.String)">
            <summary>
            Gets mapping for constructor parameter
            </summary>
            <param name="constructor">Constructor to resolve</param>
            <param name="columnName">DataReader column name</param>
            <returns>Mapping implementation</returns>
        </member>
        <member name="M:Dapper.DefaultTypeMap.GetMember(System.String)">
            <summary>
            Gets member mapping for column
            </summary>
            <param name="columnName">DataReader column name</param>
            <returns>Mapping implementation</returns>
        </member>
        <member name="P:Dapper.DefaultTypeMap.MatchNamesWithUnderscores">
            <summary>
            Should column names like User_Id be allowed to match properties/fields like UserId ?
            </summary>
        </member>
        <member name="T:Dapper.CustomPropertyTypeMap">
            <summary>
            Implements custom property mapping by user provided criteria (usually presence of some custom attribute with column to member mapping)
            </summary>
        </member>
        <member name="M:Dapper.CustomPropertyTypeMap.#ctor(System.Type,System.Func{System.Type,System.String,System.Reflection.PropertyInfo})">
            <summary>
            Creates custom property mapping
            </summary>
            <param name="type">Target entity type</param>
            <param name="propertySelector">Property selector based on target type and DataReader column name</param>
        </member>
        <member name="M:Dapper.CustomPropertyTypeMap.FindConstructor(System.String[],System.Type[])">
            <summary>
            Always returns default constructor
            </summary>
            <param name="names">DataReader column names</param>
            <param name="types">DataReader column types</param>
            <returns>Default constructor</returns>
        </member>
        <member name="M:Dapper.CustomPropertyTypeMap.FindExplicitConstructor">
            <summary>
            Always returns null
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dapper.CustomPropertyTypeMap.GetConstructorParameter(System.Reflection.ConstructorInfo,System.String)">
            <summary>
            Not implemented as far as default constructor used for all cases
            </summary>
            <param name="constructor"></param>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.CustomPropertyTypeMap.GetMember(System.String)">
            <summary>
            Returns property based on selector strategy
            </summary>
            <param name="columnName">DataReader column name</param>
            <returns>Poperty member map</returns>
        </member>
        <member name="T:Dapper.IWrappedDataReader">
            <summary>
            Describes a reader that controls the lifetime of both a command and a reader,
            exposing the downstream command/reader as properties.
            </summary>
        </member>
        <member name="P:Dapper.IWrappedDataReader.Reader">
            <summary>
            Obtain the underlying reader
            </summary>
        </member>
        <member name="P:Dapper.IWrappedDataReader.Command">
            <summary>
            Obtain the underlying command
            </summary>
        </member>
        <member name="T:Dapper.ExplicitConstructorAttribute">
            <summary>
            Tell Dapper to use an explicit constructor, passing nulls or 0s for all parameters
            </summary>
        </member>
    </members>
</doc>
