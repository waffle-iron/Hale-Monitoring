using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.NetworkInformation;
using System.Text;

namespace Hale.Agent
{
    /// <summary>
    /// This is a mandatory class that sets the structure for the response generated by the Hale Agent Check API.
    /// Do not change anything in this file if the core does not expect different values.
    /// 
    /// See http://hale-docs.rtfd.org/
    /// 
    /// </summary>
    public class Response
    {

        /// <summary>
        /// Default Constructor. Takes no arguments.
        /// </summary>
        public Response()
        {
            HostName = Dns.GetHostName().ToString();
            HostIPs = GetIPAddresses();
            Origin = "Hale" ;
            Timestamp = DateTime.Now;

            Text = new List<string>();
            Performance = new List<PerformancePoint>();
       } 

        private string GetHostName()
        {
            var ipProperties = IPGlobalProperties.GetIPGlobalProperties();
            return string.Format("{0}.{1}", ipProperties.HostName, ipProperties.DomainName);
        }
        private List<string> GetIPAddresses()
        {
            List<string> output = new List<string>();
            foreach (IPAddress ip in Dns.GetHostEntry(Dns.GetHostName()).AddressList) {
                if (ip.AddressFamily.ToString() == "InterNetwork")
                    output.Add(ip.ToString());
            }

            return output;
        }

        /// <summary>
        /// Name of the host running the check.
        /// </summary>
        public string HostName
        {
            get;
            set;
        }

        /// <summary>
        /// IP Addresses of the host running the check.
        /// </summary>
        public List<string> HostIPs
        {
            get;
            set;
        }

        /// <summary>
        /// A hash from the sending server that makes it possible to verify that the call was actually from the Hale Core in question.
        /// </summary>
        public string Origin
        {
            get;
            set;
        }

        /// <summary>
        /// A timestamp for when the check was performed.
        /// </summary>
        public DateTime Timestamp
        {
            get;
            set;
        }

        /// <summary>
        /// The status of the check result. Use the provided enumerator Status to set this.
        /// </summary>
        public int Status
        {
            get;
            set;
        }

        /// <summary>
        /// Any accompanying text that might be relevant to display in the Web UI.
        /// Might be "Uptime: 1d 2h 1m 12s" for example. This needs to be readable by the human eye.
        /// </summary>
        public List<string> Text
        {
            get;
            set;
        }

        /// <summary>
        /// Any metrics that you would like to register for this check.
        /// This might be free disk percentage, uptime in different quantities etc.
        /// </summary>
        public List<PerformancePoint> Performance
        {
            get;
            set;
        }

    }

    /// <summary>
    /// Enumerator used for Check.Status to make sure we speak the same language as the Hale Core.
    /// </summary>
    internal enum Status
    {
        Info = 0,
        OK = 1,
        Warning = 2,
        Critical = 3
    }

    /// <summary>
    /// The performance point class used to store a tuple of name and value.
    /// </summary>
    public class PerformancePoint
    {
        /// <summary>
        /// Default constructor.
        /// </summary>
        /// <param name="name">Name of the performance point. Will be displayed separately in the Web UI Graphs</param>
        /// <param name="value">The value for this specific measuring point.</param>
        public PerformancePoint(string name, double value)
        {
            this.Name = name;
            this.Value = value;
        }
        /// <summary>
        /// Name of the performance point.
        /// </summary>
        public string Name
        {
            get;
            set;
        }
        /// <summary>
        /// Value at the specific measuring point.
        /// </summary>
        public double Value
        {
            get;
            set;
        }
    }
}
